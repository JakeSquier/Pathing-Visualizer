{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";export function depthFirstSearch(grid,startNode,finishNode){if(!startNode||!finishNode||startNode===finishNode){return false;}var unvisitedNodes=[];var visitedNodesInOrder=[];unvisitedNodes.push(startNode);while(unvisitedNodes.length!==0){var closestNode=unvisitedNodes.shift();if(closestNode.isWall)continue;if(closestNode===finishNode)return visitedNodesInOrder;visitedNodesInOrder.push(closestNode);closestNode.isVisited=true;var unvisitedNeighbours=getUnvisitedNeighbours(closestNode,grid);var _iterator=_createForOfIteratorHelper(unvisitedNeighbours),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var unvisitedNeighbour=_step.value;unvisitedNeighbour.previousNode=closestNode;unvisitedNodes.unshift(unvisitedNeighbour);}}catch(err){_iterator.e(err);}finally{_iterator.f();}}return visitedNodesInOrder;}function getUnvisitedNeighbours(node,grid){var neighbours=[];var row=node.row,col=node.col;if(col!==0)neighbours.push(grid[row][col-1]);if(row!==0)neighbours.push(grid[row-1][col]);if(col!==grid[0].length-1)neighbours.push(grid[row][col+1]);if(row!==grid.length-1)neighbours.push(grid[row+1][col]);return neighbours.filter(function(neighbour){return!neighbour.isVisited;});}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/depthFisrtSearch.js"],"names":["depthFirstSearch","grid","startNode","finishNode","unvisitedNodes","visitedNodesInOrder","push","length","closestNode","shift","isWall","isVisited","unvisitedNeighbours","getUnvisitedNeighbours","unvisitedNeighbour","previousNode","unshift","node","neighbours","row","col","filter","neighbour"],"mappings":"mNAAA,MAAO,SAASA,CAAAA,gBAAT,CAA0BC,IAA1B,CAAgCC,SAAhC,CAA2CC,UAA3C,CAAuD,CAC1D,GAAI,CAACD,SAAD,EAAc,CAACC,UAAf,EAA6BD,SAAS,GAAKC,UAA/C,CAA2D,CACzD,MAAO,MAAP,CACD,CACD,GAAIC,CAAAA,cAAc,CAAG,EAArB,CACA,GAAIC,CAAAA,mBAAmB,CAAG,EAA1B,CACAD,cAAc,CAACE,IAAf,CAAoBJ,SAApB,EACA,MAAOE,cAAc,CAACG,MAAf,GAA0B,CAAjC,CAAoC,CAClC,GAAIC,CAAAA,WAAW,CAAGJ,cAAc,CAACK,KAAf,EAAlB,CACA,GAAID,WAAW,CAACE,MAAhB,CAAwB,SACxB,GAAIF,WAAW,GAAKL,UAApB,CAAgC,MAAOE,CAAAA,mBAAP,CAChCA,mBAAmB,CAACC,IAApB,CAAyBE,WAAzB,EACAA,WAAW,CAACG,SAAZ,CAAwB,IAAxB,CACA,GAAIC,CAAAA,mBAAmB,CAAGC,sBAAsB,CAACL,WAAD,CAAcP,IAAd,CAAhD,CANkC,yCAOHW,mBAPG,YAOlC,+CAAoD,IAA3CE,CAAAA,kBAA2C,aAClDA,kBAAkB,CAACC,YAAnB,CAAkCP,WAAlC,CACAJ,cAAc,CAACY,OAAf,CAAuBF,kBAAvB,EACD,CAViC,qDAWnC,CACD,MAAOT,CAAAA,mBAAP,CACD,CAED,QAASQ,CAAAA,sBAAT,CAAgCI,IAAhC,CAAsChB,IAAtC,CAA4C,CAC1C,GAAIiB,CAAAA,UAAU,CAAG,EAAjB,CAD0C,GAEpCC,CAAAA,GAFoC,CAEvBF,IAFuB,CAEpCE,GAFoC,CAE/BC,GAF+B,CAEvBH,IAFuB,CAE/BG,GAF+B,CAG1C,GAAIA,GAAG,GAAK,CAAZ,CAAeF,UAAU,CAACZ,IAAX,CAAgBL,IAAI,CAACkB,GAAD,CAAJ,CAAUC,GAAG,CAAG,CAAhB,CAAhB,EACf,GAAID,GAAG,GAAK,CAAZ,CAAeD,UAAU,CAACZ,IAAX,CAAgBL,IAAI,CAACkB,GAAG,CAAG,CAAP,CAAJ,CAAcC,GAAd,CAAhB,EACf,GAAIA,GAAG,GAAKnB,IAAI,CAAC,CAAD,CAAJ,CAAQM,MAAR,CAAiB,CAA7B,CAAgCW,UAAU,CAACZ,IAAX,CAAgBL,IAAI,CAACkB,GAAD,CAAJ,CAAUC,GAAG,CAAG,CAAhB,CAAhB,EAChC,GAAID,GAAG,GAAKlB,IAAI,CAACM,MAAL,CAAc,CAA1B,CAA6BW,UAAU,CAACZ,IAAX,CAAgBL,IAAI,CAACkB,GAAG,CAAG,CAAP,CAAJ,CAAcC,GAAd,CAAhB,EAC7B,MAAOF,CAAAA,UAAU,CAACG,MAAX,CAAkB,SAACC,SAAD,QAAe,CAACA,SAAS,CAACX,SAA1B,EAAlB,CAAP,CACD","sourcesContent":["export function depthFirstSearch(grid, startNode, finishNode) {\n    if (!startNode || !finishNode || startNode === finishNode) {\n      return false;\n    }\n    let unvisitedNodes = [];\n    let visitedNodesInOrder = [];\n    unvisitedNodes.push(startNode);\n    while (unvisitedNodes.length !== 0) {\n      let closestNode = unvisitedNodes.shift();\n      if (closestNode.isWall) continue;\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      visitedNodesInOrder.push(closestNode);\n      closestNode.isVisited = true;\n      let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\n      for (let unvisitedNeighbour of unvisitedNeighbours) {\n        unvisitedNeighbour.previousNode = closestNode;\n        unvisitedNodes.unshift(unvisitedNeighbour);\n      }\n    }\n    return visitedNodesInOrder;\n  }\n  \n  function getUnvisitedNeighbours(node, grid) {\n    let neighbours = [];\n    let { row, col } = node;\n    if (col !== 0) neighbours.push(grid[row][col - 1]);\n    if (row !== 0) neighbours.push(grid[row - 1][col]);\n    if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n    if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n    return neighbours.filter((neighbour) => !neighbour.isVisited);\n  }"]},"metadata":{},"sourceType":"module"}