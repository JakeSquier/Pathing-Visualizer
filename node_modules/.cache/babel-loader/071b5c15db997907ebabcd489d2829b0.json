{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\";\nimport React, { Component, useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport Navbar from './navComponents/Navbar';\nimport NavTop from './navComponents/topNav';\nimport itemData from '../data/item-data';\nimport algData from '../data/alg-data';\nimport pathGrabWorker from '../workers/pathGrabWorker';\nimport _dijkstraWorker from \"../workers/dijkstraWorker\";\nimport aStarWorker from '../workers/aStarWorker';\nimport greedyBestFirstSearchWorker from '../workers/greedyBestFirstSearchWorker';\nimport breadthFirstSearchWorker from '../workers/breadthFirstSearchWorker';\nimport depthFirstSearchWorker from '../workers/depthFirstSearchWorker';\nimport bidirectionalGreedySearchWorker from '../workers/bidirectionalGreedySearchWorker';\nimport WebWorker from \"../workers/workerSetup\";\nimport './mainContainer.css';\nimport { Message } from '@material-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MainContainer extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.handleMouseDown = (row, col) => {\n      var newGrid = this.state.grid;\n      var node = newGrid[row][col];\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) return;\n\n      if (this.state.grid[row][col].isStart) {\n        this.setState({\n          startIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.grid[row][col].isFinish) {\n        this.setState({\n          finishIsMoving: true\n        });\n        newGrid = this.state.grid;\n        console.log(newGrid[row][col]);\n      } else if (this.state.currItemDesc === 'Stop') {\n        this.setState({\n          stopIsMoving: true,\n          isThereStop: true\n        });\n      } else if (this.state.currItemDesc === 'Wall' && !node.isStart && !node.isFinish && !node.isStop) {\n        newGrid = getNewGridWithWallToggled(newGrid, row, col);\n      }\n\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n\n    this.handleMouseEnter = (row, col) => {\n      if (!this.state.mouseIsPressed) return;\n      var newGrid = this.state.grid;\n      var node = newGrid[row][col];\n      var nodeEl = document.getElementById(`node-${node.row}-${node.col}`);\n      if (node.isStart || node.isStop || node.isFinish || this.state.visualizingAlgorithm || this.state.generatingMaze) return;\n\n      if (this.state.startIsMoving) {\n        newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode);\n        this.setState({\n          startNode: [row, col]\n        });\n      } else if (this.state.finishIsMoving) {\n        newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode);\n        this.setState({\n          finishNode: [row, col]\n        });\n      } else if (this.state.currItemDesc === 'Stop') {\n        newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n        this.setState({\n          prevStop: [row, col]\n        });\n      } else if (this.state.currItemDesc === 'Wall' && !node.isStart && !node.isFinish && !node.isStop) {\n        newGrid = getNewGridWithWallToggled(newGrid, row, col);\n      }\n\n      this.setState({\n        grid: newGrid\n      });\n    };\n\n    this.handleMouseUp = (row, col) => {\n      this.setState({\n        mouseIsPressed: false,\n        startIsMoving: false,\n        finishIsMoving: false\n      });\n    };\n\n    this.handleNav = () => {\n      this.setState({\n        showNav: !this.state.showNav\n      });\n    };\n\n    this.handleItemDescChange = (e, item) => {\n      var newItem = `${item}`;\n      itemData.map(_item => {\n        if (item === _item.id) {\n          this.setState({\n            currItemDesc: newItem,\n            currItemObj: _item\n          });\n        }\n      });\n    };\n\n    this.handleTabs = (e, val) => {\n      this.setState({\n        currAlgTab: val,\n        currAlgObj: algData[val]\n      });\n    };\n\n    this.handleMazeTabs = (e, val) => {\n      this.setState({\n        currMazeTab: val\n      });\n      console.log(val);\n    };\n\n    this.handleSpeedChange = (e, val) => {\n      var currSpeed = this.state.animationSpeed;\n\n      if (val && currSpeed > 5) {\n        this.setState({\n          animationSpeed: currSpeed - 5\n        });\n      }\n\n      if (!val && currSpeed < 35) {\n        this.setState({\n          animationSpeed: currSpeed + 5\n        });\n      }\n    };\n\n    this.generateMaze = e => {\n      if (this.state.generatingMaze || this.state.visualizingAlgorithm || !this.state.gridClean || this.state.maze) return;\n      this.setState({\n        maze: true\n      });\n      var currAlg = this.state.currMazeTab;\n\n      if (currAlg === 0) {\n        this.generateRecursiveDivisionMaze();\n      } else if (currAlg === 1) {\n        this.generateVerticalMaze();\n      } else if (currAlg === 2) {\n        this.generateHorizontalMaze();\n      } else if (currAlg === 3) {\n        this.generateRandomMaze();\n      }\n    };\n\n    this.resetGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      document.getElementsByClassName('progress')[0].style.width = '0%';\n      var rowNum = this.state.rowNum;\n      var colNum = this.state.colNum;\n      const grid = this.state.grid;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n      const stopNode = this.state.isThereStop ? this.state.prevStop : false;\n\n      for (let row = 0; row < rowNum; row++) {\n        for (let col = 0; col < colNum; col++) {\n          if (row === startNode[0] && col === startNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if (row === finishNode[0] && col === finishNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else if (stopNode !== false && row === stopNode[0] && col === stopNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-stop\";\n          } else if (grid[row][col].isWall) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-wall\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n\n      const newGrid = getGridWithoutPath(this.state.grid, true);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n        gridClean: true,\n        maze: false\n      });\n    };\n\n    this.clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      document.getElementsByClassName('progress')[0].style.width = '0%';\n      var rowNum = this.state.rowNum;\n      var colNum = this.state.colNum;\n      const grid = this.state.grid;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n\n      for (let row = 0; row < rowNum; row++) {\n        for (let col = 0; col < colNum; col++) {\n          if (row === startNode[0] && col === startNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if (row === finishNode[0] && col === finishNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n        prevStop: [],\n        isThereStop: false,\n        gridClean: true,\n        maze: false\n      });\n    };\n\n    this.playAnimation = e => {\n      if (this.state.generatingMaze || this.state.visualizingAlgorithm || !this.state.gridClean) return;\n      var currAlg = this.state.currAlgObj.id;\n      this.setState({\n        gridClean: false,\n        visualizingAlgorithm: true\n      });\n\n      if (currAlg === 0) {\n        this.visualizeDijkstra();\n      } else if (currAlg === 1) {\n        this.visualizeaStar();\n      } else if (currAlg === 4) {\n        this.visualizbfs();\n      } else if (currAlg === 2) {\n        this.visualizegbfs();\n      } else if (currAlg === 5) {\n        this.visualizedfs();\n      } else if (currAlg === 3) {\n        this.visualizeBidirectionalGreedySearch();\n      }\n\n      return;\n    };\n\n    this.handleProgressSetup = (isThereStop, isSecondAnimation, animationSpeed, animationDuration) => {\n      const progressBar = document.getElementById(`progressBar`);\n      progressBar.className = 'progress progress-no-stop';\n\n      if (!isThereStop) {\n        progressBar.className = 'progress progress-no-stop-anime';\n        progressBar.style.animationDuration = `${animationDuration * animationSpeed / 1000}s`;\n        progressBar.addEventListener('animationend', () => {\n          progressBar.classList.remove('progress-no-stop-anime');\n          progressBar.className = 'progress progress-no-stop';\n        });\n        return 100 / animationDuration;\n      } else if (!isSecondAnimation && isThereStop) {\n        progressBar.className = 'progress progress-no-stop-anime';\n        progressBar.style.animationDuration = `${animationDuration * animationSpeed / 1000}s`;\n        progressBar.addEventListener('animationend', () => {\n          progressBar.classList.remove('progress-no-stop-anime');\n          progressBar.className = 'progress progress-no-stop';\n        });\n        return 50 / animationDuration;\n      } else if (isSecondAnimation && isThereStop) {\n        progressBar.className = 'progress progress-stop-anime';\n        progressBar.style.animationDuration = `${animationDuration * animationSpeed / 1000}s`;\n        progressBar.addEventListener('animationend', () => {\n          progressBar.classList.remove('progress-stop-anime');\n          progressBar.className = 'progress progress-stop';\n        });\n        return 50 / animationDuration;\n      }\n    };\n\n    this.animateDijkstra = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall) {\n      let animationSpeed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n      let isThereStop = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'; //progressTracker\n\n      const progress = $(\"#progressBar\");\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizeDijkstra = () => {\n      this.dijkstraWorker = new WebWorker(_dijkstraWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        var nodesInShortestPathOrder = [];\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.dijkstraWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                var nodesInShortestPathOrder;\n\n                if (messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                  nodesInShortestPathOrder = [startNode, stopNode, finishNode];\n                } else if (messageTwo.data[0][0] === false) {\n                  nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]];\n                } else if (messageTwo.data[1][0] === false) {\n                  console.log(messageTwo.data[1][0]);\n                  nodesInShortestPathOrder = [...messageTwo.data[0], finishNode];\n                } else {\n                  nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]];\n                }\n\n                this.animateDijkstra(message.data[0], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animateDijkstra, message.data[0].length * this.state.animationSpeed, message.data[1], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, false]);\n        this.dijkstraWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data;\n            this.animateDijkstra(message.data, nodesInShortestPathOrder, message.data.length, this.state.animationSpeed, this.state.isThereStop);\n          });\n        });\n      }\n    };\n\n    this.animateaStar = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed, isThereStop) {\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'; //progress tracker\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizeaStar = () => {\n      this.aStarWorker = new WebWorker(aStarWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        this.aStarWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.aStarWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                var nodesInShortestPathOrder;\n\n                if (messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                  nodesInShortestPathOrder = [startNode, stopNode, finishNode];\n                } else if (messageTwo.data[0][0] === false) {\n                  nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]];\n                } else if (messageTwo.data[1][0] === false) {\n                  console.log(messageTwo.data[1][0]);\n                  nodesInShortestPathOrder = [...messageTwo.data[0], finishNode];\n                } else {\n                  nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]];\n                }\n\n                this.animateaStar(message.data[0], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animateaStar, message.data[0].length * this.state.animationSpeed, message.data[1], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.aStarWorker.postMessage([grid, startNode, finishNode, false]);\n        this.aStarWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data;\n            this.animateaStar(message.data, nodesInShortestPathOrder, message.data.length, this.state.animationSpeed, this.state.isThereStop, false);\n          });\n        });\n      }\n    };\n\n    this.animatebfs = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed, isThereStop) {\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'; //progress tracker\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationSpeed * animationStall, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizbfs = () => {\n      this.breadthFirstSearchWorker = new WebWorker(breadthFirstSearchWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        var nodesInShortestPathOrder = [];\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.breadthFirstSearchWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                var nodesInShortestPathOrder;\n\n                if (messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                  nodesInShortestPathOrder = [startNode, stopNode, finishNode];\n                } else if (messageTwo.data[0][0] === false) {\n                  nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]];\n                } else if (messageTwo.data[1][0] === false) {\n                  console.log(messageTwo.data[1][0]);\n                  nodesInShortestPathOrder = [...messageTwo.data[0], finishNode];\n                } else {\n                  nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]];\n                }\n\n                this.animatebfs(message.data[0], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animatebfs, message.data[0].length * this.state.animationSpeed, message.data[1], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n        this.breadthFirstSearchWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data;\n            this.animatebfs(message.data, nodesInShortestPathOrder, message.data.length, this.state.animationSpeed, false);\n          });\n        });\n      }\n    };\n\n    this.animategbfs = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed, isThereStop) {\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'; //progress tracker\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizegbfs = () => {\n      this.greedyBestFirstSearchWorker = new WebWorker(greedyBestFirstSearchWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.greedyBestFirstSearchWorker.addEventListener('message', message => {\n          console.log(message.data);\n\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                var nodesInShortestPathOrder;\n\n                if (messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                  nodesInShortestPathOrder = [startNode, stopNode, finishNode];\n                } else if (messageTwo.data[0][0] === false) {\n                  nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]];\n                } else if (messageTwo.data[1][0] === false) {\n                  console.log(messageTwo.data[1][0]);\n                  nodesInShortestPathOrder = [...messageTwo.data[0], finishNode];\n                } else {\n                  nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]];\n                }\n\n                this.animategbfs(message.data[0], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animategbfs, message.data[0].length * this.state.animationSpeed, message.data[1], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n      } else if (!this.state.isThereStop) {\n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n        this.greedyBestFirstSearchWorker.addEventListener('message', message => {\n          console.log(message.data);\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            console.log(messageTwo.data);\n            var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data;\n            this.animategbfs(message.data, nodesInShortestPathOrder, message.data.length, this.state.animationSpeed, this.state.isThereStop, false);\n          });\n        });\n      }\n    };\n\n    this.animatedfs = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed, isThereStop) {\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'; //progress tracker\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizedfs = () => {\n      this.depthFirstSearchWorker = new WebWorker(depthFirstSearchWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        var nodesInShortestPathOrder = [];\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.depthFirstSearchWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              console.log([...message.data[0], ...message.data[1]]);\n\n              const animateTime = (message, messageTwo) => {\n                var nodesInShortestPathOrder;\n\n                if (messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                  nodesInShortestPathOrder = [startNode, stopNode, finishNode];\n                } else if (messageTwo.data[0][0] === false) {\n                  nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]];\n                } else if (messageTwo.data[1][0] === false) {\n                  console.log(messageTwo.data[1][0]);\n                  nodesInShortestPathOrder = [...messageTwo.data[0], finishNode];\n                } else {\n                  nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]];\n                }\n\n                this.animatedfs(message.data[0], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animatedfs, message.data[0].length * this.state.animationSpeed, message.data[1], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n        this.depthFirstSearchWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data;\n            this.animatedfs(message.data, nodesInShortestPathOrder, message.data.length, this.state.animationSpeed, this.state.isThereStop, false);\n          });\n        });\n      }\n    };\n\n    this.animateBidirectionalAlgorithm = function (visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath, animationSpeed, animationStall) {\n      let isSecondAnimation = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n\n      _this.setState({\n        visualizingAlgorithm: true\n      });\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'; //progress tracker\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n\n      var integralVal = _this.handleProgressSetup(_this.state.isThereStop, false, animationSpeed, visitedNodesInOrderStart.length);\n\n      let len = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n\n        if (i === visitedNodesInOrderStart.length) {\n          if (isSecondAnimation && _this.state.isThereStop) return;\n          setTimeout(() => {\n            if (isShortedPath) {\n              _this.animateShortestPath(nodesInShortestPathOrder);\n            } else {\n              _this.setState({\n                visualizingAlgorithm: false\n              });\n            }\n          }, animationStall * animationSpeed);\n          return;\n        }\n\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined) {\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n          }\n\n          if (nodeB !== undefined) {\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n          }\n\n          progress.width(`+=${integralVal * 2}%`);\n        }, i * animationSpeed);\n      }\n    };\n\n    this.visualizeBidirectionalGreedySearch = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      this.bidirectionalGreedySearchWorker = new WebWorker(bidirectionalGreedySearchWorker);\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const _stopNode = this.state.prevStop;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[_stopNode[0]][_stopNode[1]] : false;\n\n      if (this.state.isThereStop) {\n        this.bidirectionalGreedySearchWorker.postMessage([grid, startNode, finishNode, stopNode, true]);\n        this.bidirectionalGreedySearchWorker.addEventListener('message', message => {\n          console.log(message.data);\n          const visitedNodesInOrderStart = message.data[0][0];\n          const visitedNodesInOrderStopFirst = message.data[0][1];\n          const isShortedPath = message.data[0][2];\n          const visitedNodesInOrderStopSecond = message.data[1][0];\n          const visitedNodesInOrderFinish = message.data[1][1];\n          const isShortedPathSecond = message.data[1][2];\n          if (visitedNodesInOrderStopFirst[visitedNodesInOrderStopFirst.length - 1] !== stopNode) visitedNodesInOrderStopFirst.push(stopNode);\n          const animationStall = visitedNodesInOrderStart.length + visitedNodesInOrderStopFirst.length + visitedNodesInOrderStopSecond.length + visitedNodesInOrderFinish.length;\n          const nodesInShortestPathOrderFirst = getNodesInShortestPathOrderBidirectionalGreedySearch(visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1], visitedNodesInOrderStopFirst[visitedNodesInOrderStopFirst.length - 1], false);\n          const nodesInShortestPathOrderSecond = getNodesInShortestPathOrderBidirectionalGreedySearch(visitedNodesInOrderStopSecond[visitedNodesInOrderStopSecond.length - 1], visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1], true);\n          const nodesInShortestPathOrder = [...nodesInShortestPathOrderFirst, ...nodesInShortestPathOrderSecond];\n          setTimeout(() => {\n            this.animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderStopFirst, nodesInShortestPathOrder, isShortedPath, this.state.animationSpeed, animationStall, false);\n          }, this.state.animationSpeed);\n          setTimeout(() => {\n            this.animateBidirectionalAlgorithm(visitedNodesInOrderStopSecond, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPathSecond, this.state.animationSpeed, animationStall, true);\n          }, this.state.animationSpeed * (visitedNodesInOrderStart.length + visitedNodesInOrderStopFirst.length));\n        });\n      } else if (!this.state.isThereStop) {\n        this.bidirectionalGreedySearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.bidirectionalGreedySearchWorker.addEventListener('message', message => {\n          const visitedNodesInOrderStart = message.data[0];\n          const visitedNodesInOrderFinish = message.data[1];\n          if (!visitedNodesInOrderFinish[0].isFinish) visitedNodesInOrderFinish.unshift(finishNode);\n          const isShortedPath = message.data[2];\n          const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1], visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]);\n          setTimeout(() => {\n            this.animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath, this.state.animationSpeed);\n          }, this.state.animationSpeed);\n        });\n      }\n    };\n\n    this.animateShortestPath = nodesInShortestPathOrder => {\n      const startNode = this.state.grid[this.state.startNode[0]][this.state.startNode[1]];\n      const finishNode = this.state.grid[this.state.finishNode[0]][this.state.finishNode[1]];\n      const stopNode = this.state.isThereStop ? this.state.grid[this.state.prevStop[0]][this.state.prevStop[1]] : [];\n      const stall = nodesInShortestPathOrder.length * 50 + 2;\n      setTimeout(() => {\n        this.setState({\n          visualizingAlgorithm: false\n        });\n      }, stall);\n\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          var currObj = document.getElementById(`node-${node.row}-${node.col}`);\n\n          if (node.row === startNode.row && node.col === startNode.col) {\n            currObj.className = 'node node-shortest-path node-shortest-path-start node-no-gap-vert';\n          } else if (node.row === finishNode.row && node.col === finishNode.col) {\n            currObj.className = 'node node-shortest-path node-shortest-path-finish';\n          } else if (this.state.isThereStop && node.row === stopNode.row && node.col === stopNode.col) {\n            currObj.className = 'node node-shortest-path node-shortest-path-stop';\n          } else if (document.getElementById(`node-${node.row}-${node.col}`).className.includes('node-shortest-path')) {\n            $(`#node-${node.row}-${node.col}`).replaceWith($(`#node-${node.row}-${node.col}`).clone(true));\n          } else {\n            currObj.className = 'node node-shortest-path';\n          }\n        }, 50 * i);\n      }\n    };\n\n    this.animateMaze = walls => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.setState({\n              generatingMaze: false\n            });\n          }, i * 10);\n          return;\n        }\n\n        setTimeout(() => {\n          let wall = walls[i];\n          let node = this.state.grid[wall[0]][wall[1]];\n          node.isWall = true;\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    this.getNewGridWithMaze = walls => {\n      let grid = this.state.grid;\n      let newGrid = grid.slice();\n\n      for (let wall of walls) {\n        let node = grid[wall[0]][wall[1]];\n        let newNode = { ...node,\n          isWall: true\n        };\n        newGrid[wall[0]][wall[1]] = newNode;\n      }\n\n      this.setState({\n        grid: newGrid,\n        generatingMaze: false\n      });\n      return;\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      showNav: false,\n      currItemDesc: 'Start',\n      currItemObj: itemData[0],\n      currAlgObj: algData[0],\n      currAlgTab: 0,\n      lcurrMazeAlg: 'Recursive Division Maze',\n      rowNum: 24,\n      colNum: 49,\n      currMazeTab: 0,\n      startNode: [9, 1],\n      finishNode: [9, 47],\n      startIsMoving: false,\n      finishIsMoving: false,\n      isThereStop: false,\n      stopIsMoving: false,\n      prevStop: [],\n      generatingMaze: false,\n      visualizingAlgorithm: false,\n      animationSpeed: 20,\n      gridClean: true,\n      maze: false\n    };\n  } //reminder!!\n  // row is width\n  // col is height\n\n\n  componentDidMount() {\n    const grid = renderGrid(this.state, this.state.rowNum, this.state.colNum);\n    this.setState({\n      grid: grid\n    });\n  }\n\n  generateRandomMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false;\n      const walls = this.state.isThereStop ? randomMaze(grid, startNode, finishNode, true, stopNode) : randomMaze(grid, startNode, finishNode, false);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateRecursiveDivisionMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false;\n      const walls = this.state.isThereStop ? recursiveDivisionMaze(grid, startNode, finishNode, true, stopNode) : recursiveDivisionMaze(grid, startNode, finishNode, false, stopNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateVerticalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false;\n      const walls = this.state.isThereStop ? verticalMaze(grid, startNode, finishNode, true, stopNode) : verticalMaze(grid, startNode, finishNode, false);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateHorizontalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false;\n      const walls = this.state.isThereStop ? horizontalMaze(grid, startNode, finishNode, true, stopNode) : horizontalMaze(grid, startNode, finishNode, false);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-info-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-text-container\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"grid-text\",\n            children: [\"Current-algorithim: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"grid-alg-text\",\n              children: this.state.currAlgObj.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1310,\n              columnNumber: 66\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1310,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1309,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress progress-no-stop\",\n            id: \"progressBar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1313,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1312,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1308,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NavTop, {\n        state: this.state,\n        clearGrid: this.clearGrid,\n        resetGrid: this.resetGrid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1316,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-container\",\n        children: /*#__PURE__*/_jsxDEV(Visualizer, {\n          state: this.state,\n          handleMouseDown: this.handleMouseDown,\n          handleMouseEnter: this.handleMouseEnter,\n          handleMouseUp: this.handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1318,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1317,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        state: this.state,\n        toggleNav: this.handleNav,\n        handleSpeedChange: this.handleSpeedChange,\n        handleMazeTabs: this.handleMazeTabs,\n        genMaze: this.generateMaze,\n        play: this.playAnimation,\n        handleTabs: this.handleTabs,\n        handleItemChange: this.handleItemDescChange,\n        visualizeDijkstra: this.visualizeDijkstra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1325,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1307,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n  const grid = [];\n  var rowNum = _rowNum;\n  var colNum = _colNum;\n\n  for (let row = 0; row < rowNum; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < colNum; col++) {\n      var node = createNode(col, row, state);\n      node.className = 'node';\n      currentRow.push(node);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row, state) => {\n  const startNode = state.startNode;\n  const finishNode = state.finishNode;\n  const stopNode = state.prevStop;\n  return {\n    col,\n    row,\n    isStart: row === startNode[0] && col === startNode[1],\n    isFinish: row === finishNode[0] && col === finishNode[1],\n    isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : false,\n    isWall: false,\n    previousNode: null,\n    previousNodeSecond: null,\n    isVisited: false,\n    isVisitedSecond: false,\n    distance: Infinity,\n    distanceSecond: Infinity\n  };\n};\n\nconst getNewGridWithStart = (grid, row, col, prevStart) => {\n  const newGrid = grid.slice();\n  const newStart = newGrid[row][col];\n  const oldStart = newGrid[prevStart[0]][prevStart[1]];\n  const oldNode = { ...oldStart,\n    isStart: !oldStart.isStart\n  };\n  const newNode = { ...newStart,\n    isStart: !newStart.isStart,\n    isWall: false\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStart[0]][prevStart[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinish = (grid, row, col, prevFinish) => {\n  const newGrid = grid.slice();\n  const newFinish = newGrid[row][col];\n  const oldFinish = newGrid[prevFinish[0]][prevFinish[1]];\n  const oldNode = { ...oldFinish,\n    isFinish: !oldFinish.isFinish\n  };\n  const newNode = { ...newFinish,\n    isFinish: !newFinish.isFinish,\n    isWall: false\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevFinish[0]][prevFinish[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n  const newGrid = grid.slice();\n  const newStop = newGrid[row][col];\n\n  if (prevStop.length === 0) {\n    const newNode = { ...newStop,\n      isStop: !newStop.isStop,\n      isWall: false\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  const oldStop = newGrid[prevStop[0]][prevStop[1]];\n  const oldNode = { ...oldStop,\n    isStop: !oldStop.isStop\n  };\n  const newNode = { ...newStop,\n    isStop: !newStop.isStop,\n    isWall: false\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStop[0]][prevStop[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = { ...node,\n      isWall: true\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n\n  return newGrid;\n};\n\nconst getVisitedNodesInOrder = (visitedNodesInOrderStart, visitedNodesInOrderFinish) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n\n  return visitedNodesInOrder;\n};\n\nconst getGridWithoutPath = function (grid) {\n  let minorReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let newGrid = grid.slice();\n\n  for (let row of grid) {\n    for (let node of row) {\n      var wall = false;\n      var stop = false;\n\n      if (minorReset) {\n        if (grid[node.row][node.col].isWall) wall = true;\n        if (grid[node.row][node.col].isStop) stop = true;\n      }\n\n      let newNode = { ...node,\n        distance: Infinity,\n        distanceSecond: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isVisitedSecond: false,\n        isShortest: false,\n        previousNode: null,\n        isWall: wall,\n        isWeight: false,\n        isStop: stop\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n\n  return newGrid;\n};\n\nfunction getNodesInShortestPathOrderBidirectionalGreedySearch(nodeA, nodeB) {\n  let second = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let nodesInShortestPathOrder = [];\n  let currentNode = nodeB;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.push(currentNode);\n\n    if (second) {\n      currentNode = currentNode.previousNodeSecond;\n    } else {\n      currentNode = currentNode.previousNode;\n    }\n  }\n\n  currentNode = nodeA;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n\n    if (second) {\n      currentNode = currentNode.previousNodeSecond;\n    } else {\n      currentNode = currentNode.previousNode;\n    }\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["React","Component","useState","useEffect","$","Visualizer","randomMaze","verticalMaze","horizontalMaze","recursiveDivisionMaze","Navbar","NavTop","itemData","algData","pathGrabWorker","_dijkstraWorker","aStarWorker","greedyBestFirstSearchWorker","breadthFirstSearchWorker","depthFirstSearchWorker","bidirectionalGreedySearchWorker","WebWorker","Message","MainContainer","constructor","props","handleMouseDown","row","col","newGrid","state","grid","node","visualizingAlgorithm","generatingMaze","isStart","setState","startIsMoving","isFinish","finishIsMoving","console","log","currItemDesc","stopIsMoving","isThereStop","isStop","getNewGridWithWallToggled","mouseIsPressed","handleMouseEnter","nodeEl","document","getElementById","getNewGridWithStart","startNode","getNewGridWithFinish","finishNode","getNewGridWithStopToggled","prevStop","handleMouseUp","handleNav","showNav","handleItemDescChange","e","item","newItem","map","_item","id","currItemObj","handleTabs","val","currAlgTab","currAlgObj","handleMazeTabs","currMazeTab","handleSpeedChange","currSpeed","animationSpeed","generateMaze","gridClean","maze","currAlg","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","generateRandomMaze","resetGrid","getElementsByClassName","style","width","rowNum","colNum","stopNode","className","isWall","getGridWithoutPath","clearGrid","playAnimation","visualizeDijkstra","visualizeaStar","visualizbfs","visualizegbfs","visualizedfs","visualizeBidirectionalGreedySearch","handleProgressSetup","isSecondAnimation","animationDuration","progressBar","addEventListener","classList","remove","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","animationStall","animationColor","progress","integralVal","length","i","setTimeout","animateShortestPath","dijkstraWorker","START_NODE","FINISH_NODE","STOP_NODE","postMessage","message","animateTiming","data","messageTwo","animateTime","animateaStar","replaceWith","clone","animatebfs","animategbfs","animatedfs","animateBidirectionalAlgorithm","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","len","Math","max","nodeA","nodeB","undefined","_startNode","_finishNode","_stopNode","visitedNodesInOrderStopFirst","visitedNodesInOrderStopSecond","isShortedPathSecond","push","nodesInShortestPathOrderFirst","getNodesInShortestPathOrderBidirectionalGreedySearch","nodesInShortestPathOrderSecond","unshift","stall","currObj","includes","animateMaze","walls","wall","getNewGridWithMaze","slice","newNode","lcurrMazeAlg","componentDidMount","renderGrid","render","name","_rowNum","_colNum","currentRow","createNode","previousNode","previousNodeSecond","isVisited","isVisitedSecond","distance","Infinity","distanceSecond","prevStart","newStart","oldStart","oldNode","prevFinish","newFinish","oldFinish","newStop","oldStop","getVisitedNodesInOrder","n","minorReset","stop","totalDistance","isShortest","isWeight","second","currentNode"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"sourcesContent":["import React, {Component, useState, useEffect} from 'react';\nimport $ from 'jquery' \nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport Navbar from './navComponents/Navbar';\nimport NavTop from './navComponents/topNav';\nimport itemData from '../data/item-data'\nimport algData from '../data/alg-data'\nimport pathGrabWorker from '../workers/pathGrabWorker';\nimport _dijkstraWorker from \"../workers/dijkstraWorker\";\nimport aStarWorker from '../workers/aStarWorker'\nimport greedyBestFirstSearchWorker from '../workers/greedyBestFirstSearchWorker';\nimport breadthFirstSearchWorker from '../workers/breadthFirstSearchWorker';\nimport depthFirstSearchWorker from '../workers/depthFirstSearchWorker';\nimport bidirectionalGreedySearchWorker from '../workers/bidirectionalGreedySearchWorker';\nimport WebWorker from \"../workers/workerSetup\";\nimport './mainContainer.css'\nimport { Message } from '@material-ui/icons';\n\nexport default class MainContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start',\n            currItemObj: itemData[0],\n            currAlgObj: algData[0],\n            currAlgTab: 0,\n            lcurrMazeAlg: 'Recursive Division Maze',\n            rowNum: 24,\n            colNum: 49,\n            currMazeTab: 0,\n            startNode: [9, 1],\n            finishNode: [9, 47],\n            startIsMoving: false,\n            finishIsMoving: false,\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            generatingMaze: false,\n            visualizingAlgorithm: false,\n            animationSpeed: 20,\n            gridClean: true,\n            maze: false\n        }\n    }\n    //reminder!!\n    // row is width\n    // col is height\n    componentDidMount() {\n      const grid = renderGrid(this.state, this.state.rowNum, this.state.colNum)\n      this.setState({grid: grid});\n    }\n\n    handleMouseDown = (row, col) => {\n\n        var newGrid = this.state.grid\n        var node = newGrid[row][col]\n\n        if(this.state.visualizingAlgorithm || this.state.generatingMaze) return\n\n        if(this.state.grid[row][col].isStart){\n          this.setState({startIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.grid[row][col].isFinish){\n          this.setState({finishIsMoving: true})\n          newGrid = this.state.grid\n          console.log(newGrid[row][col])\n        } else if(this.state.currItemDesc === 'Stop'){\n          this.setState({stopIsMoving: true, isThereStop: true})\n        } else if(this.state.currItemDesc === 'Wall' && (!node.isStart && !node.isFinish && !node.isStop)) {\n          newGrid = getNewGridWithWallToggled( newGrid, row, col)   \n        }\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter = (row, col) => {\n\n        if (!this.state.mouseIsPressed) return;\n\n        var newGrid = this.state.grid;\n        var node = newGrid[row][col]\n        var nodeEl = document.getElementById(`node-${node.row}-${node.col}`)\n\n        if( node.isStart || node.isStop || node.isFinish || this.state.visualizingAlgorithm || this.state.generatingMaze) return\n\n        if(this.state.startIsMoving){\n          newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode)\n          this.setState({startNode: [row, col]})\n        } else if(this.state.finishIsMoving){\n          newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode)\n          this.setState({finishNode: [row, col]})\n        } else if(this.state.currItemDesc === 'Stop'){\n          newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n          this.setState({prevStop: [row, col]})\n        } else if(this.state.currItemDesc === 'Wall' && (!node.isStart && !node.isFinish && !node.isStop)) {\n          newGrid = getNewGridWithWallToggled( newGrid, row, col);\n        }\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp = (row, col) => {\n        this.setState({mouseIsPressed: false, startIsMoving: false, finishIsMoving: false});\n    }\n\n    handleNav = () => {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    //navBar functions\n    handleItemDescChange = (e, item) => {\n      var newItem = `${item}`\n      itemData.map((_item) => {\n        if(item === _item.id){this.setState({currItemDesc: newItem, currItemObj: _item})}\n      })\n    }\n\n    handleTabs = (e, val) => {\n      this.setState({currAlgTab: val, currAlgObj: algData[val]})\n    }\n\n    handleMazeTabs = (e, val) => {\n      this.setState({currMazeTab: val})\n      console.log(val)\n    }\n\n    handleSpeedChange = (e, val) => {\n      var currSpeed = this.state.animationSpeed\n\n      if(val && currSpeed > 5){\n        this.setState({animationSpeed: currSpeed-5})\n      } if(!val && currSpeed < 35){\n        this.setState({animationSpeed: currSpeed+5})\n      }\n    }\n\n    generateMaze = (e) => {\n\n      if(this.state.generatingMaze || this.state.visualizingAlgorithm || !this.state.gridClean || this.state.maze) return\n\n      this.setState({maze: true})\n\n      var currAlg = this.state.currMazeTab\n \n      if(currAlg===0){\n        this.generateRecursiveDivisionMaze()\n      } else if(currAlg===1){\n        this.generateVerticalMaze()\n      } else if(currAlg===2){\n        this.generateHorizontalMaze()\n      } else if(currAlg===3){\n        this.generateRandomMaze()\n      }\n    }\n\n    resetGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      document.getElementsByClassName('progress')[0].style.width = '0%'\n\n      var rowNum = this.state.rowNum\n      var colNum = this.state.colNum\n\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const stopNode = this.state.isThereStop ? this.state.prevStop : false\n\n      for (let row = 0; row < rowNum; row++) {\n        for (let col = 0; col < colNum; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else if(stopNode !== false && (row === stopNode[0] && col === stopNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-stop\";\n          } else if(grid[row][col].isWall)\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-wall\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid, true);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n        gridClean: true,\n        maze: false\n      });\n    }\n\n    clearGrid = () => {\n\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      document.getElementsByClassName('progress')[0].style.width = '0%'\n      \n      var rowNum = this.state.rowNum\n      var colNum = this.state.colNum\n\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n\n      for (let row = 0; row < rowNum; row++) {\n        for (let col = 0; col < colNum; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n        prevStop: [],\n        isThereStop: false  ,\n        gridClean: true,\n        maze: false\n      });\n    }\n\n    // play animation\n\n    playAnimation = (e) => {\n\n      if(this.state.generatingMaze || this.state.visualizingAlgorithm || !this.state.gridClean) return\n\n      var currAlg = this.state.currAlgObj.id\n      this.setState({\n        gridClean: false,\n        visualizingAlgorithm: true\n      })\n      if(currAlg===0){\n        this.visualizeDijkstra()\n      } else if(currAlg===1){\n        this.visualizeaStar()\n      } else if(currAlg===4){\n        this.visualizbfs()\n      } else if(currAlg===2){\n        this.visualizegbfs()\n      } else if(currAlg===5){\n        this.visualizedfs()\n      } else if(currAlg===3){\n        this.visualizeBidirectionalGreedySearch()\n      }\n      return\n    }\n\n    handleProgressSetup = (\n      isThereStop, \n      isSecondAnimation, \n      animationSpeed,\n      animationDuration,\n    ) => {\n\n      const progressBar = document.getElementById(`progressBar`)\n      progressBar.className = 'progress progress-no-stop'\n      \n      if(!isThereStop) {\n\n        progressBar.className = 'progress progress-no-stop-anime'\n        progressBar.style.animationDuration = `${(animationDuration*animationSpeed/1000)}s`\n        progressBar.addEventListener('animationend', () => {\n          progressBar.classList.remove('progress-no-stop-anime')\n          progressBar.className = 'progress progress-no-stop'\n        })\n        return 100/animationDuration\n\n      } else if(!isSecondAnimation && isThereStop) {\n\n        progressBar.className = 'progress progress-no-stop-anime'\n        progressBar.style.animationDuration = `${(animationDuration*animationSpeed/1000)}s`\n        progressBar.addEventListener('animationend', () => {\n          progressBar.classList.remove('progress-no-stop-anime')\n          progressBar.className = 'progress progress-no-stop'\n        })\n        return 50/animationDuration\n\n      } else if(isSecondAnimation && isThereStop) {\n\n        progressBar.className = 'progress progress-stop-anime'\n        progressBar.style.animationDuration = `${(animationDuration*animationSpeed/1000)}s`\n        progressBar.addEventListener('animationend', () => {\n          progressBar.classList.remove('progress-stop-anime')\n          progressBar.className = 'progress progress-stop'\n        })\n        return 50/animationDuration\n\n      }\n    }\n\n    //animte dijkstra\n\n    animateDijkstra = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder, \n      animationStall,\n      animationSpeed=10, \n      isThereStop=false,\n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      //progressTracker\n      const progress = $(\"#progressBar\")\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n        }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n            progress.width(`+=${integralVal}%`)\n          }, animationSpeed * i);\n      }\n    }\n    \n    visualizeDijkstra = () => {\n\n      this.dijkstraWorker = new WebWorker(_dijkstraWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.dijkstraWorker.addEventListener('message', (message) => {\n            \n            const animateTiming = async (message) => {\n\n                this.pathGrabWorker.postMessage([message.data, true])\n\n                this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                    const animateTime = (message, messageTwo) => {\n\n                      var nodesInShortestPathOrder;\n\n                      if(messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                        nodesInShortestPathOrder = [startNode, stopNode, finishNode]\n                      } else if(messageTwo.data[0][0] === false) {\n                        nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]]\n                      } else if(messageTwo.data[1][0] === false) {\n                        console.log(messageTwo.data[1][0])\n                        nodesInShortestPathOrder = [...messageTwo.data[0], finishNode]\n                      } else {\n                        nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]]\n                      }\n\n                      this.animateDijkstra(\n                        message.data[0], \n                        nodesInShortestPathOrder, \n                        (message.data[0].length+message.data[1].length), \n                        this.state.animationSpeed, \n                        this.state.isThereStop,\n                        false\n                      )\n\n                      setTimeout(this.animateDijkstra, \n                        message.data[0].length * this.state.animationSpeed, \n                        message.data[1], \n                        nodesInShortestPathOrder,\n                        (message.data[0].length+message.data[1].length), \n                        this.state.animationSpeed, \n                        this.state.isThereStop, \n                        true\n                      )\n                    }\n\n                    animateTime(message, messageTwo)\n                })\n            }\n            animateTiming(message)\n        })\n\n        return\n\n      } else if(!this.state.isThereStop){\n\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.dijkstraWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data\n\n              this.animateDijkstra(\n                message.data, \n                nodesInShortestPathOrder, \n                message.data.length, \n                this.state.animationSpeed, \n                this.state.isThereStop\n              )\n\n            })\n        })\n      }\n    }\n\n    //animate aStar\n\n    animateaStar = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder,\n      animationStall, \n      animationSpeed,\n      isThereStop, \n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n        }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n            progress.width(`+=${integralVal}%`)\n          }, animationSpeed * i);\n      }\n    }\n\n    visualizeaStar = () => {\n\n      this.aStarWorker = new WebWorker(aStarWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      if(this.state.isThereStop) {\n        this.aStarWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.aStarWorker.addEventListener('message', (message) => {\n            \n          const animateTiming = async (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, true])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                const animateTime = (message, messageTwo) => {\n\n                  var nodesInShortestPathOrder;\n\n                  if(messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                    nodesInShortestPathOrder = [startNode, stopNode, finishNode]\n                  } else if(messageTwo.data[0][0] === false) {\n                    nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]]\n                  } else if(messageTwo.data[1][0] === false) {\n                    console.log(messageTwo.data[1][0])\n                    nodesInShortestPathOrder = [...messageTwo.data[0], finishNode]\n                  } else {\n                    nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]]\n                  }\n\n                  this.animateaStar(\n                    message.data[0], \n                    nodesInShortestPathOrder, \n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop,\n                    false\n                  )\n\n                  setTimeout(this.animateaStar, \n                    message.data[0].length * this.state.animationSpeed, \n                    message.data[1], \n                    nodesInShortestPathOrder,\n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop, \n                    true\n                  )\n                }\n\n                animateTime(message, messageTwo)\n            })\n        }\n        animateTiming(message)\n    })\n          return\n          \n      } else if(!this.state.isThereStop){\n\n          this.aStarWorker.postMessage([grid, startNode, finishNode, false])\n\n          this.aStarWorker.addEventListener('message', (message) => {\n\n              this.pathGrabWorker.postMessage([message.data, false])\n\n              this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data\n\n                this.animateaStar(\n                  message.data, \n                  nodesInShortestPathOrder, \n                  message.data.length,\n                  this.state.animationSpeed,\n                  this.state.isThereStop,\n                  false\n                )\n\n              })\n          })\n      }\n    }\n\n    //animate breadth first search \n\n    animatebfs = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder, \n      animationStall,\n      animationSpeed, \n      isThereStop,\n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n          \n          setTimeout(this.animateShortestPath, animationSpeed*animationStall, nodesInShortestPathOrder)\n\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n          progress.width(`+=${integralVal}%`)\n        }, animationSpeed * i);\n      }\n    }\n\n    visualizbfs = () => {\n      \n      this.breadthFirstSearchWorker = new WebWorker(breadthFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.breadthFirstSearchWorker.addEventListener('message', (message) => {\n                       \n            const animateTiming = async (message) => {\n\n              this.pathGrabWorker.postMessage([message.data, true])\n\n              this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                  const animateTime = (message, messageTwo) => {\n\n                    var nodesInShortestPathOrder;\n\n                    if(messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                      nodesInShortestPathOrder = [startNode, stopNode, finishNode]\n                    } else if(messageTwo.data[0][0] === false) {\n                      nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]]\n                    } else if(messageTwo.data[1][0] === false) {\n                      console.log(messageTwo.data[1][0])\n                      nodesInShortestPathOrder = [...messageTwo.data[0], finishNode]\n                    } else {\n                      nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]]\n                    }\n\n                    this.animatebfs(\n                      message.data[0], \n                      nodesInShortestPathOrder, \n                      (message.data[0].length+message.data[1].length), \n                      this.state.animationSpeed, \n                      this.state.isThereStop,\n                      false\n                    )\n\n                    setTimeout(this.animatebfs, \n                      message.data[0].length * this.state.animationSpeed, \n                      message.data[1], \n                      nodesInShortestPathOrder,\n                      (message.data[0].length+message.data[1].length), \n                      this.state.animationSpeed, \n                      this.state.isThereStop,\n                      true\n                    )\n                  }\n\n                  animateTime(message, messageTwo)\n              })\n            }\n          animateTiming(message)\n      })\n      return\n\n      } else if(!this.state.isThereStop){\n\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.breadthFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data\n\n              this.animatebfs(\n                message.data, \n                nodesInShortestPathOrder, \n                message.data.length, \n                this.state.animationSpeed, \n                false\n              )\n            })\n        })\n      }\n    }\n\n    // greedy best first search\n\n    animategbfs = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder,\n      animationStall, \n      animationSpeed, \n      isThereStop,\n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n          }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n            progress.width(`+=${integralVal}%`)\n          }, animationSpeed * i);\n      }\n    }\n\n    visualizegbfs = () => {\n      \n      this.greedyBestFirstSearchWorker = new WebWorker(greedyBestFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      if(this.state.isThereStop) {\n\n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.greedyBestFirstSearchWorker.addEventListener('message', (message) => {\n\n          console.log(message.data)\n            \n          const animateTiming = async (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, true])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                const animateTime = (message, messageTwo) => {\n\n                  var nodesInShortestPathOrder;\n\n                  if(messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                    nodesInShortestPathOrder = [startNode, stopNode, finishNode]\n                  } else if(messageTwo.data[0][0] === false) {\n                    nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]]\n                  } else if(messageTwo.data[1][0] === false) {\n                    console.log(messageTwo.data[1][0])\n                    nodesInShortestPathOrder = [...messageTwo.data[0], finishNode]\n                  } else {\n                    nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]]\n                  }\n\n                  this.animategbfs(\n                    message.data[0], \n                    nodesInShortestPathOrder, \n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop,\n                    false\n                  )\n\n                  setTimeout(this.animategbfs, \n                    message.data[0].length * this.state.animationSpeed, \n                    message.data[1], \n                    nodesInShortestPathOrder,\n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop, \n                    true\n                  )\n                }\n\n                animateTime(message, messageTwo)\n            })\n          }\n          animateTiming(message)\n      })\n      \n      } else if(!this.state.isThereStop) {\n        \n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.greedyBestFirstSearchWorker.addEventListener('message', (message) => {\n\n            console.log(message.data)\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              console.log(messageTwo.data)\n\n              var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data\n\n              this.animategbfs(\n                message.data, \n                nodesInShortestPathOrder,\n                message.data.length, \n                this.state.animationSpeed, \n                this.state.isThereStop,\n                false\n              )\n\n            })\n        })\n      }\n    }\n\n    // depth first search\n\n    animatedfs = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder, \n      animationStall, \n      animationSpeed, \n      isThereStop,\n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n          }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n            progress.width(`+=${integralVal}%`)\n          }, animationSpeed * i);\n      }\n    }\n\n    visualizedfs = () => {\n            \n      this.depthFirstSearchWorker = new WebWorker(depthFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      \n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.depthFirstSearchWorker.addEventListener('message', (message) => {\n            \n          const animateTiming = async (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, true])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              console.log([...message.data[0], ...message.data[1]])\n\n                const animateTime = (message, messageTwo) => {\n\n                  var nodesInShortestPathOrder;\n\n                  if(messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                    nodesInShortestPathOrder = [startNode, stopNode, finishNode]\n                  } else if(messageTwo.data[0][0] === false) {\n                    nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]]\n                  } else if(messageTwo.data[1][0] === false) {\n                    console.log(messageTwo.data[1][0])\n                    nodesInShortestPathOrder = [...messageTwo.data[0], finishNode]\n                  } else {\n                    nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]]\n                  }\n\n                  this.animatedfs(\n                    message.data[0], \n                    nodesInShortestPathOrder, \n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop,\n                    false\n                  )\n\n                  setTimeout(\n                    this.animatedfs, \n                    message.data[0].length * this.state.animationSpeed, \n                    message.data[1], \n                    nodesInShortestPathOrder,\n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop, \n                    true\n                  )\n                }\n\n                animateTime(message, messageTwo)\n            })\n          }\n          animateTiming(message)\n      })\n        return\n\n      } else if(!this.state.isThereStop){\n\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.depthFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data\n\n              this.animatedfs(\n                message.data, \n                nodesInShortestPathOrder,\n                message.data.length, \n                this.state.animationSpeed,\n                this.state.isThereStop, \n                false\n              )\n\n            })\n        })\n      }\n    }\n\n    // bidirectional greedy first search\n\n    animateBidirectionalAlgorithm = (\n      visitedNodesInOrderStart,\n      visitedNodesInOrderFinish,\n      nodesInShortestPathOrder,\n      isShortedPath,\n      animationSpeed,\n      animationStall,\n      isSecondAnimation=false\n    ) => {\n\n      this.setState({visualizingAlgorithm: true})\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        this.state.isThereStop,\n        false,\n        animationSpeed,\n        visitedNodesInOrderStart.length\n      )\n\n      let len = Math.max(\n        visitedNodesInOrderStart.length,\n        visitedNodesInOrderFinish.length\n      );\n\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n        if (i === visitedNodesInOrderStart.length) {\n\n          if(isSecondAnimation && this.state.isThereStop) return\n\n          setTimeout(() => {\n            if (isShortedPath) {\n              this.animateShortestPath(\n                nodesInShortestPathOrder\n              );\n            } else {\n              this.setState({ visualizingAlgorithm: false });\n            }\n          }, animationStall * animationSpeed);\n          return;\n        }\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined) {\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n          }\n          if (nodeB !== undefined) {\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = `node ${animationColor} node-gap-vert node-gap-horiz`;\n          }\n          progress.width(`+=${integralVal*2}%`)\n\n        }, i * animationSpeed);\n      }\n    }\n\n    visualizeBidirectionalGreedySearch = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      this.bidirectionalGreedySearchWorker = new WebWorker(bidirectionalGreedySearchWorker)\n\n      const { grid } = this.state;\n      const _startNode = this.state.startNode\n      const _finishNode = this.state.finishNode\n      const _stopNode = this.state.prevStop\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[_stopNode[0]][_stopNode[1]] : false\n\n      if(this.state.isThereStop) {\n\n        this.bidirectionalGreedySearchWorker.postMessage([grid, startNode, finishNode, stopNode, true])\n\n        this.bidirectionalGreedySearchWorker.addEventListener('message', (message) => {\n\n            console.log(message.data)\n\n            const visitedNodesInOrderStart = message.data[0][0];\n            const visitedNodesInOrderStopFirst = message.data[0][1];\n            const isShortedPath = message.data[0][2];\n\n            const visitedNodesInOrderStopSecond = message.data[1][0]\n            const visitedNodesInOrderFinish = message.data[1][1]\n            const isShortedPathSecond = message.data[1][2]\n\n            if(visitedNodesInOrderStopFirst[visitedNodesInOrderStopFirst.length - 1] !== stopNode) visitedNodesInOrderStopFirst.push(stopNode)\n\n            const animationStall = (visitedNodesInOrderStart.length+visitedNodesInOrderStopFirst.length+visitedNodesInOrderStopSecond.length+visitedNodesInOrderFinish.length)\n\n            const nodesInShortestPathOrderFirst = getNodesInShortestPathOrderBidirectionalGreedySearch(\n              visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n              visitedNodesInOrderStopFirst[visitedNodesInOrderStopFirst.length - 1],\n              false\n            )\n\n            const nodesInShortestPathOrderSecond = getNodesInShortestPathOrderBidirectionalGreedySearch(\n              visitedNodesInOrderStopSecond[visitedNodesInOrderStopSecond.length - 1],\n              visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1],\n              true\n            )\n\n            const nodesInShortestPathOrder = [...nodesInShortestPathOrderFirst, ...nodesInShortestPathOrderSecond]\n\n            setTimeout(() => {\n              this.animateBidirectionalAlgorithm(\n                visitedNodesInOrderStart,\n                visitedNodesInOrderStopFirst,\n                nodesInShortestPathOrder,\n                isShortedPath,\n                this.state.animationSpeed,\n                animationStall,\n                false\n              );\n            }, this.state.animationSpeed);\n\n            setTimeout(() => {\n              this.animateBidirectionalAlgorithm(\n                visitedNodesInOrderStopSecond,\n                visitedNodesInOrderFinish,\n                nodesInShortestPathOrder,\n                isShortedPathSecond,\n                this.state.animationSpeed,\n                animationStall,\n                true\n              );\n            }, this.state.animationSpeed*(visitedNodesInOrderStart.length+visitedNodesInOrderStopFirst.length))\n\n        })\n\n      } else if(!this.state.isThereStop) {\n\n        this.bidirectionalGreedySearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.bidirectionalGreedySearchWorker.addEventListener('message', (message) => {\n\n            const visitedNodesInOrderStart = message.data[0];\n            const visitedNodesInOrderFinish = message.data[1];\n            if(!visitedNodesInOrderFinish[0].isFinish) visitedNodesInOrderFinish.unshift(finishNode)\n  \n            const isShortedPath = message.data[2];\n            const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\n              visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n              visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n            )\n\n            setTimeout(() => {\n              this.animateBidirectionalAlgorithm(\n                visitedNodesInOrderStart,\n                visitedNodesInOrderFinish,\n                nodesInShortestPathOrder,\n                isShortedPath,\n                this.state.animationSpeed\n              );\n            }, this.state.animationSpeed);\n        })\n      }\n    }\n\n    //finish animations\n\n    animateShortestPath = (nodesInShortestPathOrder) => {\n\n      const startNode = this.state.grid[this.state.startNode[0]][this.state.startNode[1]]\n      const finishNode = this.state.grid[this.state.finishNode[0]][this.state.finishNode[1]]\n      const stopNode = this.state.isThereStop ? this.state.grid[this.state.prevStop[0]][this.state.prevStop[1]] : []\n      const stall = (nodesInShortestPathOrder.length*50)+2\n\n      setTimeout(() => {this.setState({visualizingAlgorithm: false})}, stall)\n\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n\n          var currObj = document.getElementById(`node-${node.row}-${node.col}`)\n\n          if(node.row === startNode.row && node.col === startNode.col) {\n            currObj.className = 'node node-shortest-path node-shortest-path-start node-no-gap-vert';\n          } else if(node.row === finishNode.row && node.col === finishNode.col){\n            currObj.className = 'node node-shortest-path node-shortest-path-finish';\n          } else if(this.state.isThereStop && (node.row === stopNode.row && node.col === stopNode.col)) {\n            currObj.className = 'node node-shortest-path node-shortest-path-stop';\n          } else if(document.getElementById(`node-${node.row}-${node.col}`).className.includes('node-shortest-path')) {\n            $(`#node-${node.row}-${node.col}`).replaceWith($(`#node-${node.row}-${node.col}`).clone(true))\n          } else {\n            currObj.className = 'node node-shortest-path';\n          }\n\n        }, 50 * i);\n      }\n    }\n\n    //generate mazes\n\n    animateMaze = (walls) => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {   \n          setTimeout(() => {\n            this.setState({ generatingMaze: false })\n          }, i * 10)      \n          return;\n        }\n        setTimeout(() => {\n\n          let wall = walls[i];\n          let node = this.state.grid[wall[0]][wall[1]];\n          node.isWall = true\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-wall\"\n\n        }, i * 10);\n      }\n    };\n\n    getNewGridWithMaze = (walls) => {\n      let grid = this.state.grid\n      let newGrid = grid.slice();\n      for (let wall of walls) {\n        let node = grid[wall[0]][wall[1]];\n        let newNode = {\n          ...node,\n          isWall: true,\n        };\n        newGrid[wall[0]][wall[1]] = newNode;\n      }\n      this.setState({ grid: newGrid, generatingMaze: false })\n      return\n    };\n\n    generateRandomMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false\n        const walls = this.state.isThereStop ? randomMaze(grid, startNode, finishNode, true, stopNode) : randomMaze(grid, startNode, finishNode, false);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateRecursiveDivisionMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false\n        const walls = this.state.isThereStop ? recursiveDivisionMaze(grid, startNode, finishNode, true, stopNode) : recursiveDivisionMaze(grid, startNode, finishNode, false, stopNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateVerticalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false\n        const walls = this.state.isThereStop ? verticalMaze(grid, startNode, finishNode, true, stopNode) : verticalMaze(grid, startNode, finishNode, false);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateHorizontalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false\n        const walls = this.state.isThereStop ? horizontalMaze(grid, startNode, finishNode, true, stopNode) : horizontalMaze(grid, startNode, finishNode, false);\n        this.animateMaze(walls);\n      }, 10);\n    }\n\n    render(){ \n\n        return(\n            <div className=\"main-container\">\n                <div className='grid-info-container'>\n                  <div className='grid-text-container'>\n                    <p className='grid-text'>Current-algorithim: <span className='grid-alg-text'>{this.state.currAlgObj.name}</span></p>\n                  </div>\n                  <div className=\"progress-bar-container\">\n                      <div className='progress progress-no-stop' id='progressBar'/>\n                  </div>\n                </div>\n                <NavTop state={this.state} clearGrid={this.clearGrid} resetGrid={this.resetGrid}/>\n                <div className=\"visualizer-container\">\n                    <Visualizer \n                        state={this.state} \n                        handleMouseDown={this.handleMouseDown} \n                        handleMouseEnter={this.handleMouseEnter} \n                        handleMouseUp={this.handleMouseUp}\n                    />\n                </div>\n                <Navbar state={this.state} toggleNav={this.handleNav} handleSpeedChange={this.handleSpeedChange} handleMazeTabs={this.handleMazeTabs} genMaze={this.generateMaze} play={this.playAnimation} handleTabs={this.handleTabs} handleItemChange={this.handleItemDescChange} visualizeDijkstra={this.visualizeDijkstra}/>\n            </div>\n        )\n    }\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n    const grid = [];\n    var rowNum = _rowNum\n    var colNum = _colNum\n    for (let row = 0; row < rowNum; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colNum; col++) {\n        var node = createNode(col, row, state)\n        node.className = 'node'\n        currentRow.push(node);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\n\n\nconst createNode = (col, row, state) => {\n    const startNode = state.startNode\n    const finishNode = state.finishNode\n    const stopNode = state.prevStop\n    return {\n      col,\n      row,\n      isStart: row === startNode[0] && col === startNode[1],\n      isFinish: row === finishNode[0] && col === finishNode[1],\n      isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : false,\n      isWall: false,\n      previousNode: null,\n      previousNodeSecond: null,\n      isVisited: false,\n      isVisitedSecond: false,\n      distance: Infinity,\n      distanceSecond: Infinity\n    };\n  };\n\n  const getNewGridWithStart = (grid, row, col, prevStart) => {\n\n    const newGrid = grid.slice();\n    const newStart = newGrid[row][col]\n    const oldStart = newGrid[prevStart[0]][prevStart[1]]\n    const oldNode = {\n      ...oldStart,\n      isStart: !oldStart.isStart\n    }\n    const newNode = {\n      ...newStart,\n      isStart: !newStart.isStart,\n      isWall: false\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStart[0]][prevStart[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithFinish = (grid, row, col, prevFinish) => {\n\n    const newGrid = grid.slice();\n    const newFinish = newGrid[row][col];\n    const oldFinish = newGrid[prevFinish[0]][prevFinish[1]]\n    const oldNode = {\n      ...oldFinish,\n      isFinish: !oldFinish.isFinish\n    }\n    const newNode = {\n      ...newFinish,\n      isFinish: !newFinish.isFinish,\n      isWall: false\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevFinish[0]][prevFinish[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n\n    const newGrid = grid.slice();\n    const newStop = newGrid[row][col];\n    if(prevStop.length === 0){\n      const newNode = {\n        ...newStop,\n        isStop: !newStop.isStop,\n        isWall: false\n      };\n      newGrid[row][col] = newNode;\n      return newGrid;\n    }\n    const oldStop = newGrid[prevStop[0]][prevStop[1]]\n    const oldNode = {\n      ...oldStop,\n      isStop: !oldStop.isStop\n    }\n    const newNode = {\n      ...newStop,\n      isStop: !newStop.isStop,\n      isWall: false\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStop[0]][prevStop[1]] = oldNode\n    return newGrid;\n  };\n\n  const getNewGridWithMaze = (grid, walls) => {\n    let newGrid = grid.slice();\n    for (let wall of walls) {\n      let node = grid[wall[0]][wall[1]];\n      let newNode = {\n        ...node,\n        isWall: true,\n      };\n      newGrid[wall[0]][wall[1]] = newNode;\n    }\n    return newGrid;\n  };\n\n  const getVisitedNodesInOrder = (\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish\n  ) => {\n    let visitedNodesInOrder = [];\n    let n = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 0; i < n; i++) {\n      if (visitedNodesInOrderStart[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n      }\n      if (visitedNodesInOrderFinish[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n      }\n    }\n    return visitedNodesInOrder;\n  };\n\n  const getGridWithoutPath = (grid, minorReset=false) => {\n    let newGrid = grid.slice();\n    for (let row of grid) {\n      for (let node of row) {\n        var wall = false\n        var stop = false\n        if(minorReset){\n          if(grid[node.row][node.col].isWall) wall = true\n\n          if(grid[node.row][node.col].isStop) stop = true\n        }\n        let newNode = {\n          ...node,\n          distance: Infinity,\n          distanceSecond: Infinity,\n          totalDistance: Infinity,\n          isVisited: false,\n          isVisitedSecond: false,\n          isShortest: false,\n          previousNode: null,\n          isWall: wall,\n          isWeight: false,\n          isStop: stop\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    return newGrid;\n  };\n\n  function getNodesInShortestPathOrderBidirectionalGreedySearch(\n    nodeA,\n    nodeB,\n    second=false\n  ) {\n    let nodesInShortestPathOrder = [];\n    let currentNode = nodeB;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.push(currentNode);\n      if(second){\n        currentNode = currentNode.previousNodeSecond;\n      } else {\n        currentNode = currentNode.previousNode;\n      }\n    }\n    currentNode = nodeA;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      if(second){\n        currentNode = currentNode.previousNodeSecond;\n      } else {\n        currentNode = currentNode.previousNode;\n      }\n    }\n    return nodesInShortestPathOrder;\n  }"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,SAApC,QAAoD,OAApD;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,cAAT,QAA+B,mCAA/B;AACA,SAASC,qBAAT,QAAsC,0CAAtC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,2BAAP,MAAwC,wCAAxC;AACA,OAAOC,wBAAP,MAAqC,qCAArC;AACA,OAAOC,sBAAP,MAAmC,mCAAnC;AACA,OAAOC,+BAAP,MAA4C,4CAA5C;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAO,qBAAP;AACA,SAASC,OAAT,QAAwB,oBAAxB;;AAEA,eAAe,MAAMC,aAAN,SAA4BtB,SAA5B,CAAqC;EAChDuB,WAAW,CAACC,KAAD,EAAO;IAAA;;IACd,MAAMA,KAAN,CADc;IAAA;;IAAA,KAoClBC,eApCkB,GAoCA,CAACC,GAAD,EAAMC,GAAN,KAAc;MAE5B,IAAIC,OAAO,GAAG,KAAKC,KAAL,CAAWC,IAAzB;MACA,IAAIC,IAAI,GAAGH,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAX;MAEA,IAAG,KAAKE,KAAL,CAAWG,oBAAX,IAAmC,KAAKH,KAAL,CAAWI,cAAjD,EAAiE;;MAEjE,IAAG,KAAKJ,KAAL,CAAWC,IAAX,CAAgBJ,GAAhB,EAAqBC,GAArB,EAA0BO,OAA7B,EAAqC;QACnC,KAAKC,QAAL,CAAc;UAACC,aAAa,EAAE;QAAhB,CAAd;QACAR,OAAO,GAAG,KAAKC,KAAL,CAAWC,IAArB;MACD,CAHD,MAGO,IAAG,KAAKD,KAAL,CAAWC,IAAX,CAAgBJ,GAAhB,EAAqBC,GAArB,EAA0BU,QAA7B,EAAsC;QAC3C,KAAKF,QAAL,CAAc;UAACG,cAAc,EAAE;QAAjB,CAAd;QACAV,OAAO,GAAG,KAAKC,KAAL,CAAWC,IAArB;QACAS,OAAO,CAACC,GAAR,CAAYZ,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAZ;MACD,CAJM,MAIA,IAAG,KAAKE,KAAL,CAAWY,YAAX,KAA4B,MAA/B,EAAsC;QAC3C,KAAKN,QAAL,CAAc;UAACO,YAAY,EAAE,IAAf;UAAqBC,WAAW,EAAE;QAAlC,CAAd;MACD,CAFM,MAEA,IAAG,KAAKd,KAAL,CAAWY,YAAX,KAA4B,MAA5B,IAAuC,CAACV,IAAI,CAACG,OAAN,IAAiB,CAACH,IAAI,CAACM,QAAvB,IAAmC,CAACN,IAAI,CAACa,MAAnF,EAA4F;QACjGhB,OAAO,GAAGiB,yBAAyB,CAAEjB,OAAF,EAAWF,GAAX,EAAgBC,GAAhB,CAAnC;MACD;;MACD,KAAKQ,QAAL,CAAc;QAACL,IAAI,EAAEF,OAAP;QAAgBkB,cAAc,EAAE;MAAhC,CAAd;IACH,CAxDiB;;IAAA,KA0DlBC,gBA1DkB,GA0DC,CAACrB,GAAD,EAAMC,GAAN,KAAc;MAE7B,IAAI,CAAC,KAAKE,KAAL,CAAWiB,cAAhB,EAAgC;MAEhC,IAAIlB,OAAO,GAAG,KAAKC,KAAL,CAAWC,IAAzB;MACA,IAAIC,IAAI,GAAGH,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAX;MACA,IAAIqB,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAyB,QAAOnB,IAAI,CAACL,GAAI,IAAGK,IAAI,CAACJ,GAAI,EAArD,CAAb;MAEA,IAAII,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACa,MAArB,IAA+Bb,IAAI,CAACM,QAApC,IAAgD,KAAKR,KAAL,CAAWG,oBAA3D,IAAmF,KAAKH,KAAL,CAAWI,cAAlG,EAAkH;;MAElH,IAAG,KAAKJ,KAAL,CAAWO,aAAd,EAA4B;QAC1BR,OAAO,GAAGuB,mBAAmB,CAAC,KAAKtB,KAAL,CAAWC,IAAZ,EAAkBJ,GAAlB,EAAuBC,GAAvB,EAA4B,KAAKE,KAAL,CAAWuB,SAAvC,CAA7B;QACA,KAAKjB,QAAL,CAAc;UAACiB,SAAS,EAAE,CAAC1B,GAAD,EAAMC,GAAN;QAAZ,CAAd;MACD,CAHD,MAGO,IAAG,KAAKE,KAAL,CAAWS,cAAd,EAA6B;QAClCV,OAAO,GAAGyB,oBAAoB,CAAC,KAAKxB,KAAL,CAAWC,IAAZ,EAAkBJ,GAAlB,EAAuBC,GAAvB,EAA4B,KAAKE,KAAL,CAAWyB,UAAvC,CAA9B;QACA,KAAKnB,QAAL,CAAc;UAACmB,UAAU,EAAE,CAAC5B,GAAD,EAAMC,GAAN;QAAb,CAAd;MACD,CAHM,MAGA,IAAG,KAAKE,KAAL,CAAWY,YAAX,KAA4B,MAA/B,EAAsC;QAC3Cb,OAAO,GAAG2B,yBAAyB,CAAC,KAAK1B,KAAL,CAAWC,IAAZ,EAAkBJ,GAAlB,EAAuBC,GAAvB,EAA4B,KAAKE,KAAL,CAAW2B,QAAvC,CAAnC;QACA,KAAKrB,QAAL,CAAc;UAACqB,QAAQ,EAAE,CAAC9B,GAAD,EAAMC,GAAN;QAAX,CAAd;MACD,CAHM,MAGA,IAAG,KAAKE,KAAL,CAAWY,YAAX,KAA4B,MAA5B,IAAuC,CAACV,IAAI,CAACG,OAAN,IAAiB,CAACH,IAAI,CAACM,QAAvB,IAAmC,CAACN,IAAI,CAACa,MAAnF,EAA4F;QACjGhB,OAAO,GAAGiB,yBAAyB,CAAEjB,OAAF,EAAWF,GAAX,EAAgBC,GAAhB,CAAnC;MACD;;MACD,KAAKQ,QAAL,CAAc;QAACL,IAAI,EAAEF;MAAP,CAAd;IACH,CAjFiB;;IAAA,KAmFlB6B,aAnFkB,GAmFF,CAAC/B,GAAD,EAAMC,GAAN,KAAc;MAC1B,KAAKQ,QAAL,CAAc;QAACW,cAAc,EAAE,KAAjB;QAAwBV,aAAa,EAAE,KAAvC;QAA8CE,cAAc,EAAE;MAA9D,CAAd;IACH,CArFiB;;IAAA,KAuFlBoB,SAvFkB,GAuFN,MAAM;MAChB,KAAKvB,QAAL,CAAc;QAACwB,OAAO,EAAE,CAAC,KAAK9B,KAAL,CAAW8B;MAAtB,CAAd;IACD,CAzFiB;;IAAA,KA4FlBC,oBA5FkB,GA4FK,CAACC,CAAD,EAAIC,IAAJ,KAAa;MAClC,IAAIC,OAAO,GAAI,GAAED,IAAK,EAAtB;MACAnD,QAAQ,CAACqD,GAAT,CAAcC,KAAD,IAAW;QACtB,IAAGH,IAAI,KAAKG,KAAK,CAACC,EAAlB,EAAqB;UAAC,KAAK/B,QAAL,CAAc;YAACM,YAAY,EAAEsB,OAAf;YAAwBI,WAAW,EAAEF;UAArC,CAAd;QAA2D;MAClF,CAFD;IAGD,CAjGiB;;IAAA,KAmGlBG,UAnGkB,GAmGL,CAACP,CAAD,EAAIQ,GAAJ,KAAY;MACvB,KAAKlC,QAAL,CAAc;QAACmC,UAAU,EAAED,GAAb;QAAkBE,UAAU,EAAE3D,OAAO,CAACyD,GAAD;MAArC,CAAd;IACD,CArGiB;;IAAA,KAuGlBG,cAvGkB,GAuGD,CAACX,CAAD,EAAIQ,GAAJ,KAAY;MAC3B,KAAKlC,QAAL,CAAc;QAACsC,WAAW,EAAEJ;MAAd,CAAd;MACA9B,OAAO,CAACC,GAAR,CAAY6B,GAAZ;IACD,CA1GiB;;IAAA,KA4GlBK,iBA5GkB,GA4GE,CAACb,CAAD,EAAIQ,GAAJ,KAAY;MAC9B,IAAIM,SAAS,GAAG,KAAK9C,KAAL,CAAW+C,cAA3B;;MAEA,IAAGP,GAAG,IAAIM,SAAS,GAAG,CAAtB,EAAwB;QACtB,KAAKxC,QAAL,CAAc;UAACyC,cAAc,EAAED,SAAS,GAAC;QAA3B,CAAd;MACD;;MAAC,IAAG,CAACN,GAAD,IAAQM,SAAS,GAAG,EAAvB,EAA0B;QAC1B,KAAKxC,QAAL,CAAc;UAACyC,cAAc,EAAED,SAAS,GAAC;QAA3B,CAAd;MACD;IACF,CApHiB;;IAAA,KAsHlBE,YAtHkB,GAsHFhB,CAAD,IAAO;MAEpB,IAAG,KAAKhC,KAAL,CAAWI,cAAX,IAA6B,KAAKJ,KAAL,CAAWG,oBAAxC,IAAgE,CAAC,KAAKH,KAAL,CAAWiD,SAA5E,IAAyF,KAAKjD,KAAL,CAAWkD,IAAvG,EAA6G;MAE7G,KAAK5C,QAAL,CAAc;QAAC4C,IAAI,EAAE;MAAP,CAAd;MAEA,IAAIC,OAAO,GAAG,KAAKnD,KAAL,CAAW4C,WAAzB;;MAEA,IAAGO,OAAO,KAAG,CAAb,EAAe;QACb,KAAKC,6BAAL;MACD,CAFD,MAEO,IAAGD,OAAO,KAAG,CAAb,EAAe;QACpB,KAAKE,oBAAL;MACD,CAFM,MAEA,IAAGF,OAAO,KAAG,CAAb,EAAe;QACpB,KAAKG,sBAAL;MACD,CAFM,MAEA,IAAGH,OAAO,KAAG,CAAb,EAAe;QACpB,KAAKI,kBAAL;MACD;IACF,CAvIiB;;IAAA,KAyIlBC,SAzIkB,GAyIN,MAAM;MAChB,IAAI,KAAKxD,KAAL,CAAWG,oBAAX,IAAmC,KAAKH,KAAL,CAAWI,cAAlD,EAAkE;QAChE;MACD;;MACDgB,QAAQ,CAACqC,sBAAT,CAAgC,UAAhC,EAA4C,CAA5C,EAA+CC,KAA/C,CAAqDC,KAArD,GAA6D,IAA7D;MAEA,IAAIC,MAAM,GAAG,KAAK5D,KAAL,CAAW4D,MAAxB;MACA,IAAIC,MAAM,GAAG,KAAK7D,KAAL,CAAW6D,MAAxB;MAEA,MAAM5D,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;MACA,MAAMsB,SAAS,GAAG,KAAKvB,KAAL,CAAWuB,SAA7B;MACA,MAAME,UAAU,GAAG,KAAKzB,KAAL,CAAWyB,UAA9B;MACA,MAAMqC,QAAQ,GAAG,KAAK9D,KAAL,CAAWc,WAAX,GAAyB,KAAKd,KAAL,CAAW2B,QAApC,GAA+C,KAAhE;;MAEA,KAAK,IAAI9B,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG+D,MAAxB,EAAgC/D,GAAG,EAAnC,EAAuC;QACrC,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG+D,MAAxB,EAAgC/D,GAAG,EAAnC,EAAuC;UACrC,IAAMD,GAAG,KAAK0B,SAAS,CAAC,CAAD,CAAjB,IAAwBzB,GAAG,KAAKyB,SAAS,CAAC,CAAD,CAA/C,EACA;YACEH,QAAQ,CAACC,cAAT,CAAyB,QAAOxB,GAAI,IAAGC,GAAI,EAA3C,EAA8CiE,SAA9C,GAA0D,iBAA1D;UACD,CAHD,MAGO,IAAIlE,GAAG,KAAK4B,UAAU,CAAC,CAAD,CAAlB,IAAyB3B,GAAG,KAAK2B,UAAU,CAAC,CAAD,CAA/C,EACP;YACEL,QAAQ,CAACC,cAAT,CAAyB,QAAOxB,GAAI,IAAGC,GAAI,EAA3C,EAA8CiE,SAA9C,GAA0D,kBAA1D;UACD,CAHM,MAGA,IAAGD,QAAQ,KAAK,KAAb,IAAuBjE,GAAG,KAAKiE,QAAQ,CAAC,CAAD,CAAhB,IAAuBhE,GAAG,KAAKgE,QAAQ,CAAC,CAAD,CAAjE,EACP;YACE1C,QAAQ,CAACC,cAAT,CAAyB,QAAOxB,GAAI,IAAGC,GAAI,EAA3C,EAA8CiE,SAA9C,GAA0D,gBAA1D;UACD,CAHM,MAGA,IAAG9D,IAAI,CAACJ,GAAD,CAAJ,CAAUC,GAAV,EAAekE,MAAlB,EACP;YACE5C,QAAQ,CAACC,cAAT,CAAyB,QAAOxB,GAAI,IAAGC,GAAI,EAA3C,EAA8CiE,SAA9C,GAA0D,gBAA1D;UACD,CAHM,MAGA;YACL3C,QAAQ,CAACC,cAAT,CAAyB,QAAOxB,GAAI,IAAGC,GAAI,EAA3C,EAA8CiE,SAA9C,GAA0D,MAA1D;UACD;QACF;MACF;;MACD,MAAMhE,OAAO,GAAGkE,kBAAkB,CAAC,KAAKjE,KAAL,CAAWC,IAAZ,EAAkB,IAAlB,CAAlC;MACA,KAAKK,QAAL,CAAc;QACZL,IAAI,EAAEF,OADM;QAEZI,oBAAoB,EAAE,KAFV;QAGZC,cAAc,EAAE,KAHJ;QAIZ6C,SAAS,EAAE,IAJC;QAKZC,IAAI,EAAE;MALM,CAAd;IAOD,CAlLiB;;IAAA,KAoLlBgB,SApLkB,GAoLN,MAAM;MAEhB,IAAI,KAAKlE,KAAL,CAAWG,oBAAX,IAAmC,KAAKH,KAAL,CAAWI,cAAlD,EAAkE;QAChE;MACD;;MACDgB,QAAQ,CAACqC,sBAAT,CAAgC,UAAhC,EAA4C,CAA5C,EAA+CC,KAA/C,CAAqDC,KAArD,GAA6D,IAA7D;MAEA,IAAIC,MAAM,GAAG,KAAK5D,KAAL,CAAW4D,MAAxB;MACA,IAAIC,MAAM,GAAG,KAAK7D,KAAL,CAAW6D,MAAxB;MAEA,MAAM5D,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;MACA,MAAMsB,SAAS,GAAG,KAAKvB,KAAL,CAAWuB,SAA7B;MACA,MAAME,UAAU,GAAG,KAAKzB,KAAL,CAAWyB,UAA9B;;MAEA,KAAK,IAAI5B,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG+D,MAAxB,EAAgC/D,GAAG,EAAnC,EAAuC;QACrC,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG+D,MAAxB,EAAgC/D,GAAG,EAAnC,EAAuC;UACrC,IAAMD,GAAG,KAAK0B,SAAS,CAAC,CAAD,CAAjB,IAAwBzB,GAAG,KAAKyB,SAAS,CAAC,CAAD,CAA/C,EACA;YACEH,QAAQ,CAACC,cAAT,CAAyB,QAAOxB,GAAI,IAAGC,GAAI,EAA3C,EAA8CiE,SAA9C,GAA0D,iBAA1D;UACD,CAHD,MAGO,IAAIlE,GAAG,KAAK4B,UAAU,CAAC,CAAD,CAAlB,IAAyB3B,GAAG,KAAK2B,UAAU,CAAC,CAAD,CAA/C,EACP;YACEL,QAAQ,CAACC,cAAT,CAAyB,QAAOxB,GAAI,IAAGC,GAAI,EAA3C,EAA8CiE,SAA9C,GAA0D,kBAA1D;UACD,CAHM,MAIP;YACE3C,QAAQ,CAACC,cAAT,CAAyB,QAAOxB,GAAI,IAAGC,GAAI,EAA3C,EAA8CiE,SAA9C,GAA0D,MAA1D;UACD;QACF;MACF;;MACD,MAAMhE,OAAO,GAAGkE,kBAAkB,CAAC,KAAKjE,KAAL,CAAWC,IAAZ,CAAlC;MACA,KAAKK,QAAL,CAAc;QACZL,IAAI,EAAEF,OADM;QAEZI,oBAAoB,EAAE,KAFV;QAGZC,cAAc,EAAE,KAHJ;QAIZuB,QAAQ,EAAE,EAJE;QAKZb,WAAW,EAAE,KALD;QAMZmC,SAAS,EAAE,IANC;QAOZC,IAAI,EAAE;MAPM,CAAd;IASD,CA1NiB;;IAAA,KA8NlBiB,aA9NkB,GA8NDnC,CAAD,IAAO;MAErB,IAAG,KAAKhC,KAAL,CAAWI,cAAX,IAA6B,KAAKJ,KAAL,CAAWG,oBAAxC,IAAgE,CAAC,KAAKH,KAAL,CAAWiD,SAA/E,EAA0F;MAE1F,IAAIE,OAAO,GAAG,KAAKnD,KAAL,CAAW0C,UAAX,CAAsBL,EAApC;MACA,KAAK/B,QAAL,CAAc;QACZ2C,SAAS,EAAE,KADC;QAEZ9C,oBAAoB,EAAE;MAFV,CAAd;;MAIA,IAAGgD,OAAO,KAAG,CAAb,EAAe;QACb,KAAKiB,iBAAL;MACD,CAFD,MAEO,IAAGjB,OAAO,KAAG,CAAb,EAAe;QACpB,KAAKkB,cAAL;MACD,CAFM,MAEA,IAAGlB,OAAO,KAAG,CAAb,EAAe;QACpB,KAAKmB,WAAL;MACD,CAFM,MAEA,IAAGnB,OAAO,KAAG,CAAb,EAAe;QACpB,KAAKoB,aAAL;MACD,CAFM,MAEA,IAAGpB,OAAO,KAAG,CAAb,EAAe;QACpB,KAAKqB,YAAL;MACD,CAFM,MAEA,IAAGrB,OAAO,KAAG,CAAb,EAAe;QACpB,KAAKsB,kCAAL;MACD;;MACD;IACD,CArPiB;;IAAA,KAuPlBC,mBAvPkB,GAuPI,CACpB5D,WADoB,EAEpB6D,iBAFoB,EAGpB5B,cAHoB,EAIpB6B,iBAJoB,KAKjB;MAEH,MAAMC,WAAW,GAAGzD,QAAQ,CAACC,cAAT,CAAyB,aAAzB,CAApB;MACAwD,WAAW,CAACd,SAAZ,GAAwB,2BAAxB;;MAEA,IAAG,CAACjD,WAAJ,EAAiB;QAEf+D,WAAW,CAACd,SAAZ,GAAwB,iCAAxB;QACAc,WAAW,CAACnB,KAAZ,CAAkBkB,iBAAlB,GAAuC,GAAGA,iBAAiB,GAAC7B,cAAlB,GAAiC,IAAM,GAAjF;QACA8B,WAAW,CAACC,gBAAZ,CAA6B,cAA7B,EAA6C,MAAM;UACjDD,WAAW,CAACE,SAAZ,CAAsBC,MAAtB,CAA6B,wBAA7B;UACAH,WAAW,CAACd,SAAZ,GAAwB,2BAAxB;QACD,CAHD;QAIA,OAAO,MAAIa,iBAAX;MAED,CAVD,MAUO,IAAG,CAACD,iBAAD,IAAsB7D,WAAzB,EAAsC;QAE3C+D,WAAW,CAACd,SAAZ,GAAwB,iCAAxB;QACAc,WAAW,CAACnB,KAAZ,CAAkBkB,iBAAlB,GAAuC,GAAGA,iBAAiB,GAAC7B,cAAlB,GAAiC,IAAM,GAAjF;QACA8B,WAAW,CAACC,gBAAZ,CAA6B,cAA7B,EAA6C,MAAM;UACjDD,WAAW,CAACE,SAAZ,CAAsBC,MAAtB,CAA6B,wBAA7B;UACAH,WAAW,CAACd,SAAZ,GAAwB,2BAAxB;QACD,CAHD;QAIA,OAAO,KAAGa,iBAAV;MAED,CAVM,MAUA,IAAGD,iBAAiB,IAAI7D,WAAxB,EAAqC;QAE1C+D,WAAW,CAACd,SAAZ,GAAwB,8BAAxB;QACAc,WAAW,CAACnB,KAAZ,CAAkBkB,iBAAlB,GAAuC,GAAGA,iBAAiB,GAAC7B,cAAlB,GAAiC,IAAM,GAAjF;QACA8B,WAAW,CAACC,gBAAZ,CAA6B,cAA7B,EAA6C,MAAM;UACjDD,WAAW,CAACE,SAAZ,CAAsBC,MAAtB,CAA6B,qBAA7B;UACAH,WAAW,CAACd,SAAZ,GAAwB,wBAAxB;QACD,CAHD;QAIA,OAAO,KAAGa,iBAAV;MAED;IACF,CAhSiB;;IAAA,KAoSlBK,eApSkB,GAoSA,UAChBC,mBADgB,EAEhBC,wBAFgB,EAGhBC,cAHgB,EAOb;MAAA,IAHHrC,cAGG,uEAHY,EAGZ;MAAA,IAFHjC,WAEG,uEAFS,KAET;MAAA,IADH6D,iBACG,uEADe,KACf;MAEH,IAAIU,cAAc,GAAGV,iBAAiB,GAAGU,cAAc,GAAG,qBAApB,GAA4CA,cAAc,GAAG,cAAnG,CAFG,CAIH;;MACA,MAAMC,QAAQ,GAAGhH,CAAC,CAAC,cAAD,CAAlB;;MAEA,IAAIiH,WAAW,GAAG,KAAI,CAACb,mBAAL,CAChB5D,WADgB,EAEhB6D,iBAFgB,EAGhB5B,cAHgB,EAIhBmC,mBAAmB,CAACM,MAJJ,CAAlB;;MAOA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIP,mBAAmB,CAACM,MAAzC,EAAiDC,CAAC,EAAlD,EAAsD;QAEpD,IAAIA,CAAC,KAAKP,mBAAmB,CAACM,MAA9B,EAAsC;UAEpC,IAAGb,iBAAiB,IAAI7D,WAAxB,EAAqC;UAErC4E,UAAU,CAAC,KAAI,CAACC,mBAAN,EAA2BP,cAAc,GAACrC,cAA1C,EAA0DoC,wBAA1D,CAAV;UAEA;QACD;;QACDO,UAAU,CAAC,MAAM;UACf,MAAMxF,IAAI,GAAGgF,mBAAmB,CAACO,CAAD,CAAhC;UACErE,QAAQ,CAACC,cAAT,CAAyB,QAAOnB,IAAI,CAACL,GAAI,IAAGK,IAAI,CAACJ,GAAI,EAArD,EAAwDiE,SAAxD,GAAqE,QAAOsB,cAAe,+BAA3F;UACAC,QAAQ,CAAC3B,KAAT,CAAgB,KAAI4B,WAAY,GAAhC;QACD,CAJO,EAILxC,cAAc,GAAG0C,CAJZ,CAAV;MAKD;IACF,CAzUiB;;IAAA,KA2UlBrB,iBA3UkB,GA2UE,MAAM;MAExB,KAAKwB,cAAL,GAAsB,IAAIrG,SAAJ,CAAcN,eAAd,CAAtB;MAEA,KAAKD,cAAL,GAAsB,IAAIO,SAAJ,CAAcP,cAAd,CAAtB;MAEA,IAAIiB,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAtB;MACA,MAAM4F,UAAU,GAAG,KAAK7F,KAAL,CAAWuB,SAA9B;MACA,MAAMuE,WAAW,GAAG,KAAK9F,KAAL,CAAWyB,UAA/B;MACA,MAAMsE,SAAS,GAAG,KAAK/F,KAAL,CAAW2B,QAA7B;MACA,MAAMJ,SAAS,GAAGtB,IAAI,CAAC4F,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;MACA,MAAMpE,UAAU,GAAGxB,IAAI,CAAC6F,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;MACA,MAAMhC,QAAQ,GAAG,KAAK9D,KAAL,CAAWc,WAAX,GAAyBb,IAAI,CAAC8F,SAAS,CAAC,CAAD,CAAV,CAAJ,CAAmBA,SAAS,CAAC,CAAD,CAA5B,CAAzB,GAA4D,EAA7E;;MACA,IAAG,KAAK/F,KAAL,CAAWc,WAAd,EAA0B;QAExB,IAAIqE,wBAAwB,GAAG,EAA/B;QAEA,KAAKS,cAAL,CAAoBI,WAApB,CAAgC,CAAC/F,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8BqC,QAA9B,CAAhC;QAEA,KAAK8B,cAAL,CAAoBd,gBAApB,CAAqC,SAArC,EAAiDmB,OAAD,IAAa;UAEzD,MAAMC,aAAa,GAAG,MAAOD,OAAP,IAAmB;YAErC,KAAKjH,cAAL,CAAoBgH,WAApB,CAAgC,CAACC,OAAO,CAACE,IAAT,EAAe,IAAf,CAAhC;YAEA,KAAKnH,cAAL,CAAoB8F,gBAApB,CAAqC,SAArC,EAAiDsB,UAAD,IAAgB;cAE5D,MAAMC,WAAW,GAAG,CAACJ,OAAD,EAAUG,UAAV,KAAyB;gBAE3C,IAAIjB,wBAAJ;;gBAEA,IAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA1B,IAAmCC,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAAhE,EAAuE;kBACrEhB,wBAAwB,GAAG,CAAC5D,SAAD,EAAYuC,QAAZ,EAAsBrC,UAAtB,CAA3B;gBACD,CAFD,MAEO,IAAG2E,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA7B,EAAoC;kBACzChB,wBAAwB,GAAG,CAAC5D,SAAD,EAAY,GAAG6E,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAf,CAA3B;gBACD,CAFM,MAEA,IAAGC,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA7B,EAAoC;kBACzCzF,OAAO,CAACC,GAAR,CAAYyF,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,CAAZ;kBACAhB,wBAAwB,GAAG,CAAC,GAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAJ,EAAwB1E,UAAxB,CAA3B;gBACD,CAHM,MAGA;kBACL0D,wBAAwB,GAAG,CAAC,GAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAJ,EAAwB,GAAGC,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAA3B,CAA3B;gBACD;;gBAED,KAAKlB,eAAL,CACEgB,OAAO,CAACE,IAAR,CAAa,CAAb,CADF,EAEEhB,wBAFF,EAGGc,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAuBS,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAH1C,EAIE,KAAKxF,KAAL,CAAW+C,cAJb,EAKE,KAAK/C,KAAL,CAAWc,WALb,EAME,KANF;gBASA4E,UAAU,CAAC,KAAKT,eAAN,EACRgB,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAyB,KAAKxF,KAAL,CAAW+C,cAD5B,EAERkD,OAAO,CAACE,IAAR,CAAa,CAAb,CAFQ,EAGRhB,wBAHQ,EAIPc,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAuBS,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAJhC,EAKR,KAAKxF,KAAL,CAAW+C,cALH,EAMR,KAAK/C,KAAL,CAAWc,WANH,EAOR,IAPQ,CAAV;cASD,CAjCD;;cAmCAuF,WAAW,CAACJ,OAAD,EAAUG,UAAV,CAAX;YACH,CAtCD;UAuCH,CA3CD;;UA4CAF,aAAa,CAACD,OAAD,CAAb;QACH,CA/CD;QAiDA;MAED,CAzDD,MAyDO,IAAG,CAAC,KAAKjG,KAAL,CAAWc,WAAf,EAA2B;QAEhC,KAAK8E,cAAL,CAAoBI,WAApB,CAAgC,CAAC/F,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8B,KAA9B,CAAhC;QAEA,KAAKmE,cAAL,CAAoBd,gBAApB,CAAqC,SAArC,EAAiDmB,OAAD,IAAa;UAEzD,KAAKjH,cAAL,CAAoBgH,WAApB,CAAgC,CAACC,OAAO,CAACE,IAAT,EAAe,KAAf,CAAhC;UAEA,KAAKnH,cAAL,CAAoB8F,gBAApB,CAAqC,SAArC,EAAiDsB,UAAD,IAAgB;YAE9D,IAAIjB,wBAAwB,GAAGiB,UAAU,CAACD,IAAX,KAAoB,KAApB,GAA4B,CAAC5E,SAAD,EAAYE,UAAZ,CAA5B,GAAsD2E,UAAU,CAACD,IAAhG;YAEA,KAAKlB,eAAL,CACEgB,OAAO,CAACE,IADV,EAEEhB,wBAFF,EAGEc,OAAO,CAACE,IAAR,CAAaX,MAHf,EAIE,KAAKxF,KAAL,CAAW+C,cAJb,EAKE,KAAK/C,KAAL,CAAWc,WALb;UAQD,CAZD;QAaH,CAjBD;MAkBD;IACF,CAxaiB;;IAAA,KA4alBwF,YA5akB,GA4aH,UACbpB,mBADa,EAEbC,wBAFa,EAGbC,cAHa,EAIbrC,cAJa,EAKbjC,WALa,EAOV;MAAA,IADH6D,iBACG,uEADe,KACf;MAEH,IAAIU,cAAc,GAAGV,iBAAiB,GAAGU,cAAc,GAAG,qBAApB,GAA4CA,cAAc,GAAG,cAAnG,CAFG,CAIH;;MACA,MAAMC,QAAQ,GAAGhH,CAAC,CAAC,cAAD,CAAlB;MACAgH,QAAQ,CAACiB,WAAT,CAAqBjI,CAAC,CAAC,cAAD,CAAtB,EAAwCkI,KAAxC,CAA8C,IAA9C;;MAEA,IAAIjB,WAAW,GAAG,KAAI,CAACb,mBAAL,CAChB5D,WADgB,EAEhB6D,iBAFgB,EAGhB5B,cAHgB,EAIhBmC,mBAAmB,CAACM,MAJJ,CAAlB;;MAOA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIP,mBAAmB,CAACM,MAAzC,EAAiDC,CAAC,EAAlD,EAAsD;QACpD,IAAIA,CAAC,KAAKP,mBAAmB,CAACM,MAA9B,EAAsC;UAEpC,IAAGb,iBAAiB,IAAI7D,WAAxB,EAAqC;UAErC4E,UAAU,CAAC,KAAI,CAACC,mBAAN,EAA2BP,cAAc,GAACrC,cAA1C,EAA0DoC,wBAA1D,CAAV;UAEA;QACD;;QACDO,UAAU,CAAC,MAAM;UACb,MAAMxF,IAAI,GAAGgF,mBAAmB,CAACO,CAAD,CAAhC;UACArE,QAAQ,CAACC,cAAT,CAAyB,QAAOnB,IAAI,CAACL,GAAI,IAAGK,IAAI,CAACJ,GAAI,EAArD,EAAwDiE,SAAxD,GAAqE,QAAOsB,cAAe,+BAA3F;UACAC,QAAQ,CAAC3B,KAAT,CAAgB,KAAI4B,WAAY,GAAhC;QACD,CAJO,EAILxC,cAAc,GAAG0C,CAJZ,CAAV;MAKD;IACF,CAjdiB;;IAAA,KAmdlBpB,cAndkB,GAmdD,MAAM;MAErB,KAAKnF,WAAL,GAAmB,IAAIK,SAAJ,CAAcL,WAAd,CAAnB;MAEA,KAAKF,cAAL,GAAsB,IAAIO,SAAJ,CAAcP,cAAd,CAAtB;MAEA,IAAIiB,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAtB;MACA,MAAM4F,UAAU,GAAG,KAAK7F,KAAL,CAAWuB,SAA9B;MACA,MAAMuE,WAAW,GAAG,KAAK9F,KAAL,CAAWyB,UAA/B;MACA,MAAMsE,SAAS,GAAG,KAAK/F,KAAL,CAAW2B,QAA7B;MACA,MAAMJ,SAAS,GAAGtB,IAAI,CAAC4F,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;MACA,MAAMpE,UAAU,GAAGxB,IAAI,CAAC6F,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;MACA,MAAMhC,QAAQ,GAAG,KAAK9D,KAAL,CAAWc,WAAX,GAAyBb,IAAI,CAAC8F,SAAS,CAAC,CAAD,CAAV,CAAJ,CAAmBA,SAAS,CAAC,CAAD,CAA5B,CAAzB,GAA4D,EAA7E;;MAEA,IAAG,KAAK/F,KAAL,CAAWc,WAAd,EAA2B;QACzB,KAAK5B,WAAL,CAAiB8G,WAAjB,CAA6B,CAAC/F,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8BqC,QAA9B,CAA7B;QAEA,KAAK5E,WAAL,CAAiB4F,gBAAjB,CAAkC,SAAlC,EAA8CmB,OAAD,IAAa;UAExD,MAAMC,aAAa,GAAG,MAAOD,OAAP,IAAmB;YAEvC,KAAKjH,cAAL,CAAoBgH,WAApB,CAAgC,CAACC,OAAO,CAACE,IAAT,EAAe,IAAf,CAAhC;YAEA,KAAKnH,cAAL,CAAoB8F,gBAApB,CAAqC,SAArC,EAAiDsB,UAAD,IAAgB;cAE5D,MAAMC,WAAW,GAAG,CAACJ,OAAD,EAAUG,UAAV,KAAyB;gBAE3C,IAAIjB,wBAAJ;;gBAEA,IAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA1B,IAAmCC,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAAhE,EAAuE;kBACrEhB,wBAAwB,GAAG,CAAC5D,SAAD,EAAYuC,QAAZ,EAAsBrC,UAAtB,CAA3B;gBACD,CAFD,MAEO,IAAG2E,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA7B,EAAoC;kBACzChB,wBAAwB,GAAG,CAAC5D,SAAD,EAAY,GAAG6E,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAf,CAA3B;gBACD,CAFM,MAEA,IAAGC,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA7B,EAAoC;kBACzCzF,OAAO,CAACC,GAAR,CAAYyF,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,CAAZ;kBACAhB,wBAAwB,GAAG,CAAC,GAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAJ,EAAwB1E,UAAxB,CAA3B;gBACD,CAHM,MAGA;kBACL0D,wBAAwB,GAAG,CAAC,GAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAJ,EAAwB,GAAGC,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAA3B,CAA3B;gBACD;;gBAED,KAAKG,YAAL,CACEL,OAAO,CAACE,IAAR,CAAa,CAAb,CADF,EAEEhB,wBAFF,EAGGc,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAuBS,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAH1C,EAIE,KAAKxF,KAAL,CAAW+C,cAJb,EAKE,KAAK/C,KAAL,CAAWc,WALb,EAME,KANF;gBASA4E,UAAU,CAAC,KAAKY,YAAN,EACRL,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAyB,KAAKxF,KAAL,CAAW+C,cAD5B,EAERkD,OAAO,CAACE,IAAR,CAAa,CAAb,CAFQ,EAGRhB,wBAHQ,EAIPc,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAuBS,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAJhC,EAKR,KAAKxF,KAAL,CAAW+C,cALH,EAMR,KAAK/C,KAAL,CAAWc,WANH,EAOR,IAPQ,CAAV;cASD,CAjCD;;cAmCAuF,WAAW,CAACJ,OAAD,EAAUG,UAAV,CAAX;YACH,CAtCD;UAuCH,CA3CC;;UA4CFF,aAAa,CAACD,OAAD,CAAb;QACH,CA/CG;QAgDE;MAEH,CArDD,MAqDO,IAAG,CAAC,KAAKjG,KAAL,CAAWc,WAAf,EAA2B;QAE9B,KAAK5B,WAAL,CAAiB8G,WAAjB,CAA6B,CAAC/F,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8B,KAA9B,CAA7B;QAEA,KAAKvC,WAAL,CAAiB4F,gBAAjB,CAAkC,SAAlC,EAA8CmB,OAAD,IAAa;UAEtD,KAAKjH,cAAL,CAAoBgH,WAApB,CAAgC,CAACC,OAAO,CAACE,IAAT,EAAe,KAAf,CAAhC;UAEA,KAAKnH,cAAL,CAAoB8F,gBAApB,CAAqC,SAArC,EAAiDsB,UAAD,IAAgB;YAE9D,IAAIjB,wBAAwB,GAAGiB,UAAU,CAACD,IAAX,KAAoB,KAApB,GAA4B,CAAC5E,SAAD,EAAYE,UAAZ,CAA5B,GAAsD2E,UAAU,CAACD,IAAhG;YAEA,KAAKG,YAAL,CACEL,OAAO,CAACE,IADV,EAEEhB,wBAFF,EAGEc,OAAO,CAACE,IAAR,CAAaX,MAHf,EAIE,KAAKxF,KAAL,CAAW+C,cAJb,EAKE,KAAK/C,KAAL,CAAWc,WALb,EAME,KANF;UASD,CAbD;QAcH,CAlBD;MAmBH;IACF,CA9iBiB;;IAAA,KAkjBlB2F,UAljBkB,GAkjBL,UACXvB,mBADW,EAEXC,wBAFW,EAGXC,cAHW,EAIXrC,cAJW,EAKXjC,WALW,EAOR;MAAA,IADH6D,iBACG,uEADe,KACf;MAEH,IAAIU,cAAc,GAAGV,iBAAiB,GAAGU,cAAc,GAAG,qBAApB,GAA4CA,cAAc,GAAG,cAAnG,CAFG,CAIH;;MACA,MAAMC,QAAQ,GAAGhH,CAAC,CAAC,cAAD,CAAlB;MACAgH,QAAQ,CAACiB,WAAT,CAAqBjI,CAAC,CAAC,cAAD,CAAtB,EAAwCkI,KAAxC,CAA8C,IAA9C;;MAEA,IAAIjB,WAAW,GAAG,KAAI,CAACb,mBAAL,CAChB5D,WADgB,EAEhB6D,iBAFgB,EAGhB5B,cAHgB,EAIhBmC,mBAAmB,CAACM,MAJJ,CAAlB;;MAOA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIP,mBAAmB,CAACM,MAAzC,EAAiDC,CAAC,EAAlD,EAAsD;QACpD,IAAIA,CAAC,KAAKP,mBAAmB,CAACM,MAA9B,EAAsC;UAEpC,IAAGb,iBAAiB,IAAI7D,WAAxB,EAAqC;UAErC4E,UAAU,CAAC,KAAI,CAACC,mBAAN,EAA2B5C,cAAc,GAACqC,cAA1C,EAA0DD,wBAA1D,CAAV;UAEA;QACC;;QACHO,UAAU,CAAC,MAAM;UACf,MAAMxF,IAAI,GAAGgF,mBAAmB,CAACO,CAAD,CAAhC;UACArE,QAAQ,CAACC,cAAT,CAAyB,QAAOnB,IAAI,CAACL,GAAI,IAAGK,IAAI,CAACJ,GAAI,EAArD,EAAwDiE,SAAxD,GAAqE,QAAOsB,cAAe,+BAA3F;UACAC,QAAQ,CAAC3B,KAAT,CAAgB,KAAI4B,WAAY,GAAhC;QACD,CAJS,EAIPxC,cAAc,GAAG0C,CAJV,CAAV;MAKD;IACF,CAvlBiB;;IAAA,KAylBlBnB,WAzlBkB,GAylBJ,MAAM;MAElB,KAAKlF,wBAAL,GAAgC,IAAIG,SAAJ,CAAcH,wBAAd,CAAhC;MAEA,KAAKJ,cAAL,GAAsB,IAAIO,SAAJ,CAAcP,cAAd,CAAtB;MAEA,IAAIiB,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAtB;MACA,MAAM4F,UAAU,GAAG,KAAK7F,KAAL,CAAWuB,SAA9B;MACA,MAAMuE,WAAW,GAAG,KAAK9F,KAAL,CAAWyB,UAA/B;MACA,MAAMsE,SAAS,GAAG,KAAK/F,KAAL,CAAW2B,QAA7B;MACA,MAAMJ,SAAS,GAAGtB,IAAI,CAAC4F,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;MACA,MAAMpE,UAAU,GAAGxB,IAAI,CAAC6F,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;MACA,MAAMhC,QAAQ,GAAG,KAAK9D,KAAL,CAAWc,WAAX,GAAyBb,IAAI,CAAC8F,SAAS,CAAC,CAAD,CAAV,CAAJ,CAAmBA,SAAS,CAAC,CAAD,CAA5B,CAAzB,GAA4D,EAA7E;;MAEA,IAAG,KAAK/F,KAAL,CAAWc,WAAd,EAA0B;QAExB,IAAIqE,wBAAwB,GAAG,EAA/B;QAEA,KAAK/F,wBAAL,CAA8B4G,WAA9B,CAA0C,CAAC/F,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8BqC,QAA9B,CAA1C;QAEA,KAAK1E,wBAAL,CAA8B0F,gBAA9B,CAA+C,SAA/C,EAA2DmB,OAAD,IAAa;UAEnE,MAAMC,aAAa,GAAG,MAAOD,OAAP,IAAmB;YAEvC,KAAKjH,cAAL,CAAoBgH,WAApB,CAAgC,CAACC,OAAO,CAACE,IAAT,EAAe,IAAf,CAAhC;YAEA,KAAKnH,cAAL,CAAoB8F,gBAApB,CAAqC,SAArC,EAAiDsB,UAAD,IAAgB;cAE5D,MAAMC,WAAW,GAAG,CAACJ,OAAD,EAAUG,UAAV,KAAyB;gBAE3C,IAAIjB,wBAAJ;;gBAEA,IAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA1B,IAAmCC,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAAhE,EAAuE;kBACrEhB,wBAAwB,GAAG,CAAC5D,SAAD,EAAYuC,QAAZ,EAAsBrC,UAAtB,CAA3B;gBACD,CAFD,MAEO,IAAG2E,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA7B,EAAoC;kBACzChB,wBAAwB,GAAG,CAAC5D,SAAD,EAAY,GAAG6E,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAf,CAA3B;gBACD,CAFM,MAEA,IAAGC,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA7B,EAAoC;kBACzCzF,OAAO,CAACC,GAAR,CAAYyF,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,CAAZ;kBACAhB,wBAAwB,GAAG,CAAC,GAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAJ,EAAwB1E,UAAxB,CAA3B;gBACD,CAHM,MAGA;kBACL0D,wBAAwB,GAAG,CAAC,GAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAJ,EAAwB,GAAGC,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAA3B,CAA3B;gBACD;;gBAED,KAAKM,UAAL,CACER,OAAO,CAACE,IAAR,CAAa,CAAb,CADF,EAEEhB,wBAFF,EAGGc,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAuBS,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAH1C,EAIE,KAAKxF,KAAL,CAAW+C,cAJb,EAKE,KAAK/C,KAAL,CAAWc,WALb,EAME,KANF;gBASA4E,UAAU,CAAC,KAAKe,UAAN,EACRR,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAyB,KAAKxF,KAAL,CAAW+C,cAD5B,EAERkD,OAAO,CAACE,IAAR,CAAa,CAAb,CAFQ,EAGRhB,wBAHQ,EAIPc,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAuBS,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAJhC,EAKR,KAAKxF,KAAL,CAAW+C,cALH,EAMR,KAAK/C,KAAL,CAAWc,WANH,EAOR,IAPQ,CAAV;cASD,CAjCD;;cAmCAuF,WAAW,CAACJ,OAAD,EAAUG,UAAV,CAAX;YACH,CAtCD;UAuCD,CA3CD;;UA4CFF,aAAa,CAACD,OAAD,CAAb;QACH,CA/CC;QAgDF;MAEC,CAxDD,MAwDO,IAAG,CAAC,KAAKjG,KAAL,CAAWc,WAAf,EAA2B;QAEhC,KAAK1B,wBAAL,CAA8B4G,WAA9B,CAA0C,CAAC/F,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8B,KAA9B,CAA1C;QAEA,KAAKrC,wBAAL,CAA8B0F,gBAA9B,CAA+C,SAA/C,EAA2DmB,OAAD,IAAa;UAEnE,KAAKjH,cAAL,CAAoBgH,WAApB,CAAgC,CAACC,OAAO,CAACE,IAAT,EAAe,KAAf,CAAhC;UAEA,KAAKnH,cAAL,CAAoB8F,gBAApB,CAAqC,SAArC,EAAiDsB,UAAD,IAAgB;YAE9D,IAAIjB,wBAAwB,GAAGiB,UAAU,CAACD,IAAX,KAAoB,KAApB,GAA4B,CAAC5E,SAAD,EAAYE,UAAZ,CAA5B,GAAsD2E,UAAU,CAACD,IAAhG;YAEA,KAAKM,UAAL,CACER,OAAO,CAACE,IADV,EAEEhB,wBAFF,EAGEc,OAAO,CAACE,IAAR,CAAaX,MAHf,EAIE,KAAKxF,KAAL,CAAW+C,cAJb,EAKE,KALF;UAOD,CAXD;QAYH,CAhBD;MAiBD;IACF,CArrBiB;;IAAA,KAyrBlB2D,WAzrBkB,GAyrBJ,UACZxB,mBADY,EAEZC,wBAFY,EAGZC,cAHY,EAIZrC,cAJY,EAKZjC,WALY,EAOT;MAAA,IADH6D,iBACG,uEADe,KACf;MAEH,IAAIU,cAAc,GAAGV,iBAAiB,GAAGU,cAAc,GAAG,qBAApB,GAA4CA,cAAc,GAAG,cAAnG,CAFG,CAIH;;MACA,MAAMC,QAAQ,GAAGhH,CAAC,CAAC,cAAD,CAAlB;MACAgH,QAAQ,CAACiB,WAAT,CAAqBjI,CAAC,CAAC,cAAD,CAAtB,EAAwCkI,KAAxC,CAA8C,IAA9C;;MAEA,IAAIjB,WAAW,GAAG,KAAI,CAACb,mBAAL,CAChB5D,WADgB,EAEhB6D,iBAFgB,EAGhB5B,cAHgB,EAIhBmC,mBAAmB,CAACM,MAJJ,CAAlB;;MAOA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIP,mBAAmB,CAACM,MAAzC,EAAiDC,CAAC,EAAlD,EAAsD;QACpD,IAAIA,CAAC,KAAKP,mBAAmB,CAACM,MAA9B,EAAsC;UAEpC,IAAGb,iBAAiB,IAAI7D,WAAxB,EAAqC;UAErC4E,UAAU,CAAC,KAAI,CAACC,mBAAN,EAA2BP,cAAc,GAACrC,cAA1C,EAA0DoC,wBAA1D,CAAV;UAEA;QACC;;QACHO,UAAU,CAAC,MAAM;UACb,MAAMxF,IAAI,GAAGgF,mBAAmB,CAACO,CAAD,CAAhC;UACArE,QAAQ,CAACC,cAAT,CAAyB,QAAOnB,IAAI,CAACL,GAAI,IAAGK,IAAI,CAACJ,GAAI,EAArD,EAAwDiE,SAAxD,GAAqE,QAAOsB,cAAe,+BAA3F;UACAC,QAAQ,CAAC3B,KAAT,CAAgB,KAAI4B,WAAY,GAAhC;QACD,CAJO,EAILxC,cAAc,GAAG0C,CAJZ,CAAV;MAKD;IACF,CA9tBiB;;IAAA,KAguBlBlB,aAhuBkB,GAguBF,MAAM;MAEpB,KAAKpF,2BAAL,GAAmC,IAAII,SAAJ,CAAcJ,2BAAd,CAAnC;MAEA,KAAKH,cAAL,GAAsB,IAAIO,SAAJ,CAAcP,cAAd,CAAtB;MAEA,IAAIiB,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAtB;MACA,MAAM4F,UAAU,GAAG,KAAK7F,KAAL,CAAWuB,SAA9B;MACA,MAAMuE,WAAW,GAAG,KAAK9F,KAAL,CAAWyB,UAA/B;MACA,MAAMsE,SAAS,GAAG,KAAK/F,KAAL,CAAW2B,QAA7B;MACA,MAAMJ,SAAS,GAAGtB,IAAI,CAAC4F,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;MACA,MAAMpE,UAAU,GAAGxB,IAAI,CAAC6F,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;MACA,MAAMhC,QAAQ,GAAG,KAAK9D,KAAL,CAAWc,WAAX,GAAyBb,IAAI,CAAC8F,SAAS,CAAC,CAAD,CAAV,CAAJ,CAAmBA,SAAS,CAAC,CAAD,CAA5B,CAAzB,GAA4D,EAA7E;;MAEA,IAAG,KAAK/F,KAAL,CAAWc,WAAd,EAA2B;QAEzB,KAAK3B,2BAAL,CAAiC6G,WAAjC,CAA6C,CAAC/F,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8BqC,QAA9B,CAA7C;QAEA,KAAK3E,2BAAL,CAAiC2F,gBAAjC,CAAkD,SAAlD,EAA8DmB,OAAD,IAAa;UAExEvF,OAAO,CAACC,GAAR,CAAYsF,OAAO,CAACE,IAApB;;UAEA,MAAMD,aAAa,GAAG,MAAOD,OAAP,IAAmB;YAEvC,KAAKjH,cAAL,CAAoBgH,WAApB,CAAgC,CAACC,OAAO,CAACE,IAAT,EAAe,IAAf,CAAhC;YAEA,KAAKnH,cAAL,CAAoB8F,gBAApB,CAAqC,SAArC,EAAiDsB,UAAD,IAAgB;cAE5D,MAAMC,WAAW,GAAG,CAACJ,OAAD,EAAUG,UAAV,KAAyB;gBAE3C,IAAIjB,wBAAJ;;gBAEA,IAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA1B,IAAmCC,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAAhE,EAAuE;kBACrEhB,wBAAwB,GAAG,CAAC5D,SAAD,EAAYuC,QAAZ,EAAsBrC,UAAtB,CAA3B;gBACD,CAFD,MAEO,IAAG2E,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA7B,EAAoC;kBACzChB,wBAAwB,GAAG,CAAC5D,SAAD,EAAY,GAAG6E,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAf,CAA3B;gBACD,CAFM,MAEA,IAAGC,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA7B,EAAoC;kBACzCzF,OAAO,CAACC,GAAR,CAAYyF,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,CAAZ;kBACAhB,wBAAwB,GAAG,CAAC,GAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAJ,EAAwB1E,UAAxB,CAA3B;gBACD,CAHM,MAGA;kBACL0D,wBAAwB,GAAG,CAAC,GAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAJ,EAAwB,GAAGC,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAA3B,CAA3B;gBACD;;gBAED,KAAKO,WAAL,CACET,OAAO,CAACE,IAAR,CAAa,CAAb,CADF,EAEEhB,wBAFF,EAGGc,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAuBS,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAH1C,EAIE,KAAKxF,KAAL,CAAW+C,cAJb,EAKE,KAAK/C,KAAL,CAAWc,WALb,EAME,KANF;gBASA4E,UAAU,CAAC,KAAKgB,WAAN,EACRT,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAyB,KAAKxF,KAAL,CAAW+C,cAD5B,EAERkD,OAAO,CAACE,IAAR,CAAa,CAAb,CAFQ,EAGRhB,wBAHQ,EAIPc,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAuBS,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAJhC,EAKR,KAAKxF,KAAL,CAAW+C,cALH,EAMR,KAAK/C,KAAL,CAAWc,WANH,EAOR,IAPQ,CAAV;cASD,CAjCD;;cAmCAuF,WAAW,CAACJ,OAAD,EAAUG,UAAV,CAAX;YACH,CAtCD;UAuCD,CA3CD;;UA4CAF,aAAa,CAACD,OAAD,CAAb;QACH,CAjDC;MAmDD,CAvDD,MAuDO,IAAG,CAAC,KAAKjG,KAAL,CAAWc,WAAf,EAA4B;QAEjC,KAAK3B,2BAAL,CAAiC6G,WAAjC,CAA6C,CAAC/F,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8B,KAA9B,CAA7C;QAEA,KAAKtC,2BAAL,CAAiC2F,gBAAjC,CAAkD,SAAlD,EAA8DmB,OAAD,IAAa;UAEtEvF,OAAO,CAACC,GAAR,CAAYsF,OAAO,CAACE,IAApB;UAEA,KAAKnH,cAAL,CAAoBgH,WAApB,CAAgC,CAACC,OAAO,CAACE,IAAT,EAAe,KAAf,CAAhC;UAEA,KAAKnH,cAAL,CAAoB8F,gBAApB,CAAqC,SAArC,EAAiDsB,UAAD,IAAgB;YAE9D1F,OAAO,CAACC,GAAR,CAAYyF,UAAU,CAACD,IAAvB;YAEA,IAAIhB,wBAAwB,GAAGiB,UAAU,CAACD,IAAX,KAAoB,KAApB,GAA4B,CAAC5E,SAAD,EAAYE,UAAZ,CAA5B,GAAsD2E,UAAU,CAACD,IAAhG;YAEA,KAAKO,WAAL,CACET,OAAO,CAACE,IADV,EAEEhB,wBAFF,EAGEc,OAAO,CAACE,IAAR,CAAaX,MAHf,EAIE,KAAKxF,KAAL,CAAW+C,cAJb,EAKE,KAAK/C,KAAL,CAAWc,WALb,EAME,KANF;UASD,CAfD;QAgBH,CAtBD;MAuBD;IACF,CAj0BiB;;IAAA,KAq0BlB6F,UAr0BkB,GAq0BL,UACXzB,mBADW,EAEXC,wBAFW,EAGXC,cAHW,EAIXrC,cAJW,EAKXjC,WALW,EAOR;MAAA,IADH6D,iBACG,uEADe,KACf;MAEH,IAAIU,cAAc,GAAGV,iBAAiB,GAAGU,cAAc,GAAG,qBAApB,GAA4CA,cAAc,GAAG,cAAnG,CAFG,CAIH;;MACA,MAAMC,QAAQ,GAAGhH,CAAC,CAAC,cAAD,CAAlB;MACAgH,QAAQ,CAACiB,WAAT,CAAqBjI,CAAC,CAAC,cAAD,CAAtB,EAAwCkI,KAAxC,CAA8C,IAA9C;;MAEA,IAAIjB,WAAW,GAAG,KAAI,CAACb,mBAAL,CAChB5D,WADgB,EAEhB6D,iBAFgB,EAGhB5B,cAHgB,EAIhBmC,mBAAmB,CAACM,MAJJ,CAAlB;;MAOA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIP,mBAAmB,CAACM,MAAzC,EAAiDC,CAAC,EAAlD,EAAsD;QACpD,IAAIA,CAAC,KAAKP,mBAAmB,CAACM,MAA9B,EAAsC;UAEpC,IAAGb,iBAAiB,IAAI7D,WAAxB,EAAqC;UAErC4E,UAAU,CAAC,KAAI,CAACC,mBAAN,EAA2BP,cAAc,GAACrC,cAA1C,EAA0DoC,wBAA1D,CAAV;UAEA;QACC;;QACHO,UAAU,CAAC,MAAM;UACb,MAAMxF,IAAI,GAAGgF,mBAAmB,CAACO,CAAD,CAAhC;UACArE,QAAQ,CAACC,cAAT,CAAyB,QAAOnB,IAAI,CAACL,GAAI,IAAGK,IAAI,CAACJ,GAAI,EAArD,EAAwDiE,SAAxD,GAAqE,QAAOsB,cAAe,+BAA3F;UACAC,QAAQ,CAAC3B,KAAT,CAAgB,KAAI4B,WAAY,GAAhC;QACD,CAJO,EAILxC,cAAc,GAAG0C,CAJZ,CAAV;MAKD;IACF,CA12BiB;;IAAA,KA42BlBjB,YA52BkB,GA42BH,MAAM;MAEnB,KAAKnF,sBAAL,GAA8B,IAAIE,SAAJ,CAAcF,sBAAd,CAA9B;MAEA,KAAKL,cAAL,GAAsB,IAAIO,SAAJ,CAAcP,cAAd,CAAtB;MAEA,IAAIiB,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAtB;MACA,MAAM4F,UAAU,GAAG,KAAK7F,KAAL,CAAWuB,SAA9B;MACA,MAAMuE,WAAW,GAAG,KAAK9F,KAAL,CAAWyB,UAA/B;MACA,MAAMsE,SAAS,GAAG,KAAK/F,KAAL,CAAW2B,QAA7B;MACA,MAAMJ,SAAS,GAAGtB,IAAI,CAAC4F,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;MACA,MAAMpE,UAAU,GAAGxB,IAAI,CAAC6F,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;MACA,MAAMhC,QAAQ,GAAG,KAAK9D,KAAL,CAAWc,WAAX,GAAyBb,IAAI,CAAC8F,SAAS,CAAC,CAAD,CAAV,CAAJ,CAAmBA,SAAS,CAAC,CAAD,CAA5B,CAAzB,GAA4D,EAA7E;;MAEA,IAAG,KAAK/F,KAAL,CAAWc,WAAd,EAA0B;QAExB,IAAIqE,wBAAwB,GAAG,EAA/B;QAEA,KAAK9F,sBAAL,CAA4B2G,WAA5B,CAAwC,CAAC/F,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8BqC,QAA9B,CAAxC;QAEA,KAAKzE,sBAAL,CAA4ByF,gBAA5B,CAA6C,SAA7C,EAAyDmB,OAAD,IAAa;UAEnE,MAAMC,aAAa,GAAG,MAAOD,OAAP,IAAmB;YAEvC,KAAKjH,cAAL,CAAoBgH,WAApB,CAAgC,CAACC,OAAO,CAACE,IAAT,EAAe,IAAf,CAAhC;YAEA,KAAKnH,cAAL,CAAoB8F,gBAApB,CAAqC,SAArC,EAAiDsB,UAAD,IAAgB;cAE9D1F,OAAO,CAACC,GAAR,CAAY,CAAC,GAAGsF,OAAO,CAACE,IAAR,CAAa,CAAb,CAAJ,EAAqB,GAAGF,OAAO,CAACE,IAAR,CAAa,CAAb,CAAxB,CAAZ;;cAEE,MAAME,WAAW,GAAG,CAACJ,OAAD,EAAUG,UAAV,KAAyB;gBAE3C,IAAIjB,wBAAJ;;gBAEA,IAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA1B,IAAmCC,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAAhE,EAAuE;kBACrEhB,wBAAwB,GAAG,CAAC5D,SAAD,EAAYuC,QAAZ,EAAsBrC,UAAtB,CAA3B;gBACD,CAFD,MAEO,IAAG2E,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA7B,EAAoC;kBACzChB,wBAAwB,GAAG,CAAC5D,SAAD,EAAY,GAAG6E,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAf,CAA3B;gBACD,CAFM,MAEA,IAAGC,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,KAA7B,EAAoC;kBACzCzF,OAAO,CAACC,GAAR,CAAYyF,UAAU,CAACD,IAAX,CAAgB,CAAhB,EAAmB,CAAnB,CAAZ;kBACAhB,wBAAwB,GAAG,CAAC,GAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAJ,EAAwB1E,UAAxB,CAA3B;gBACD,CAHM,MAGA;kBACL0D,wBAAwB,GAAG,CAAC,GAAGiB,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAAJ,EAAwB,GAAGC,UAAU,CAACD,IAAX,CAAgB,CAAhB,CAA3B,CAA3B;gBACD;;gBAED,KAAKQ,UAAL,CACEV,OAAO,CAACE,IAAR,CAAa,CAAb,CADF,EAEEhB,wBAFF,EAGGc,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAuBS,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAH1C,EAIE,KAAKxF,KAAL,CAAW+C,cAJb,EAKE,KAAK/C,KAAL,CAAWc,WALb,EAME,KANF;gBASA4E,UAAU,CACR,KAAKiB,UADG,EAERV,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAyB,KAAKxF,KAAL,CAAW+C,cAF5B,EAGRkD,OAAO,CAACE,IAAR,CAAa,CAAb,CAHQ,EAIRhB,wBAJQ,EAKPc,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MAAhB,GAAuBS,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBX,MALhC,EAMR,KAAKxF,KAAL,CAAW+C,cANH,EAOR,KAAK/C,KAAL,CAAWc,WAPH,EAQR,IARQ,CAAV;cAUD,CAlCD;;cAoCAuF,WAAW,CAACJ,OAAD,EAAUG,UAAV,CAAX;YACH,CAzCD;UA0CD,CA9CD;;UA+CAF,aAAa,CAACD,OAAD,CAAb;QACH,CAlDC;QAmDA;MAED,CA3DD,MA2DO,IAAG,CAAC,KAAKjG,KAAL,CAAWc,WAAf,EAA2B;QAEhC,KAAKzB,sBAAL,CAA4B2G,WAA5B,CAAwC,CAAC/F,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8B,KAA9B,CAAxC;QAEA,KAAKpC,sBAAL,CAA4ByF,gBAA5B,CAA6C,SAA7C,EAAyDmB,OAAD,IAAa;UAEjE,KAAKjH,cAAL,CAAoBgH,WAApB,CAAgC,CAACC,OAAO,CAACE,IAAT,EAAe,KAAf,CAAhC;UAEA,KAAKnH,cAAL,CAAoB8F,gBAApB,CAAqC,SAArC,EAAiDsB,UAAD,IAAgB;YAE9D,IAAIjB,wBAAwB,GAAGiB,UAAU,CAACD,IAAX,KAAoB,KAApB,GAA4B,CAAC5E,SAAD,EAAYE,UAAZ,CAA5B,GAAsD2E,UAAU,CAACD,IAAhG;YAEA,KAAKQ,UAAL,CACEV,OAAO,CAACE,IADV,EAEEhB,wBAFF,EAGEc,OAAO,CAACE,IAAR,CAAaX,MAHf,EAIE,KAAKxF,KAAL,CAAW+C,cAJb,EAKE,KAAK/C,KAAL,CAAWc,WALb,EAME,KANF;UASD,CAbD;QAcH,CAlBD;MAmBD;IACF,CA78BiB;;IAAA,KAi9BlB8F,6BAj9BkB,GAi9Bc,UAC9BC,wBAD8B,EAE9BC,yBAF8B,EAG9B3B,wBAH8B,EAI9B4B,aAJ8B,EAK9BhE,cAL8B,EAM9BqC,cAN8B,EAQ3B;MAAA,IADHT,iBACG,uEADe,KACf;;MAEH,KAAI,CAACrE,QAAL,CAAc;QAACH,oBAAoB,EAAE;MAAvB,CAAd;;MAEA,IAAIkF,cAAc,GAAGV,iBAAiB,GAAGU,cAAc,GAAG,qBAApB,GAA4CA,cAAc,GAAG,cAAnG,CAJG,CAMH;;MACA,MAAMC,QAAQ,GAAGhH,CAAC,CAAC,cAAD,CAAlB;MACAgH,QAAQ,CAACiB,WAAT,CAAqBjI,CAAC,CAAC,cAAD,CAAtB,EAAwCkI,KAAxC,CAA8C,IAA9C;;MAEA,IAAIjB,WAAW,GAAG,KAAI,CAACb,mBAAL,CAChB,KAAI,CAAC1E,KAAL,CAAWc,WADK,EAEhB,KAFgB,EAGhBiC,cAHgB,EAIhB8D,wBAAwB,CAACrB,MAJT,CAAlB;;MAOA,IAAIwB,GAAG,GAAGC,IAAI,CAACC,GAAL,CACRL,wBAAwB,CAACrB,MADjB,EAERsB,yBAAyB,CAACtB,MAFlB,CAAV;;MAKA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIuB,GAArB,EAA0BvB,CAAC,EAA3B,EAA+B;QAC7B,IAAI0B,KAAK,GAAGN,wBAAwB,CAACpB,CAAD,CAApC;QACA,IAAI2B,KAAK,GAAGN,yBAAyB,CAACrB,CAAD,CAArC;;QACA,IAAIA,CAAC,KAAKoB,wBAAwB,CAACrB,MAAnC,EAA2C;UAEzC,IAAGb,iBAAiB,IAAI,KAAI,CAAC3E,KAAL,CAAWc,WAAnC,EAAgD;UAEhD4E,UAAU,CAAC,MAAM;YACf,IAAIqB,aAAJ,EAAmB;cACjB,KAAI,CAACpB,mBAAL,CACER,wBADF;YAGD,CAJD,MAIO;cACL,KAAI,CAAC7E,QAAL,CAAc;gBAAEH,oBAAoB,EAAE;cAAxB,CAAd;YACD;UACF,CARS,EAQPiF,cAAc,GAAGrC,cARV,CAAV;UASA;QACD;;QACD2C,UAAU,CAAC,MAAM;UACf;UACA,IAAIyB,KAAK,KAAKE,SAAd,EAAyB;YACvBjG,QAAQ,CAACC,cAAT,CAAyB,QAAO8F,KAAK,CAACtH,GAAI,IAAGsH,KAAK,CAACrH,GAAI,EAAvD,EAA0DiE,SAA1D,GAAuE,QAAOsB,cAAe,+BAA7F;UACD;;UACD,IAAI+B,KAAK,KAAKC,SAAd,EAAyB;YACvBjG,QAAQ,CAACC,cAAT,CAAyB,QAAO+F,KAAK,CAACvH,GAAI,IAAGuH,KAAK,CAACtH,GAAI,EAAvD,EAA0DiE,SAA1D,GAAuE,QAAOsB,cAAe,+BAA7F;UACD;;UACDC,QAAQ,CAAC3B,KAAT,CAAgB,KAAI4B,WAAW,GAAC,CAAE,GAAlC;QAED,CAVS,EAUPE,CAAC,GAAG1C,cAVG,CAAV;MAWD;IACF,CA7gCiB;;IAAA,KA+gClB0B,kCA/gCkB,GA+gCmB,MAAM;MACzC,IAAI,KAAKzE,KAAL,CAAWG,oBAAX,IAAmC,KAAKH,KAAL,CAAWI,cAAlD,EAAkE;QAChE;MACD;;MAED,KAAKd,+BAAL,GAAuC,IAAIC,SAAJ,CAAcD,+BAAd,CAAvC;MAEA,MAAM;QAAEW;MAAF,IAAW,KAAKD,KAAtB;MACA,MAAMsH,UAAU,GAAG,KAAKtH,KAAL,CAAWuB,SAA9B;MACA,MAAMgG,WAAW,GAAG,KAAKvH,KAAL,CAAWyB,UAA/B;MACA,MAAM+F,SAAS,GAAG,KAAKxH,KAAL,CAAW2B,QAA7B;MACA,MAAMJ,SAAS,GAAGtB,IAAI,CAACqH,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;MACA,MAAM7F,UAAU,GAAGxB,IAAI,CAACsH,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;MACA,MAAMzD,QAAQ,GAAG,KAAK9D,KAAL,CAAWc,WAAX,GAAyBb,IAAI,CAACuH,SAAS,CAAC,CAAD,CAAV,CAAJ,CAAmBA,SAAS,CAAC,CAAD,CAA5B,CAAzB,GAA4D,KAA7E;;MAEA,IAAG,KAAKxH,KAAL,CAAWc,WAAd,EAA2B;QAEzB,KAAKxB,+BAAL,CAAqC0G,WAArC,CAAiD,CAAC/F,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8BqC,QAA9B,EAAwC,IAAxC,CAAjD;QAEA,KAAKxE,+BAAL,CAAqCwF,gBAArC,CAAsD,SAAtD,EAAkEmB,OAAD,IAAa;UAE1EvF,OAAO,CAACC,GAAR,CAAYsF,OAAO,CAACE,IAApB;UAEA,MAAMU,wBAAwB,GAAGZ,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgB,CAAhB,CAAjC;UACA,MAAMsB,4BAA4B,GAAGxB,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgB,CAAhB,CAArC;UACA,MAAMY,aAAa,GAAGd,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgB,CAAhB,CAAtB;UAEA,MAAMuB,6BAA6B,GAAGzB,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgB,CAAhB,CAAtC;UACA,MAAMW,yBAAyB,GAAGb,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgB,CAAhB,CAAlC;UACA,MAAMwB,mBAAmB,GAAG1B,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgB,CAAhB,CAA5B;UAEA,IAAGsB,4BAA4B,CAACA,4BAA4B,CAACjC,MAA7B,GAAsC,CAAvC,CAA5B,KAA0E1B,QAA7E,EAAuF2D,4BAA4B,CAACG,IAA7B,CAAkC9D,QAAlC;UAEvF,MAAMsB,cAAc,GAAIyB,wBAAwB,CAACrB,MAAzB,GAAgCiC,4BAA4B,CAACjC,MAA7D,GAAoEkC,6BAA6B,CAAClC,MAAlG,GAAyGsB,yBAAyB,CAACtB,MAA3J;UAEA,MAAMqC,6BAA6B,GAAGC,oDAAoD,CACxFjB,wBAAwB,CAACA,wBAAwB,CAACrB,MAAzB,GAAkC,CAAnC,CADgE,EAExFiC,4BAA4B,CAACA,4BAA4B,CAACjC,MAA7B,GAAsC,CAAvC,CAF4D,EAGxF,KAHwF,CAA1F;UAMA,MAAMuC,8BAA8B,GAAGD,oDAAoD,CACzFJ,6BAA6B,CAACA,6BAA6B,CAAClC,MAA9B,GAAuC,CAAxC,CAD4D,EAEzFsB,yBAAyB,CAACA,yBAAyB,CAACtB,MAA1B,GAAmC,CAApC,CAFgE,EAGzF,IAHyF,CAA3F;UAMA,MAAML,wBAAwB,GAAG,CAAC,GAAG0C,6BAAJ,EAAmC,GAAGE,8BAAtC,CAAjC;UAEArC,UAAU,CAAC,MAAM;YACf,KAAKkB,6BAAL,CACEC,wBADF,EAEEY,4BAFF,EAGEtC,wBAHF,EAIE4B,aAJF,EAKE,KAAK/G,KAAL,CAAW+C,cALb,EAMEqC,cANF,EAOE,KAPF;UASD,CAVS,EAUP,KAAKpF,KAAL,CAAW+C,cAVJ,CAAV;UAYA2C,UAAU,CAAC,MAAM;YACf,KAAKkB,6BAAL,CACEc,6BADF,EAEEZ,yBAFF,EAGE3B,wBAHF,EAIEwC,mBAJF,EAKE,KAAK3H,KAAL,CAAW+C,cALb,EAMEqC,cANF,EAOE,IAPF;UASD,CAVS,EAUP,KAAKpF,KAAL,CAAW+C,cAAX,IAA2B8D,wBAAwB,CAACrB,MAAzB,GAAgCiC,4BAA4B,CAACjC,MAAxF,CAVO,CAAV;QAYH,CAtDD;MAwDD,CA5DD,MA4DO,IAAG,CAAC,KAAKxF,KAAL,CAAWc,WAAf,EAA4B;QAEjC,KAAKxB,+BAAL,CAAqC0G,WAArC,CAAiD,CAAC/F,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8BqC,QAA9B,CAAjD;QAEA,KAAKxE,+BAAL,CAAqCwF,gBAArC,CAAsD,SAAtD,EAAkEmB,OAAD,IAAa;UAE1E,MAAMY,wBAAwB,GAAGZ,OAAO,CAACE,IAAR,CAAa,CAAb,CAAjC;UACA,MAAMW,yBAAyB,GAAGb,OAAO,CAACE,IAAR,CAAa,CAAb,CAAlC;UACA,IAAG,CAACW,yBAAyB,CAAC,CAAD,CAAzB,CAA6BtG,QAAjC,EAA2CsG,yBAAyB,CAACkB,OAA1B,CAAkCvG,UAAlC;UAE3C,MAAMsF,aAAa,GAAGd,OAAO,CAACE,IAAR,CAAa,CAAb,CAAtB;UACA,MAAMhB,wBAAwB,GAAG2C,oDAAoD,CACnFjB,wBAAwB,CAACA,wBAAwB,CAACrB,MAAzB,GAAkC,CAAnC,CAD2D,EAEnFsB,yBAAyB,CAACA,yBAAyB,CAACtB,MAA1B,GAAmC,CAApC,CAF0D,CAArF;UAKAE,UAAU,CAAC,MAAM;YACf,KAAKkB,6BAAL,CACEC,wBADF,EAEEC,yBAFF,EAGE3B,wBAHF,EAIE4B,aAJF,EAKE,KAAK/G,KAAL,CAAW+C,cALb;UAOD,CARS,EAQP,KAAK/C,KAAL,CAAW+C,cARJ,CAAV;QASH,CArBD;MAsBD;IACF,CArnCiB;;IAAA,KAynClB4C,mBAznCkB,GAynCKR,wBAAD,IAA8B;MAElD,MAAM5D,SAAS,GAAG,KAAKvB,KAAL,CAAWC,IAAX,CAAgB,KAAKD,KAAL,CAAWuB,SAAX,CAAqB,CAArB,CAAhB,EAAyC,KAAKvB,KAAL,CAAWuB,SAAX,CAAqB,CAArB,CAAzC,CAAlB;MACA,MAAME,UAAU,GAAG,KAAKzB,KAAL,CAAWC,IAAX,CAAgB,KAAKD,KAAL,CAAWyB,UAAX,CAAsB,CAAtB,CAAhB,EAA0C,KAAKzB,KAAL,CAAWyB,UAAX,CAAsB,CAAtB,CAA1C,CAAnB;MACA,MAAMqC,QAAQ,GAAG,KAAK9D,KAAL,CAAWc,WAAX,GAAyB,KAAKd,KAAL,CAAWC,IAAX,CAAgB,KAAKD,KAAL,CAAW2B,QAAX,CAAoB,CAApB,CAAhB,EAAwC,KAAK3B,KAAL,CAAW2B,QAAX,CAAoB,CAApB,CAAxC,CAAzB,GAA2F,EAA5G;MACA,MAAMsG,KAAK,GAAI9C,wBAAwB,CAACK,MAAzB,GAAgC,EAAjC,GAAqC,CAAnD;MAEAE,UAAU,CAAC,MAAM;QAAC,KAAKpF,QAAL,CAAc;UAACH,oBAAoB,EAAE;QAAvB,CAAd;MAA6C,CAArD,EAAuD8H,KAAvD,CAAV;;MAEA,KAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,wBAAwB,CAACK,MAA7C,EAAqDC,CAAC,EAAtD,EAA0D;QACxDC,UAAU,CAAC,MAAM;UACf,MAAMxF,IAAI,GAAGiF,wBAAwB,CAACM,CAAD,CAArC;UAEA,IAAIyC,OAAO,GAAG9G,QAAQ,CAACC,cAAT,CAAyB,QAAOnB,IAAI,CAACL,GAAI,IAAGK,IAAI,CAACJ,GAAI,EAArD,CAAd;;UAEA,IAAGI,IAAI,CAACL,GAAL,KAAa0B,SAAS,CAAC1B,GAAvB,IAA8BK,IAAI,CAACJ,GAAL,KAAayB,SAAS,CAACzB,GAAxD,EAA6D;YAC3DoI,OAAO,CAACnE,SAAR,GAAoB,mEAApB;UACD,CAFD,MAEO,IAAG7D,IAAI,CAACL,GAAL,KAAa4B,UAAU,CAAC5B,GAAxB,IAA+BK,IAAI,CAACJ,GAAL,KAAa2B,UAAU,CAAC3B,GAA1D,EAA8D;YACnEoI,OAAO,CAACnE,SAAR,GAAoB,mDAApB;UACD,CAFM,MAEA,IAAG,KAAK/D,KAAL,CAAWc,WAAX,IAA2BZ,IAAI,CAACL,GAAL,KAAaiE,QAAQ,CAACjE,GAAtB,IAA6BK,IAAI,CAACJ,GAAL,KAAagE,QAAQ,CAAChE,GAAjF,EAAuF;YAC5FoI,OAAO,CAACnE,SAAR,GAAoB,iDAApB;UACD,CAFM,MAEA,IAAG3C,QAAQ,CAACC,cAAT,CAAyB,QAAOnB,IAAI,CAACL,GAAI,IAAGK,IAAI,CAACJ,GAAI,EAArD,EAAwDiE,SAAxD,CAAkEoE,QAAlE,CAA2E,oBAA3E,CAAH,EAAqG;YAC1G7J,CAAC,CAAE,SAAQ4B,IAAI,CAACL,GAAI,IAAGK,IAAI,CAACJ,GAAI,EAA/B,CAAD,CAAmCyG,WAAnC,CAA+CjI,CAAC,CAAE,SAAQ4B,IAAI,CAACL,GAAI,IAAGK,IAAI,CAACJ,GAAI,EAA/B,CAAD,CAAmC0G,KAAnC,CAAyC,IAAzC,CAA/C;UACD,CAFM,MAEA;YACL0B,OAAO,CAACnE,SAAR,GAAoB,yBAApB;UACD;QAEF,CAjBS,EAiBP,KAAK0B,CAjBE,CAAV;MAkBD;IACF,CAtpCiB;;IAAA,KA0pClB2C,WA1pCkB,GA0pCHC,KAAD,IAAW;MACvB,KAAK,IAAI5C,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI4C,KAAK,CAAC7C,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;QACtC,IAAIA,CAAC,KAAK4C,KAAK,CAAC7C,MAAhB,EAAwB;UACtBE,UAAU,CAAC,MAAM;YACf,KAAKpF,QAAL,CAAc;cAAEF,cAAc,EAAE;YAAlB,CAAd;UACD,CAFS,EAEPqF,CAAC,GAAG,EAFG,CAAV;UAGA;QACD;;QACDC,UAAU,CAAC,MAAM;UAEf,IAAI4C,IAAI,GAAGD,KAAK,CAAC5C,CAAD,CAAhB;UACA,IAAIvF,IAAI,GAAG,KAAKF,KAAL,CAAWC,IAAX,CAAgBqI,IAAI,CAAC,CAAD,CAApB,EAAyBA,IAAI,CAAC,CAAD,CAA7B,CAAX;UACApI,IAAI,CAAC8D,MAAL,GAAc,IAAd;UACA5C,QAAQ,CAACC,cAAT,CAAyB,QAAOnB,IAAI,CAACL,GAAI,IAAGK,IAAI,CAACJ,GAAI,EAArD,EAAwDiE,SAAxD,GAAoE,gBAApE;QAED,CAPS,EAOP0B,CAAC,GAAG,EAPG,CAAV;MAQD;IACF,CA3qCiB;;IAAA,KA6qClB8C,kBA7qCkB,GA6qCIF,KAAD,IAAW;MAC9B,IAAIpI,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAtB;MACA,IAAIF,OAAO,GAAGE,IAAI,CAACuI,KAAL,EAAd;;MACA,KAAK,IAAIF,IAAT,IAAiBD,KAAjB,EAAwB;QACtB,IAAInI,IAAI,GAAGD,IAAI,CAACqI,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcA,IAAI,CAAC,CAAD,CAAlB,CAAX;QACA,IAAIG,OAAO,GAAG,EACZ,GAAGvI,IADS;UAEZ8D,MAAM,EAAE;QAFI,CAAd;QAIAjE,OAAO,CAACuI,IAAI,CAAC,CAAD,CAAL,CAAP,CAAiBA,IAAI,CAAC,CAAD,CAArB,IAA4BG,OAA5B;MACD;;MACD,KAAKnI,QAAL,CAAc;QAAEL,IAAI,EAAEF,OAAR;QAAiBK,cAAc,EAAE;MAAjC,CAAd;MACA;IACD,CA1rCiB;;IAEd,KAAKJ,KAAL,GAAa;MACTC,IAAI,EAAE,EADG;MAETgB,cAAc,EAAE,KAFP;MAGTa,OAAO,EAAE,KAHA;MAITlB,YAAY,EAAE,OAJL;MAKT0B,WAAW,EAAExD,QAAQ,CAAC,CAAD,CALZ;MAMT4D,UAAU,EAAE3D,OAAO,CAAC,CAAD,CANV;MAOT0D,UAAU,EAAE,CAPH;MAQTiG,YAAY,EAAE,yBARL;MAST9E,MAAM,EAAE,EATC;MAUTC,MAAM,EAAE,EAVC;MAWTjB,WAAW,EAAE,CAXJ;MAYTrB,SAAS,EAAE,CAAC,CAAD,EAAI,CAAJ,CAZF;MAaTE,UAAU,EAAE,CAAC,CAAD,EAAI,EAAJ,CAbH;MAcTlB,aAAa,EAAE,KAdN;MAeTE,cAAc,EAAE,KAfP;MAgBTK,WAAW,EAAE,KAhBJ;MAiBTD,YAAY,EAAE,KAjBL;MAkBTc,QAAQ,EAAE,EAlBD;MAmBTvB,cAAc,EAAE,KAnBP;MAoBTD,oBAAoB,EAAE,KApBb;MAqBT4C,cAAc,EAAE,EArBP;MAsBTE,SAAS,EAAE,IAtBF;MAuBTC,IAAI,EAAE;IAvBG,CAAb;EAyBH,CA5B+C,CA6BhD;EACA;EACA;;;EACAyF,iBAAiB,GAAG;IAClB,MAAM1I,IAAI,GAAG2I,UAAU,CAAC,KAAK5I,KAAN,EAAa,KAAKA,KAAL,CAAW4D,MAAxB,EAAgC,KAAK5D,KAAL,CAAW6D,MAA3C,CAAvB;IACA,KAAKvD,QAAL,CAAc;MAACL,IAAI,EAAEA;IAAP,CAAd;EACD;;EA0pCDsD,kBAAkB,GAAG;IACnB,IAAI,KAAKvD,KAAL,CAAWG,oBAAX,IAAmC,KAAKH,KAAL,CAAWI,cAAlD,EAAkE;MAChE;IACD;;IACD,KAAKE,QAAL,CAAc;MAAEF,cAAc,EAAE;IAAlB,CAAd;IACAsF,UAAU,CAAC,MAAM;MACf,MAAM;QAAEzF;MAAF,IAAW,KAAKD,KAAtB;MACA,MAAMsH,UAAU,GAAG,KAAKtH,KAAL,CAAWuB,SAA9B;MACA,MAAMgG,WAAW,GAAG,KAAKvH,KAAL,CAAWyB,UAA/B;MACA,MAAMF,SAAS,GAAGtB,IAAI,CAACqH,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;MACA,MAAM7F,UAAU,GAAGxB,IAAI,CAACsH,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;MACA,MAAMzD,QAAQ,GAAG,KAAK9D,KAAL,CAAWc,WAAX,GAAyBb,IAAI,CAAC,KAAKD,KAAL,CAAW2B,QAAX,CAAoB,CAApB,CAAD,CAAJ,CAA6B,KAAK3B,KAAL,CAAW2B,QAAX,CAAoB,CAApB,CAA7B,CAAzB,GAAgF,KAAjG;MACA,MAAM0G,KAAK,GAAG,KAAKrI,KAAL,CAAWc,WAAX,GAAyBtC,UAAU,CAACyB,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8B,IAA9B,EAAoCqC,QAApC,CAAnC,GAAmFtF,UAAU,CAACyB,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8B,KAA9B,CAA3G;MACA,KAAK2G,WAAL,CAAiBC,KAAjB;IACD,CATS,EASP,EATO,CAAV;EAUD;;EAEDjF,6BAA6B,GAAG;IAC9B,IAAI,KAAKpD,KAAL,CAAWG,oBAAX,IAAmC,KAAKH,KAAL,CAAWI,cAAlD,EAAkE;MAChE;IACD;;IACD,KAAKE,QAAL,CAAc;MAAEF,cAAc,EAAE;IAAlB,CAAd;IACAsF,UAAU,CAAC,MAAM;MACf,MAAM;QAAEzF;MAAF,IAAW,KAAKD,KAAtB;MACA,MAAMsH,UAAU,GAAG,KAAKtH,KAAL,CAAWuB,SAA9B;MACA,MAAMgG,WAAW,GAAG,KAAKvH,KAAL,CAAWyB,UAA/B;MACA,MAAMF,SAAS,GAAGtB,IAAI,CAACqH,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;MACA,MAAM7F,UAAU,GAAGxB,IAAI,CAACsH,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;MACA,MAAMzD,QAAQ,GAAG,KAAK9D,KAAL,CAAWc,WAAX,GAAyBb,IAAI,CAAC,KAAKD,KAAL,CAAW2B,QAAX,CAAoB,CAApB,CAAD,CAAJ,CAA6B,KAAK3B,KAAL,CAAW2B,QAAX,CAAoB,CAApB,CAA7B,CAAzB,GAAgF,KAAjG;MACA,MAAM0G,KAAK,GAAG,KAAKrI,KAAL,CAAWc,WAAX,GAAyBnC,qBAAqB,CAACsB,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8B,IAA9B,EAAoCqC,QAApC,CAA9C,GAA8FnF,qBAAqB,CAACsB,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8B,KAA9B,EAAqCqC,QAArC,CAAjI;MACA,KAAKsE,WAAL,CAAiBC,KAAjB;IACD,CATS,EASP,EATO,CAAV;EAUD;;EAEDhF,oBAAoB,GAAG;IACrB,IAAI,KAAKrD,KAAL,CAAWG,oBAAX,IAAmC,KAAKH,KAAL,CAAWI,cAAlD,EAAkE;MAChE;IACD;;IACD,KAAKE,QAAL,CAAc;MAAEF,cAAc,EAAE;IAAlB,CAAd;IACAsF,UAAU,CAAC,MAAM;MACf,MAAM;QAAEzF;MAAF,IAAW,KAAKD,KAAtB;MACA,MAAMsH,UAAU,GAAG,KAAKtH,KAAL,CAAWuB,SAA9B;MACA,MAAMgG,WAAW,GAAG,KAAKvH,KAAL,CAAWyB,UAA/B;MACA,MAAMF,SAAS,GAAGtB,IAAI,CAACqH,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;MACA,MAAM7F,UAAU,GAAGxB,IAAI,CAACsH,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;MACA,MAAMzD,QAAQ,GAAG,KAAK9D,KAAL,CAAWc,WAAX,GAAyBb,IAAI,CAAC,KAAKD,KAAL,CAAW2B,QAAX,CAAoB,CAApB,CAAD,CAAJ,CAA6B,KAAK3B,KAAL,CAAW2B,QAAX,CAAoB,CAApB,CAA7B,CAAzB,GAAgF,KAAjG;MACA,MAAM0G,KAAK,GAAG,KAAKrI,KAAL,CAAWc,WAAX,GAAyBrC,YAAY,CAACwB,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8B,IAA9B,EAAoCqC,QAApC,CAArC,GAAqFrF,YAAY,CAACwB,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8B,KAA9B,CAA/G;MACA,KAAK2G,WAAL,CAAiBC,KAAjB;IACD,CATS,EASP,EATO,CAAV;EAUD;;EAED/E,sBAAsB,GAAG;IACvB,IAAI,KAAKtD,KAAL,CAAWG,oBAAX,IAAmC,KAAKH,KAAL,CAAWI,cAAlD,EAAkE;MAChE;IACD;;IACD,KAAKE,QAAL,CAAc;MAAEF,cAAc,EAAE;IAAlB,CAAd;IACAsF,UAAU,CAAC,MAAM;MACf,MAAM;QAAEzF;MAAF,IAAW,KAAKD,KAAtB;MACA,MAAMsH,UAAU,GAAG,KAAKtH,KAAL,CAAWuB,SAA9B;MACA,MAAMgG,WAAW,GAAG,KAAKvH,KAAL,CAAWyB,UAA/B;MACA,MAAMF,SAAS,GAAGtB,IAAI,CAACqH,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;MACA,MAAM7F,UAAU,GAAGxB,IAAI,CAACsH,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;MACA,MAAMzD,QAAQ,GAAG,KAAK9D,KAAL,CAAWc,WAAX,GAAyBb,IAAI,CAAC,KAAKD,KAAL,CAAW2B,QAAX,CAAoB,CAApB,CAAD,CAAJ,CAA6B,KAAK3B,KAAL,CAAW2B,QAAX,CAAoB,CAApB,CAA7B,CAAzB,GAAgF,KAAjG;MACA,MAAM0G,KAAK,GAAG,KAAKrI,KAAL,CAAWc,WAAX,GAAyBpC,cAAc,CAACuB,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8B,IAA9B,EAAoCqC,QAApC,CAAvC,GAAuFpF,cAAc,CAACuB,IAAD,EAAOsB,SAAP,EAAkBE,UAAlB,EAA8B,KAA9B,CAAnH;MACA,KAAK2G,WAAL,CAAiBC,KAAjB;IACD,CATS,EASP,EATO,CAAV;EAUD;;EAEDQ,MAAM,GAAE;IAEJ,oBACI;MAAK,SAAS,EAAC,gBAAf;MAAA,wBACI;QAAK,SAAS,EAAC,qBAAf;QAAA,wBACE;UAAK,SAAS,EAAC,qBAAf;UAAA,uBACE;YAAG,SAAS,EAAC,WAAb;YAAA,gDAA6C;cAAM,SAAS,EAAC,eAAhB;cAAA,UAAiC,KAAK7I,KAAL,CAAW0C,UAAX,CAAsBoG;YAAvD;cAAA;cAAA;cAAA;YAAA,QAA7C;UAAA;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QADF,eAIE;UAAK,SAAS,EAAC,wBAAf;UAAA,uBACI;YAAK,SAAS,EAAC,2BAAf;YAA2C,EAAE,EAAC;UAA9C;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA,QAJF;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eASI,QAAC,MAAD;QAAQ,KAAK,EAAE,KAAK9I,KAApB;QAA2B,SAAS,EAAE,KAAKkE,SAA3C;QAAsD,SAAS,EAAE,KAAKV;MAAtE;QAAA;QAAA;QAAA;MAAA,QATJ,eAUI;QAAK,SAAS,EAAC,sBAAf;QAAA,uBACI,QAAC,UAAD;UACI,KAAK,EAAE,KAAKxD,KADhB;UAEI,eAAe,EAAE,KAAKJ,eAF1B;UAGI,gBAAgB,EAAE,KAAKsB,gBAH3B;UAII,aAAa,EAAE,KAAKU;QAJxB;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QAVJ,eAkBI,QAAC,MAAD;QAAQ,KAAK,EAAE,KAAK5B,KAApB;QAA2B,SAAS,EAAE,KAAK6B,SAA3C;QAAsD,iBAAiB,EAAE,KAAKgB,iBAA9E;QAAiG,cAAc,EAAE,KAAKF,cAAtH;QAAsI,OAAO,EAAE,KAAKK,YAApJ;QAAkK,IAAI,EAAE,KAAKmB,aAA7K;QAA4L,UAAU,EAAE,KAAK5B,UAA7M;QAAyN,gBAAgB,EAAE,KAAKR,oBAAhP;QAAsQ,iBAAiB,EAAE,KAAKqC;MAA9R;QAAA;QAAA;QAAA;MAAA,QAlBJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAsBH;;AAzxC+C;;AA4xCpD,MAAMwE,UAAU,GAAG,CAAC5I,KAAD,EAAQ+I,OAAR,EAAiBC,OAAjB,KAA6B;EAC5C,MAAM/I,IAAI,GAAG,EAAb;EACA,IAAI2D,MAAM,GAAGmF,OAAb;EACA,IAAIlF,MAAM,GAAGmF,OAAb;;EACA,KAAK,IAAInJ,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG+D,MAAxB,EAAgC/D,GAAG,EAAnC,EAAuC;IACrC,MAAMoJ,UAAU,GAAG,EAAnB;;IACA,KAAK,IAAInJ,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG+D,MAAxB,EAAgC/D,GAAG,EAAnC,EAAuC;MACrC,IAAII,IAAI,GAAGgJ,UAAU,CAACpJ,GAAD,EAAMD,GAAN,EAAWG,KAAX,CAArB;MACAE,IAAI,CAAC6D,SAAL,GAAiB,MAAjB;MACAkF,UAAU,CAACrB,IAAX,CAAgB1H,IAAhB;IACD;;IACDD,IAAI,CAAC2H,IAAL,CAAUqB,UAAV;EACD;;EACD,OAAOhJ,IAAP;AACH,CAdD;;AAkBA,MAAMiJ,UAAU,GAAG,CAACpJ,GAAD,EAAMD,GAAN,EAAWG,KAAX,KAAqB;EACpC,MAAMuB,SAAS,GAAGvB,KAAK,CAACuB,SAAxB;EACA,MAAME,UAAU,GAAGzB,KAAK,CAACyB,UAAzB;EACA,MAAMqC,QAAQ,GAAG9D,KAAK,CAAC2B,QAAvB;EACA,OAAO;IACL7B,GADK;IAELD,GAFK;IAGLQ,OAAO,EAAER,GAAG,KAAK0B,SAAS,CAAC,CAAD,CAAjB,IAAwBzB,GAAG,KAAKyB,SAAS,CAAC,CAAD,CAH7C;IAILf,QAAQ,EAAEX,GAAG,KAAK4B,UAAU,CAAC,CAAD,CAAlB,IAAyB3B,GAAG,KAAK2B,UAAU,CAAC,CAAD,CAJhD;IAKLV,MAAM,EAAEf,KAAK,CAACc,WAAN,GAAoBjB,GAAG,KAAKiE,QAAQ,CAAC,CAAD,CAAhB,IAAuBhE,GAAG,KAAKgE,QAAQ,CAAC,CAAD,CAA3D,GAAiE,KALpE;IAMLE,MAAM,EAAE,KANH;IAOLmF,YAAY,EAAE,IAPT;IAQLC,kBAAkB,EAAE,IARf;IASLC,SAAS,EAAE,KATN;IAULC,eAAe,EAAE,KAVZ;IAWLC,QAAQ,EAAEC,QAXL;IAYLC,cAAc,EAAED;EAZX,CAAP;AAcD,CAlBH;;AAoBE,MAAMlI,mBAAmB,GAAG,CAACrB,IAAD,EAAOJ,GAAP,EAAYC,GAAZ,EAAiB4J,SAAjB,KAA+B;EAEzD,MAAM3J,OAAO,GAAGE,IAAI,CAACuI,KAAL,EAAhB;EACA,MAAMmB,QAAQ,GAAG5J,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAjB;EACA,MAAM8J,QAAQ,GAAG7J,OAAO,CAAC2J,SAAS,CAAC,CAAD,CAAV,CAAP,CAAsBA,SAAS,CAAC,CAAD,CAA/B,CAAjB;EACA,MAAMG,OAAO,GAAG,EACd,GAAGD,QADW;IAEdvJ,OAAO,EAAE,CAACuJ,QAAQ,CAACvJ;EAFL,CAAhB;EAIA,MAAMoI,OAAO,GAAG,EACd,GAAGkB,QADW;IAEdtJ,OAAO,EAAE,CAACsJ,QAAQ,CAACtJ,OAFL;IAGd2D,MAAM,EAAE;EAHM,CAAhB;EAKAjE,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB2I,OAApB;EACA1I,OAAO,CAAC2J,SAAS,CAAC,CAAD,CAAV,CAAP,CAAsBA,SAAS,CAAC,CAAD,CAA/B,IAAsCG,OAAtC;EACA,OAAO9J,OAAP;AACD,CAjBD;;AAmBA,MAAMyB,oBAAoB,GAAG,CAACvB,IAAD,EAAOJ,GAAP,EAAYC,GAAZ,EAAiBgK,UAAjB,KAAgC;EAE3D,MAAM/J,OAAO,GAAGE,IAAI,CAACuI,KAAL,EAAhB;EACA,MAAMuB,SAAS,GAAGhK,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAlB;EACA,MAAMkK,SAAS,GAAGjK,OAAO,CAAC+J,UAAU,CAAC,CAAD,CAAX,CAAP,CAAuBA,UAAU,CAAC,CAAD,CAAjC,CAAlB;EACA,MAAMD,OAAO,GAAG,EACd,GAAGG,SADW;IAEdxJ,QAAQ,EAAE,CAACwJ,SAAS,CAACxJ;EAFP,CAAhB;EAIA,MAAMiI,OAAO,GAAG,EACd,GAAGsB,SADW;IAEdvJ,QAAQ,EAAE,CAACuJ,SAAS,CAACvJ,QAFP;IAGdwD,MAAM,EAAE;EAHM,CAAhB;EAKAjE,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB2I,OAApB;EACA1I,OAAO,CAAC+J,UAAU,CAAC,CAAD,CAAX,CAAP,CAAuBA,UAAU,CAAC,CAAD,CAAjC,IAAwCD,OAAxC;EACA,OAAO9J,OAAP;AACD,CAjBD;;AAmBA,MAAMiB,yBAAyB,GAAG,CAACf,IAAD,EAAOJ,GAAP,EAAYC,GAAZ,KAAoB;EACpD,MAAMC,OAAO,GAAGE,IAAI,CAACuI,KAAL,EAAhB;EACA,MAAMtI,IAAI,GAAGH,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAb;EACA,IAAI2I,OAAO,GAAG,EAAC,GAAGvI;EAAJ,CAAd;EACAuI,OAAO,GAAG,EACR,GAAGvI,IADK;IAER8D,MAAM,EAAE,CAAC9D,IAAI,CAAC8D;EAFN,CAAV;EAIAjE,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB2I,OAApB;EACA,OAAO1I,OAAP;AACD,CAVD;;AAYA,MAAM2B,yBAAyB,GAAG,CAACzB,IAAD,EAAOJ,GAAP,EAAYC,GAAZ,EAAiB6B,QAAjB,KAA8B;EAE9D,MAAM5B,OAAO,GAAGE,IAAI,CAACuI,KAAL,EAAhB;EACA,MAAMyB,OAAO,GAAGlK,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAhB;;EACA,IAAG6B,QAAQ,CAAC6D,MAAT,KAAoB,CAAvB,EAAyB;IACvB,MAAMiD,OAAO,GAAG,EACd,GAAGwB,OADW;MAEdlJ,MAAM,EAAE,CAACkJ,OAAO,CAAClJ,MAFH;MAGdiD,MAAM,EAAE;IAHM,CAAhB;IAKAjE,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB2I,OAApB;IACA,OAAO1I,OAAP;EACD;;EACD,MAAMmK,OAAO,GAAGnK,OAAO,CAAC4B,QAAQ,CAAC,CAAD,CAAT,CAAP,CAAqBA,QAAQ,CAAC,CAAD,CAA7B,CAAhB;EACA,MAAMkI,OAAO,GAAG,EACd,GAAGK,OADW;IAEdnJ,MAAM,EAAE,CAACmJ,OAAO,CAACnJ;EAFH,CAAhB;EAIA,MAAM0H,OAAO,GAAG,EACd,GAAGwB,OADW;IAEdlJ,MAAM,EAAE,CAACkJ,OAAO,CAAClJ,MAFH;IAGdiD,MAAM,EAAE;EAHM,CAAhB;EAKAjE,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB2I,OAApB;EACA1I,OAAO,CAAC4B,QAAQ,CAAC,CAAD,CAAT,CAAP,CAAqBA,QAAQ,CAAC,CAAD,CAA7B,IAAoCkI,OAApC;EACA,OAAO9J,OAAP;AACD,CA1BD;;AA4BA,MAAMwI,kBAAkB,GAAG,CAACtI,IAAD,EAAOoI,KAAP,KAAiB;EAC1C,IAAItI,OAAO,GAAGE,IAAI,CAACuI,KAAL,EAAd;;EACA,KAAK,IAAIF,IAAT,IAAiBD,KAAjB,EAAwB;IACtB,IAAInI,IAAI,GAAGD,IAAI,CAACqI,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcA,IAAI,CAAC,CAAD,CAAlB,CAAX;IACA,IAAIG,OAAO,GAAG,EACZ,GAAGvI,IADS;MAEZ8D,MAAM,EAAE;IAFI,CAAd;IAIAjE,OAAO,CAACuI,IAAI,CAAC,CAAD,CAAL,CAAP,CAAiBA,IAAI,CAAC,CAAD,CAArB,IAA4BG,OAA5B;EACD;;EACD,OAAO1I,OAAP;AACD,CAXD;;AAaA,MAAMoK,sBAAsB,GAAG,CAC7BtD,wBAD6B,EAE7BC,yBAF6B,KAG1B;EACH,IAAI5B,mBAAmB,GAAG,EAA1B;EACA,IAAIkF,CAAC,GAAGnD,IAAI,CAACC,GAAL,CACNL,wBAAwB,CAACrB,MADnB,EAENsB,yBAAyB,CAACtB,MAFpB,CAAR;;EAIA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2E,CAApB,EAAuB3E,CAAC,EAAxB,EAA4B;IAC1B,IAAIoB,wBAAwB,CAACpB,CAAD,CAAxB,KAAgC4B,SAApC,EAA+C;MAC7CnC,mBAAmB,CAAC0C,IAApB,CAAyBf,wBAAwB,CAACpB,CAAD,CAAjD;IACD;;IACD,IAAIqB,yBAAyB,CAACrB,CAAD,CAAzB,KAAiC4B,SAArC,EAAgD;MAC9CnC,mBAAmB,CAAC0C,IAApB,CAAyBd,yBAAyB,CAACrB,CAAD,CAAlD;IACD;EACF;;EACD,OAAOP,mBAAP;AACD,CAlBD;;AAoBA,MAAMjB,kBAAkB,GAAG,UAAChE,IAAD,EAA4B;EAAA,IAArBoK,UAAqB,uEAAV,KAAU;EACrD,IAAItK,OAAO,GAAGE,IAAI,CAACuI,KAAL,EAAd;;EACA,KAAK,IAAI3I,GAAT,IAAgBI,IAAhB,EAAsB;IACpB,KAAK,IAAIC,IAAT,IAAiBL,GAAjB,EAAsB;MACpB,IAAIyI,IAAI,GAAG,KAAX;MACA,IAAIgC,IAAI,GAAG,KAAX;;MACA,IAAGD,UAAH,EAAc;QACZ,IAAGpK,IAAI,CAACC,IAAI,CAACL,GAAN,CAAJ,CAAeK,IAAI,CAACJ,GAApB,EAAyBkE,MAA5B,EAAoCsE,IAAI,GAAG,IAAP;QAEpC,IAAGrI,IAAI,CAACC,IAAI,CAACL,GAAN,CAAJ,CAAeK,IAAI,CAACJ,GAApB,EAAyBiB,MAA5B,EAAoCuJ,IAAI,GAAG,IAAP;MACrC;;MACD,IAAI7B,OAAO,GAAG,EACZ,GAAGvI,IADS;QAEZqJ,QAAQ,EAAEC,QAFE;QAGZC,cAAc,EAAED,QAHJ;QAIZe,aAAa,EAAEf,QAJH;QAKZH,SAAS,EAAE,KALC;QAMZC,eAAe,EAAE,KANL;QAOZkB,UAAU,EAAE,KAPA;QAQZrB,YAAY,EAAE,IARF;QASZnF,MAAM,EAAEsE,IATI;QAUZmC,QAAQ,EAAE,KAVE;QAWZ1J,MAAM,EAAEuJ;MAXI,CAAd;MAaAvK,OAAO,CAACG,IAAI,CAACL,GAAN,CAAP,CAAkBK,IAAI,CAACJ,GAAvB,IAA8B2I,OAA9B;IACD;EACF;;EACD,OAAO1I,OAAP;AACD,CA5BD;;AA8BA,SAAS+H,oDAAT,CACEX,KADF,EAEEC,KAFF,EAIE;EAAA,IADAsD,MACA,uEADO,KACP;EACA,IAAIvF,wBAAwB,GAAG,EAA/B;EACA,IAAIwF,WAAW,GAAGvD,KAAlB;;EACA,OAAOuD,WAAW,KAAK,IAAvB,EAA6B;IAC3BxF,wBAAwB,CAACyC,IAAzB,CAA8B+C,WAA9B;;IACA,IAAGD,MAAH,EAAU;MACRC,WAAW,GAAGA,WAAW,CAACvB,kBAA1B;IACD,CAFD,MAEO;MACLuB,WAAW,GAAGA,WAAW,CAACxB,YAA1B;IACD;EACF;;EACDwB,WAAW,GAAGxD,KAAd;;EACA,OAAOwD,WAAW,KAAK,IAAvB,EAA6B;IAC3BxF,wBAAwB,CAAC6C,OAAzB,CAAiC2C,WAAjC;;IACA,IAAGD,MAAH,EAAU;MACRC,WAAW,GAAGA,WAAW,CAACvB,kBAA1B;IACD,CAFD,MAEO;MACLuB,WAAW,GAAGA,WAAW,CAACxB,YAA1B;IACD;EACF;;EACD,OAAOhE,wBAAP;AACD"},"metadata":{},"sourceType":"module"}