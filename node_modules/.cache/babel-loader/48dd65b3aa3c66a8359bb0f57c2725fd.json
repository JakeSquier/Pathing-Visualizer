{"ast":null,"code":"export function dijkstra(grid, startNode, finishNode, stopNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  unvisitedNodes.forEach(node => {\n    if (node === startNode) {\n      node.distance = 0;\n    } else {\n      node.distance = Infinity;\n    }\n  });\n\n  while (!!unvisitedNodes) {\n    sortNodesByDistance(unvisitedNodes, finishNode);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode, isStop = false) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    if (isStop && currentNode.isTarget === true) break; //console.log(currentNode, currentNode !== null)\n\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","stopNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","forEach","node","Infinity","sortNodesByDistance","closestNode","shift","isWall","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","length","filter","nodes","getNodesInShortestPathOrder","isStop","nodesInShortestPathOrder","currentNode","isTarget","unshift"],"mappings":"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","sourcesContent":["\nexport function dijkstra(grid, startNode, finishNode, stopNode){\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid)\n  unvisitedNodes.forEach((node) => {\n    if(node === startNode){\n      node.distance = 0\n    } else {\n      node.distance = Infinity\n    }\n  })\n  while(!!unvisitedNodes){\n      sortNodesByDistance(unvisitedNodes, finishNode)\n      const closestNode = unvisitedNodes.shift();\n\n      if(closestNode.isWall) continue;\n\n      if(closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n\n      if(closestNode === finishNode) return visitedNodesInOrder;\n\n      updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode, isStop=false) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      if(isStop && currentNode.isTarget===true) break;\n      //console.log(currentNode, currentNode !== null)\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"]},"metadata":{},"sourceType":"module"}