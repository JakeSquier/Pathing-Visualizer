{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/PathFindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport './PathfindingVisualizer.css';\nimport Node from './Node/Node.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = renderGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  render() {\n    const {} = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: nodes.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map((node, nodeIdx) => {\n            const {\n              isStart,\n              isFinish\n            } = node;\n            return /*#__PURE__*/_jsxDEV(Node, {\n              isStart: isStart,\n              isFinish: isFinish,\n              test: 'foo',\n              test: 'kappa'\n            }, nodeIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 40\n            }, this);\n          })\n        }, rowIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === 10 && col === 5,\n    isFinish: row === 10 && col === 45,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/PathFindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","PathfindingVisualizer","constructor","props","state","grid","mouseIsPressed","componentDidMount","renderGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","render","nodes","map","rowIdx","node","nodeIdx","isStart","isFinish","currentRow","push","createNode","distance","Infinity","isVisited","isWall","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './PathfindingVisualizer.css'\nimport Node from './Node/Node.jsx'\n\nexport default class PathfindingVisualizer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [], \n            mouseIsPressed: false\n        };\n    }\n\n    componentDidMount() {\n        const grid = renderGrid();\n        this.setState({grid});\n    }\n\n    handleMouseDown(row, col) {\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter(row, col) {\n        if (!this.state.mouseIsPressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp() {\n        this.setState({mouseIsPressed: false});\n    }\n\n    render() {\n        const {} = this.state;\n\n        return (\n            <div className=\"grid\">\n                {nodes.map((row, rowIdx) => {\n                    return(\n                        <div key={rowIdx}>\n                            {row.map((node, nodeIdx) => {\n                                const {isStart, isFinish} = node;\n                                return <Node key={nodeIdx} isStart={isStart} isFinish={isFinish} test={'foo'} test={'kappa'}/>\n                            })}\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nconst renderGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\nconst createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === 10 && col === 5,\n      isFinish: row === 10 && col === 45,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };"]},"metadata":{},"sourceType":"module"}