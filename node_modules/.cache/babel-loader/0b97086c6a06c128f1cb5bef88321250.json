{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\";\nimport React, { Component } from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithims/dijkstra';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data';\nimport algData from '../data/alg-data';\nimport './mainContainer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 5;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 45;\nexport default class MainContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMouseDown = (row, col) => {\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n\n    this.handleMouseEnter = (row, col) => {\n      if (!this.state.mouseIsPressed) return;\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    };\n\n    this.handleMouseUp = () => {\n      this.setState({\n        mouseIsPressed: false\n      });\n    };\n\n    this.handleNav = () => {\n      this.setState({\n        showNav: !this.state.showNav\n      });\n    };\n\n    this.handleItemDescChange = (e, item) => {\n      var newItem = `${item}`;\n      itemData.map(_item => {\n        if (item === _item.id) {\n          this.setState({\n            currItemDesc: newItem,\n            currItemObj: _item\n          });\n        }\n      });\n    };\n\n    this.handleTabs = (e, val) => {\n      this.setState({\n        currAlgTab: val,\n        currAlgObj: algData[val]\n      });\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      showNav: false,\n      currItemDesc: 'Start',\n      currItemObj: itemData[0],\n      currAlgObj: algData[0],\n      currAlgTab: 0,\n      startNode: [10, 5],\n      finishNode: [10, 45]\n    };\n  }\n\n  componentDidMount() {\n    const grid = renderGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = dijkstra(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra(),\n        children: \"click\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleNav,\n        children: \"show nav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-container\",\n        children: /*#__PURE__*/_jsxDEV(Visualizer, {\n          state: this.state,\n          handleMouseDown: this.handleMouseDown,\n          handleMouseEnter: this.handleMouseEnter,\n          handleMouseUp: this.handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        state: this.state,\n        handleTabs: this.handleTabs,\n        handleItemChange: this.handleItemDescChange,\n        visualizeDijkstra: this.visualizeDijkstra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 26; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 55; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  const startNode = this.state.startNode;\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"names":["React","Component","Visualizer","dijkstra","getNodesInShortestPathOrder","Navbar","itemData","algData","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","MainContainer","constructor","props","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","state","grid","setState","mouseIsPressed","handleMouseEnter","handleMouseUp","handleNav","showNav","handleItemDescChange","e","item","newItem","map","_item","id","currItemDesc","currItemObj","handleTabs","val","currAlgTab","currAlgObj","startNode","finishNode","componentDidMount","renderGrid","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","_startNode","_finishNode","render","currentRow","push","createNode","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithims/dijkstra';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data'\nimport algData from '../data/alg-data'\nimport './mainContainer.css'\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 5;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 45;\n\nexport default class MainContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start',\n            currItemObj: itemData[0],\n            currAlgObj: algData[0],\n            currAlgTab: 0,\n            startNode: [10, 5],\n            finishNode: [10, 45]\n        }\n    }\n\n    componentDidMount() {\n        const grid = renderGrid();\n        this.setState({grid});\n    }\n\n    handleMouseDown = (row, col) => {\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter = (row, col) => {\n        if (!this.state.mouseIsPressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp = () => {\n        this.setState({mouseIsPressed: false});\n    }\n\n    handleNav = () => {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    //navBar functions\n    handleItemDescChange = (e, item) => {\n      var newItem = `${item}`\n      itemData.map((_item) => {\n        if(item === _item.id){this.setState({currItemDesc: newItem, currItemObj: _item})}\n      })\n    }\n\n    handleTabs = (e, val) => {\n      this.setState({currAlgTab: val, currAlgObj: algData[val]})\n    }\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n          if (i === visitedNodesInOrder.length) {\n            setTimeout(() => {\n                this.animateShortestPath(nodesInShortestPathOrder);\n            }, 10 * i);\n            return;\n            }\n          setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n          setTimeout(() => {\n            const node = nodesInShortestPathOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node-shortest-path';\n          }, 50 * i);\n        }\n    }\n    \n    visualizeDijkstra() {\n        const {grid} = this.state;\n        const startNode = this.state.startNode\n        const finishNode = this.state.finishNode\n        const _startNode = grid[startNode[0]][startNode[1]];\n        const _finishNode = grid[finishNode[0]][finishNode[1]];\n        const visitedNodesInOrder = dijkstra(grid, _startNode, _finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n\n    render(){ \n        return(\n            <div className=\"main-container\">\n                <button onClick={() => this.visualizeDijkstra()}>click</button>\n                <button onClick={this.handleNav}>show nav</button>\n                <div className=\"visualizer-container\">\n                    <Visualizer \n                        state={this.state} \n                        handleMouseDown={this.handleMouseDown} \n                        handleMouseEnter={this.handleMouseEnter} \n                        handleMouseUp={this.handleMouseUp}\n                    />\n                </div>\n                <Navbar state={this.state} handleTabs={this.handleTabs} handleItemChange={this.handleItemDescChange} visualizeDijkstra={this.visualizeDijkstra}/>\n            </div>\n        )\n    }\n}\n\nconst renderGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 26; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 55; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\nconst createNode = (col, row) => {\n    const startNode = this.state.startNode\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };"]},"metadata":{},"sourceType":"module"}