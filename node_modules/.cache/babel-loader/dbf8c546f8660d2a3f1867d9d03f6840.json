{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";export function bidirectionalGreedySearch(grid,startNode,finishNode){if(!startNode||!finishNode||startNode===finishNode){return false;}var unvisitedNodesStart=[];var visitedNodesInOrderStart=[];var unvisitedNodesFinish=[];var visitedNodesInOrderFinish=[];startNode.distance=0;finishNode.distance=0;unvisitedNodesStart.push(startNode);unvisitedNodesFinish.push(finishNode);while(unvisitedNodesStart.length!==0&&unvisitedNodesFinish.length!==0){unvisitedNodesStart.sort(function(a,b){return a.totalDistance-b.totalDistance;});unvisitedNodesFinish.sort(function(a,b){return a.totalDistance-b.totalDistance;});var closestNodeStart=unvisitedNodesStart.shift();var closestNodeFinish=unvisitedNodesFinish.shift();closestNodeStart.isVisited=true;closestNodeFinish.isVisited=true;visitedNodesInOrderStart.push(closestNodeStart);visitedNodesInOrderFinish.push(closestNodeFinish);if(isNeighbour(closestNodeStart,closestNodeFinish)){return[visitedNodesInOrderStart,visitedNodesInOrderFinish,true];}//Start side search\nvar neighbours=getNeighbours(closestNodeStart,grid);var _iterator=_createForOfIteratorHelper(neighbours),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var neighbour=_step.value;if(!neighbourNotInUnvisitedNodes(neighbour,unvisitedNodesFinish)){visitedNodesInOrderStart.push(closestNodeStart);visitedNodesInOrderFinish.push(neighbour);return[visitedNodesInOrderStart,visitedNodesInOrderFinish,true];}var distance=closestNodeStart.distance+1;//f(n) = h(n)\nif(neighbourNotInUnvisitedNodes(neighbour,unvisitedNodesStart)){unvisitedNodesStart.unshift(neighbour);neighbour.distance=distance;neighbour.totalDistance=manhattenDistance(neighbour,finishNode);neighbour.previousNode=closestNodeStart;}else if(distance<neighbour.distance){neighbour.distance=distance;neighbour.totalDistance=manhattenDistance(neighbour,finishNode);neighbour.previousNode=closestNodeStart;}}//Finish side search\n}catch(err){_iterator.e(err);}finally{_iterator.f();}neighbours=getNeighbours(closestNodeFinish,grid);var _iterator2=_createForOfIteratorHelper(neighbours),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _neighbour=_step2.value;if(!neighbourNotInUnvisitedNodes(_neighbour,unvisitedNodesStart)){visitedNodesInOrderStart.push(closestNodeFinish);visitedNodesInOrderStart.push(_neighbour);return[visitedNodesInOrderStart,visitedNodesInOrderFinish,true];}var _distance=closestNodeFinish.distance+1;//f(n) = h(n)\nif(neighbourNotInUnvisitedNodes(_neighbour,unvisitedNodesFinish)){unvisitedNodesFinish.unshift(_neighbour);_neighbour.distance=_distance;_neighbour.totalDistance=manhattenDistance(_neighbour,startNode);_neighbour.previousNode=closestNodeFinish;}else if(_distance<_neighbour.distance){_neighbour.distance=_distance;_neighbour.totalDistance=manhattenDistance(_neighbour,startNode);_neighbour.previousNode=closestNodeFinish;}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}return[visitedNodesInOrderStart,visitedNodesInOrderFinish,false];}function isNeighbour(closestNodeStart,closestNodeFinish){var rowStart=closestNodeStart.row;var colStart=closestNodeStart.col;var rowFinish=closestNodeFinish.row;var colFinish=closestNodeFinish.col;if(rowFinish===rowStart-1&&colFinish===colStart)return true;if(rowFinish===rowStart&&colFinish===colStart+1)return true;if(rowFinish===rowStart+1&&colFinish===colStart)return true;if(rowFinish===rowStart&&colFinish===colStart-1)return true;return false;}function getNeighbours(node,grid){var neighbours=[];var row=node.row,col=node.col;if(row!==0)neighbours.push(grid[row-1][col]);if(col!==grid[0].length-1)neighbours.push(grid[row][col+1]);if(row!==grid.length-1)neighbours.push(grid[row+1][col]);if(col!==0)neighbours.push(grid[row][col-1]);return neighbours.filter(function(neighbour){return!neighbour.isWall&&!neighbour.isVisited;});}function manhattenDistance(nodeA,nodeB){var x=Math.abs(nodeA.row-nodeB.row);var y=Math.abs(nodeA.col-nodeB.col);return x+y;}function neighbourNotInUnvisitedNodes(neighbour,unvisitedNodes){var _iterator3=_createForOfIteratorHelper(unvisitedNodes),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var node=_step3.value;if(node.row===neighbour.row&&node.col===neighbour.col){return false;}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}return true;}export function getNodesInShortestPathOrderBidirectionalGreedySearch(nodeA,nodeB){var nodesInShortestPathOrder=[];var currentNode=nodeB;while(currentNode!==null){nodesInShortestPathOrder.push(currentNode);currentNode=currentNode.previousNode;}currentNode=nodeA;while(currentNode!==null){nodesInShortestPathOrder.unshift(currentNode);currentNode=currentNode.previousNode;}return nodesInShortestPathOrder;}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/bidirectionalGreedySearch.js"],"names":["bidirectionalGreedySearch","grid","startNode","finishNode","unvisitedNodesStart","visitedNodesInOrderStart","unvisitedNodesFinish","visitedNodesInOrderFinish","distance","push","length","sort","a","b","totalDistance","closestNodeStart","shift","closestNodeFinish","isVisited","isNeighbour","neighbours","getNeighbours","neighbour","neighbourNotInUnvisitedNodes","unshift","manhattenDistance","previousNode","rowStart","row","colStart","col","rowFinish","colFinish","node","filter","isWall","nodeA","nodeB","x","Math","abs","y","unvisitedNodes","getNodesInShortestPathOrderBidirectionalGreedySearch","nodesInShortestPathOrder","currentNode"],"mappings":"mNAAA,MAAO,SAASA,CAAAA,yBAAT,CAAmCC,IAAnC,CAAyCC,SAAzC,CAAoDC,UAApD,CAAgE,CACnE,GAAI,CAACD,SAAD,EAAc,CAACC,UAAf,EAA6BD,SAAS,GAAKC,UAA/C,CAA2D,CACzD,MAAO,MAAP,CACD,CACD,GAAIC,CAAAA,mBAAmB,CAAG,EAA1B,CACA,GAAIC,CAAAA,wBAAwB,CAAG,EAA/B,CACA,GAAIC,CAAAA,oBAAoB,CAAG,EAA3B,CACA,GAAIC,CAAAA,yBAAyB,CAAG,EAAhC,CACAL,SAAS,CAACM,QAAV,CAAqB,CAArB,CACAL,UAAU,CAACK,QAAX,CAAsB,CAAtB,CACAJ,mBAAmB,CAACK,IAApB,CAAyBP,SAAzB,EACAI,oBAAoB,CAACG,IAArB,CAA0BN,UAA1B,EAEA,MACEC,mBAAmB,CAACM,MAApB,GAA+B,CAA/B,EACAJ,oBAAoB,CAACI,MAArB,GAAgC,CAFlC,CAGE,CACAN,mBAAmB,CAACO,IAApB,CAAyB,SAACC,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAACE,aAAF,CAAkBD,CAAC,CAACC,aAA9B,EAAzB,EACAR,oBAAoB,CAACK,IAArB,CAA0B,SAACC,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAACE,aAAF,CAAkBD,CAAC,CAACC,aAA9B,EAA1B,EACA,GAAIC,CAAAA,gBAAgB,CAAGX,mBAAmB,CAACY,KAApB,EAAvB,CACA,GAAIC,CAAAA,iBAAiB,CAAGX,oBAAoB,CAACU,KAArB,EAAxB,CAEAD,gBAAgB,CAACG,SAAjB,CAA6B,IAA7B,CACAD,iBAAiB,CAACC,SAAlB,CAA8B,IAA9B,CACAb,wBAAwB,CAACI,IAAzB,CAA8BM,gBAA9B,EACAR,yBAAyB,CAACE,IAA1B,CAA+BQ,iBAA/B,EACA,GAAIE,WAAW,CAACJ,gBAAD,CAAmBE,iBAAnB,CAAf,CAAsD,CACpD,MAAO,CAACZ,wBAAD,CAA2BE,yBAA3B,CAAsD,IAAtD,CAAP,CACD,CAED;AACA,GAAIa,CAAAA,UAAU,CAAGC,aAAa,CAACN,gBAAD,CAAmBd,IAAnB,CAA9B,CAfA,yCAgBsBmB,UAhBtB,YAgBA,+CAAkC,IAAzBE,CAAAA,SAAyB,aAChC,GAAI,CAACC,4BAA4B,CAACD,SAAD,CAAYhB,oBAAZ,CAAjC,CAAoE,CAClED,wBAAwB,CAACI,IAAzB,CAA8BM,gBAA9B,EACAR,yBAAyB,CAACE,IAA1B,CAA+Ba,SAA/B,EACA,MAAO,CAACjB,wBAAD,CAA2BE,yBAA3B,CAAsD,IAAtD,CAAP,CACD,CACD,GAAIC,CAAAA,QAAQ,CAAGO,gBAAgB,CAACP,QAAjB,CAA4B,CAA3C,CACA;AACA,GAAIe,4BAA4B,CAACD,SAAD,CAAYlB,mBAAZ,CAAhC,CAAkE,CAChEA,mBAAmB,CAACoB,OAApB,CAA4BF,SAA5B,EACAA,SAAS,CAACd,QAAV,CAAqBA,QAArB,CACAc,SAAS,CAACR,aAAV,CAA0BW,iBAAiB,CAACH,SAAD,CAAYnB,UAAZ,CAA3C,CACAmB,SAAS,CAACI,YAAV,CAAyBX,gBAAzB,CACD,CALD,IAKO,IAAIP,QAAQ,CAAGc,SAAS,CAACd,QAAzB,CAAmC,CACxCc,SAAS,CAACd,QAAV,CAAqBA,QAArB,CACAc,SAAS,CAACR,aAAV,CAA0BW,iBAAiB,CAACH,SAAD,CAAYnB,UAAZ,CAA3C,CACAmB,SAAS,CAACI,YAAV,CAAyBX,gBAAzB,CACD,CACF,CAED;AApCA,qDAqCAK,UAAU,CAAGC,aAAa,CAACJ,iBAAD,CAAoBhB,IAApB,CAA1B,CArCA,0CAsCsBmB,UAtCtB,aAsCA,kDAAkC,IAAzBE,CAAAA,UAAyB,cAChC,GAAI,CAACC,4BAA4B,CAACD,UAAD,CAAYlB,mBAAZ,CAAjC,CAAmE,CACjEC,wBAAwB,CAACI,IAAzB,CAA8BQ,iBAA9B,EACAZ,wBAAwB,CAACI,IAAzB,CAA8Ba,UAA9B,EACA,MAAO,CAACjB,wBAAD,CAA2BE,yBAA3B,CAAsD,IAAtD,CAAP,CACD,CACD,GAAIC,CAAAA,SAAQ,CAAGS,iBAAiB,CAACT,QAAlB,CAA6B,CAA5C,CACA;AACA,GAAIe,4BAA4B,CAACD,UAAD,CAAYhB,oBAAZ,CAAhC,CAAmE,CACjEA,oBAAoB,CAACkB,OAArB,CAA6BF,UAA7B,EACAA,UAAS,CAACd,QAAV,CAAqBA,SAArB,CACAc,UAAS,CAACR,aAAV,CAA0BW,iBAAiB,CAACH,UAAD,CAAYpB,SAAZ,CAA3C,CACAoB,UAAS,CAACI,YAAV,CAAyBT,iBAAzB,CACD,CALD,IAKO,IAAIT,SAAQ,CAAGc,UAAS,CAACd,QAAzB,CAAmC,CACxCc,UAAS,CAACd,QAAV,CAAqBA,SAArB,CACAc,UAAS,CAACR,aAAV,CAA0BW,iBAAiB,CAACH,UAAD,CAAYpB,SAAZ,CAA3C,CACAoB,UAAS,CAACI,YAAV,CAAyBT,iBAAzB,CACD,CACF,CAxDD,uDAyDD,CACD,MAAO,CAACZ,wBAAD,CAA2BE,yBAA3B,CAAsD,KAAtD,CAAP,CACD,CAED,QAASY,CAAAA,WAAT,CAAqBJ,gBAArB,CAAuCE,iBAAvC,CAA0D,CACxD,GAAIU,CAAAA,QAAQ,CAAGZ,gBAAgB,CAACa,GAAhC,CACA,GAAIC,CAAAA,QAAQ,CAAGd,gBAAgB,CAACe,GAAhC,CACA,GAAIC,CAAAA,SAAS,CAAGd,iBAAiB,CAACW,GAAlC,CACA,GAAII,CAAAA,SAAS,CAAGf,iBAAiB,CAACa,GAAlC,CACA,GAAIC,SAAS,GAAKJ,QAAQ,CAAG,CAAzB,EAA8BK,SAAS,GAAKH,QAAhD,CAA0D,MAAO,KAAP,CAC1D,GAAIE,SAAS,GAAKJ,QAAd,EAA0BK,SAAS,GAAKH,QAAQ,CAAG,CAAvD,CAA0D,MAAO,KAAP,CAC1D,GAAIE,SAAS,GAAKJ,QAAQ,CAAG,CAAzB,EAA8BK,SAAS,GAAKH,QAAhD,CAA0D,MAAO,KAAP,CAC1D,GAAIE,SAAS,GAAKJ,QAAd,EAA0BK,SAAS,GAAKH,QAAQ,CAAG,CAAvD,CAA0D,MAAO,KAAP,CAC1D,MAAO,MAAP,CACD,CAED,QAASR,CAAAA,aAAT,CAAuBY,IAAvB,CAA6BhC,IAA7B,CAAmC,CACjC,GAAImB,CAAAA,UAAU,CAAG,EAAjB,CADiC,GAE3BQ,CAAAA,GAF2B,CAEdK,IAFc,CAE3BL,GAF2B,CAEtBE,GAFsB,CAEdG,IAFc,CAEtBH,GAFsB,CAGjC,GAAIF,GAAG,GAAK,CAAZ,CAAeR,UAAU,CAACX,IAAX,CAAgBR,IAAI,CAAC2B,GAAG,CAAG,CAAP,CAAJ,CAAcE,GAAd,CAAhB,EACf,GAAIA,GAAG,GAAK7B,IAAI,CAAC,CAAD,CAAJ,CAAQS,MAAR,CAAiB,CAA7B,CAAgCU,UAAU,CAACX,IAAX,CAAgBR,IAAI,CAAC2B,GAAD,CAAJ,CAAUE,GAAG,CAAG,CAAhB,CAAhB,EAChC,GAAIF,GAAG,GAAK3B,IAAI,CAACS,MAAL,CAAc,CAA1B,CAA6BU,UAAU,CAACX,IAAX,CAAgBR,IAAI,CAAC2B,GAAG,CAAG,CAAP,CAAJ,CAAcE,GAAd,CAAhB,EAC7B,GAAIA,GAAG,GAAK,CAAZ,CAAeV,UAAU,CAACX,IAAX,CAAgBR,IAAI,CAAC2B,GAAD,CAAJ,CAAUE,GAAG,CAAG,CAAhB,CAAhB,EACf,MAAOV,CAAAA,UAAU,CAACc,MAAX,CACL,SAACZ,SAAD,QAAe,CAACA,SAAS,CAACa,MAAX,EAAqB,CAACb,SAAS,CAACJ,SAA/C,EADK,CAAP,CAGD,CAED,QAASO,CAAAA,iBAAT,CAA2BW,KAA3B,CAAkCC,KAAlC,CAAyC,CACvC,GAAIC,CAAAA,CAAC,CAAGC,IAAI,CAACC,GAAL,CAASJ,KAAK,CAACR,GAAN,CAAYS,KAAK,CAACT,GAA3B,CAAR,CACA,GAAIa,CAAAA,CAAC,CAAGF,IAAI,CAACC,GAAL,CAASJ,KAAK,CAACN,GAAN,CAAYO,KAAK,CAACP,GAA3B,CAAR,CACA,MAAOQ,CAAAA,CAAC,CAAGG,CAAX,CACD,CAED,QAASlB,CAAAA,4BAAT,CAAsCD,SAAtC,CAAiDoB,cAAjD,CAAiE,2CAC9CA,cAD8C,aAC/D,kDAAiC,IAAxBT,CAAAA,IAAwB,cAC/B,GAAIA,IAAI,CAACL,GAAL,GAAaN,SAAS,CAACM,GAAvB,EAA8BK,IAAI,CAACH,GAAL,GAAaR,SAAS,CAACQ,GAAzD,CAA8D,CAC5D,MAAO,MAAP,CACD,CACF,CAL8D,uDAM/D,MAAO,KAAP,CACD,CAED,MAAO,SAASa,CAAAA,oDAAT,CACLP,KADK,CAELC,KAFK,CAGL,CACA,GAAIO,CAAAA,wBAAwB,CAAG,EAA/B,CACA,GAAIC,CAAAA,WAAW,CAAGR,KAAlB,CACA,MAAOQ,WAAW,GAAK,IAAvB,CAA6B,CAC3BD,wBAAwB,CAACnC,IAAzB,CAA8BoC,WAA9B,EACAA,WAAW,CAAGA,WAAW,CAACnB,YAA1B,CACD,CACDmB,WAAW,CAAGT,KAAd,CACA,MAAOS,WAAW,GAAK,IAAvB,CAA6B,CAC3BD,wBAAwB,CAACpB,OAAzB,CAAiCqB,WAAjC,EACAA,WAAW,CAAGA,WAAW,CAACnB,YAA1B,CACD,CACD,MAAOkB,CAAAA,wBAAP,CACD","sourcesContent":["export function bidirectionalGreedySearch(grid, startNode, finishNode) {\n    if (!startNode || !finishNode || startNode === finishNode) {\n      return false;\n    }\n    let unvisitedNodesStart = [];\n    let visitedNodesInOrderStart = [];\n    let unvisitedNodesFinish = [];\n    let visitedNodesInOrderFinish = [];\n    startNode.distance = 0;\n    finishNode.distance = 0;\n    unvisitedNodesStart.push(startNode);\n    unvisitedNodesFinish.push(finishNode);\n  \n    while (\n      unvisitedNodesStart.length !== 0 &&\n      unvisitedNodesFinish.length !== 0\n    ) {\n      unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance);\n      unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance);\n      let closestNodeStart = unvisitedNodesStart.shift();\n      let closestNodeFinish = unvisitedNodesFinish.shift();\n  \n      closestNodeStart.isVisited = true;\n      closestNodeFinish.isVisited = true;\n      visitedNodesInOrderStart.push(closestNodeStart);\n      visitedNodesInOrderFinish.push(closestNodeFinish);\n      if (isNeighbour(closestNodeStart, closestNodeFinish)) {\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n      }\n  \n      //Start side search\n      let neighbours = getNeighbours(closestNodeStart, grid);\n      for (let neighbour of neighbours) {\n        if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n          visitedNodesInOrderStart.push(closestNodeStart);\n          visitedNodesInOrderFinish.push(neighbour);\n          return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n        }\n        let distance = closestNodeStart.distance + 1;\n        //f(n) = h(n)\n        if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n          unvisitedNodesStart.unshift(neighbour);\n          neighbour.distance = distance;\n          neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n          neighbour.previousNode = closestNodeStart;\n        } else if (distance < neighbour.distance) {\n          neighbour.distance = distance;\n          neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n          neighbour.previousNode = closestNodeStart;\n        }\n      }\n  \n      //Finish side search\n      neighbours = getNeighbours(closestNodeFinish, grid);\n      for (let neighbour of neighbours) {\n        if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n          visitedNodesInOrderStart.push(closestNodeFinish);\n          visitedNodesInOrderStart.push(neighbour);\n          return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n        }\n        let distance = closestNodeFinish.distance + 1;\n        //f(n) = h(n)\n        if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n          unvisitedNodesFinish.unshift(neighbour);\n          neighbour.distance = distance;\n          neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n          neighbour.previousNode = closestNodeFinish;\n        } else if (distance < neighbour.distance) {\n          neighbour.distance = distance;\n          neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n          neighbour.previousNode = closestNodeFinish;\n        }\n      }\n    }\n    return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false];\n  }\n  \n  function isNeighbour(closestNodeStart, closestNodeFinish) {\n    let rowStart = closestNodeStart.row;\n    let colStart = closestNodeStart.col;\n    let rowFinish = closestNodeFinish.row;\n    let colFinish = closestNodeFinish.col;\n    if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\n    if (rowFinish === rowStart && colFinish === colStart + 1) return true;\n    if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\n    if (rowFinish === rowStart && colFinish === colStart - 1) return true;\n    return false;\n  }\n  \n  function getNeighbours(node, grid) {\n    let neighbours = [];\n    let { row, col } = node;\n    if (row !== 0) neighbours.push(grid[row - 1][col]);\n    if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n    if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n    if (col !== 0) neighbours.push(grid[row][col - 1]);\n    return neighbours.filter(\n      (neighbour) => !neighbour.isWall && !neighbour.isVisited\n    );\n  }\n  \n  function manhattenDistance(nodeA, nodeB) {\n    let x = Math.abs(nodeA.row - nodeB.row);\n    let y = Math.abs(nodeA.col - nodeB.col);\n    return x + y;\n  }\n  \n  function neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n    for (let node of unvisitedNodes) {\n      if (node.row === neighbour.row && node.col === neighbour.col) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  export function getNodesInShortestPathOrderBidirectionalGreedySearch(\n    nodeA,\n    nodeB\n  ) {\n    let nodesInShortestPathOrder = [];\n    let currentNode = nodeB;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.push(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    currentNode = nodeA;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }"]},"metadata":{},"sourceType":"module"}