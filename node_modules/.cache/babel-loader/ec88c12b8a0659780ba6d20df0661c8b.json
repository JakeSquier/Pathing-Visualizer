{"ast":null,"code":"export function dijkstra(grid, startNode, finishNode, stopNode) {\n  const visitedNodesInOrder = [];\n  const unvisitedNodes = getAllNodes(grid);\n  var pos = stopNode[0] ? 0 : 1;\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift(); //skips iteration because is a wall\n\n    if (closestNode.isWall) continue; //if the closest node has a distance of infinity were trapped\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode); //checking to see if closest node is destination\n\n    if (closestNode === finishNode) return visitedNodesInOrder; //\n\n    console.log(closestNode);\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    return nodeA.distance - nodeB.distance;\n  });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode, isStop = false) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    if (isStop && currentNode.isTarget === true) break; //console.log(currentNode, currentNode !== null)\n\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","stopNode","visitedNodesInOrder","unvisitedNodes","getAllNodes","pos","length","sortNodesByDistance","closestNode","shift","isWall","distance","Infinity","isVisited","push","console","log","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","filter","nodes","getNodesInShortestPathOrder","isStop","nodesInShortestPathOrder","currentNode","isTarget","unshift"],"mappings":"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","sourcesContent":["\nexport function dijkstra(grid, startNode, finishNode, stopNode){\n    const visitedNodesInOrder = [];\n    const unvisitedNodes = getAllNodes(grid)\n    var pos = stopNode[0] ? 0 : 1\n      while(!!unvisitedNodes.length){\n          sortNodesByDistance(unvisitedNodes)\n          const closestNode = unvisitedNodes.shift();\n          //skips iteration because is a wall\n          if (closestNode.isWall) continue;\n          //if the closest node has a distance of infinity were trapped\n          if (closestNode.distance === Infinity) return visitedNodesInOrder;\n          closestNode.isVisited = true;\n          visitedNodesInOrder.push(closestNode);\n          //checking to see if closest node is destination\n          if (closestNode === finishNode) return visitedNodesInOrder;\n          //\n          console.log(closestNode)\n          updateUnvisitedNeighbors(closestNode, grid);\n      }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => {\n      \n      return nodeA.distance - nodeB.distance\n    });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode, isStop=false) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      if(isStop && currentNode.isTarget===true) break;\n      //console.log(currentNode, currentNode !== null)\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"]},"metadata":{},"sourceType":"module"}