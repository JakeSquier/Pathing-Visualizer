{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n    const grid = message.data[0];\n    const startNode = message.data[1];\n    const finishNode = message.data[2];\n    const stopNode = message.data[3];\n    console.log(message);\n    const visitedNodesInorder = this.dijkstra(grid, startNode, finishNode, stopNode);\n    postMessage(visitedNodesInorder);\n  });\n});\nexport function dijkstra(grid, startNode, finishNode) {\n  let stopNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  //setting up stop var to determine what to do\n  var isStop;\n\n  if (stopNode === false) {\n    isStop = false;\n  } else {\n    isStop = true;\n  }\n\n  if (!isStop) {\n    const visitedNodesInOrder = []; //grabbing all nodes\n\n    var unvisitedNodes = getAllNodes(grid); //setting node distances\n\n    unvisitedNodes.forEach(node => {\n      if (node === startNode) {\n        node.distance = 0;\n      } else {\n        node.distance = Infinity;\n      }\n    }); //starting algorithim\n\n    while (!!unvisitedNodes) {\n      sortNodesByDistance(unvisitedNodes, false);\n      const closestNode = unvisitedNodes.shift(); //checking if current node is a wall\n\n      if (closestNode.isWall) continue; //checking if node has no where to venture to\n\n      if (closestNode.distance === Infinity) return visitedNodesInOrder; //update current node as visited then pushing it to visitednodes array\n\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode); //checking to see is closest node is the finishnode\n\n      if (closestNode === finishNode) return visitedNodesInOrder; //get current nodes neighbors\n\n      updateUnvisitedNeighbors(closestNode, grid, false);\n    }\n  } else if (isStop) {\n    //going to repeat normal function yet twice for stop\n    const visitedNodesInOrder = [[], []]; //grabbing all nodes\n\n    var unvisitedNodes = getAllNodes(grid);\n    var unvisitedNodesSecond = getAllNodes(grid);\n    unvisitedNodes.forEach(node => {\n      if (node === startNode) {\n        node.distance = 0;\n      } else if (node === stopNode) {\n        node.distanceSecond = 0;\n      } else {\n        node.distance = Infinity;\n        node.distanceSecond = Infinity;\n      }\n    }); //getting path from start to stop\n\n    while (!!unvisitedNodes) {\n      sortNodesByDistance(unvisitedNodes, false);\n      const closestNode = unvisitedNodes.shift(); //checking if current node is a wall\n\n      if (closestNode.isWall) continue; //checking if node has no where to venture to\n\n      if (closestNode.distance === Infinity) break; //update current node as visited then pushing it to visitednodes array\n\n      closestNode.isVisited = true;\n      visitedNodesInOrder[0].push(closestNode); //checking to see is closest node is the finishnode\n\n      if (closestNode === stopNode) break; //get current nodes neighbors\n\n      updateUnvisitedNeighbors(closestNode, grid, false);\n    } //getting path from stop to finish\n\n\n    var cout = 0;\n\n    while (!!unvisitedNodesSecond) {\n      cout++;\n      setTimeout(() => sortNodesByDistance(unvisitedNodesSecond, true));\n      const closestNode = unvisitedNodesSecond.shift();\n      if (closestNode.isWall) continue;\n      if (closestNode.distanceSecond === Infinity) break;\n      closestNode.isVisitedSecond = true;\n      visitedNodesInOrder[1].push(closestNode);\n      if (closestNode === finishNode) break;\n      updateUnvisitedNeighbors(closestNode, grid, true);\n    }\n\n    return visitedNodesInOrder;\n  }\n} // var cout = 0\n// export function dijkstra(grid, startNode, finishNode, isStop=false, waitTime=0){\n//   cout++\n//   const visitedNodesInOrder = [];\n//   var unvisitedNodes = getAllNodes(grid)\n//   //testing to see if visitation is removed\n//   unvisitedNodes.forEach((node) => {\n//     if(node === startNode){\n//       //node.distance = 0\n//       isStop ? node.distanceSecond = 0 : node.distance = 0\n//       console.log(node, node.distance, node.distanceSecond, cout, isStop)\n//     } else {\n//       isStop ? node.distanceSecond = Infinity : node.distance = Infinity\n//     }\n//   })\n//   console.log(isStop, cout)\n//   var cout2 =0\n//   while(!!unvisitedNodes){\n//       sortNodesByDistance(unvisitedNodes, isStop)\n//       const closestNode = unvisitedNodes.shift();\n//       if(closestNode.isWall) continue;\n//       if(closestNode.distance === Infinity && isStop === false) {\n//         return visitedNodesInOrder;\n//       } else if(closestNode.distanceSecond === Infinity && cout===2) {\n//         return visitedNodesInOrder\n//       }\n//       isStop ? closestNode.isVisitedSecond = true : closestNode.isVisited = true\n//       visitedNodesInOrder.push(closestNode);\n//       if(closestNode === finishNode) return visitedNodesInOrder;\n//       updateUnvisitedNeighbors(closestNode, grid, isStop);\n//   }\n// }\n\nfunction sortNodesByDistance(unvisitedNodes, isStop) {\n  //it is not calculating second distace correctly stays at infinity\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    if (isStop === true) {\n      //console.log(cout, nodeA.distanceSecond - nodeB.distanceSecond)\n      return nodeA.distanceSecond - nodeB.distanceSecond;\n    } else if (isStop === false) {\n      //console.log(cout, nodeA.distance - nodeB.distance)\n      return nodeA.distance - nodeB.distance;\n    }\n  });\n  var distanceCheck = [];\n\n  if (isStop) {\n    unvisitedNodes.forEach(node => {\n      if (node.distanceSecond != Infinity) distanceCheck.push(node);\n    }); //console.log(distanceCheck)\n  } //console.log(unvisitedNodes, cout)\n\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isStop) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n\n  for (const neighbor of unvisitedNeighbors) {\n    //neighbor.distance = node.distance + 1;\n    isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid, isStop) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => {\n    //isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited\n    if (isStop === true) {\n      return !neighbor.isVisitedSecond;\n    } else if (isStop === false) {\n      return !neighbor.isVisited;\n    }\n  });\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  let stop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  if (stop != false) {\n    while (true) {\n      if (currentNode.isStop != null) {\n        break;\n      }\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  } else if (stop == false) {\n    while (currentNode !== null) {\n      // if(currentNode.isStart===true) break;\n      if (currentNode.isStart == true) break; //console.log(currentNode, currentNode !== null)\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  }\n}","map":{"version":3,"names":["self","addEventListener","message","grid","data","startNode","finishNode","stopNode","console","log","visitedNodesInorder","dijkstra","postMessage","isStop","visitedNodesInOrder","unvisitedNodes","getAllNodes","forEach","node","distance","Infinity","sortNodesByDistance","closestNode","shift","isWall","isVisited","push","updateUnvisitedNeighbors","unvisitedNodesSecond","distanceSecond","cout","setTimeout","isVisitedSecond","sort","nodeA","nodeB","distanceCheck","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","length","filter","nodes","getNodesInShortestPathOrder","stop","nodesInShortestPathOrder","currentNode","unshift","isStart"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/dijkstraWorker.js"],"sourcesContent":["\n// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n      if (!message) return;\n\n        const grid = message.data[0]\n        const startNode = message.data[1]\n        const finishNode = message.data[2]\n        const stopNode = message.data[3]\n        console.log(message)\n        const visitedNodesInorder = this.dijkstra(grid, startNode, finishNode, stopNode)\n  \n      postMessage(visitedNodesInorder);\n    });\n};\n\nexport function dijkstra(grid, startNode, finishNode, stopNode=false){\n    //setting up stop var to determine what to do\n    var isStop;\n    if(stopNode===false){\n      isStop = false\n    } else {\n      isStop = true\n    }\n    if(!isStop){\n      const visitedNodesInOrder = []\n      //grabbing all nodes\n      var unvisitedNodes = getAllNodes(grid)\n  \n      //setting node distances\n      unvisitedNodes.forEach((node) => {\n        if(node === startNode){\n          node.distance = 0\n        } else {\n          node.distance = Infinity\n        }\n      })\n  \n      //starting algorithim\n      while(!!unvisitedNodes){\n        sortNodesByDistance(unvisitedNodes, false)\n        const closestNode = unvisitedNodes.shift()\n  \n        //checking if current node is a wall\n        if(closestNode.isWall) continue\n  \n        //checking if node has no where to venture to\n        if(closestNode.distance === Infinity) return visitedNodesInOrder\n  \n        //update current node as visited then pushing it to visitednodes array\n        closestNode.isVisited = true\n        visitedNodesInOrder.push(closestNode)\n  \n        //checking to see is closest node is the finishnode\n        if(closestNode === finishNode) return visitedNodesInOrder\n  \n        //get current nodes neighbors\n        updateUnvisitedNeighbors(closestNode, grid, false);\n      }\n    } else if(isStop){\n      //going to repeat normal function yet twice for stop\n      const visitedNodesInOrder = [[],[]]\n      //grabbing all nodes\n      var unvisitedNodes = getAllNodes(grid)\n  \n      var unvisitedNodesSecond = getAllNodes(grid)\n  \n      unvisitedNodes.forEach((node) => {\n        if(node === startNode){\n          node.distance = 0\n        } else if(node === stopNode) {\n          node.distanceSecond = 0\n        } else {\n          node.distance = Infinity\n          node.distanceSecond = Infinity\n        }\n      })\n  \n      //getting path from start to stop\n      while(!!unvisitedNodes) {\n        sortNodesByDistance(unvisitedNodes, false)\n        const closestNode = unvisitedNodes.shift()\n  \n        //checking if current node is a wall\n        if(closestNode.isWall) continue\n  \n        //checking if node has no where to venture to\n        if(closestNode.distance === Infinity) break\n  \n        //update current node as visited then pushing it to visitednodes array\n        closestNode.isVisited = true\n        visitedNodesInOrder[0].push(closestNode)\n  \n        //checking to see is closest node is the finishnode\n        if(closestNode === stopNode) break\n  \n        //get current nodes neighbors\n        updateUnvisitedNeighbors(closestNode, grid, false);\n      }\n      \n      //getting path from stop to finish\n      var cout = 0\n      while(!!unvisitedNodesSecond) {\n        cout++\n        setTimeout(\n          () => sortNodesByDistance(unvisitedNodesSecond, true),\n        )\n        const closestNode = unvisitedNodesSecond.shift()\n  \n        if(closestNode.isWall) continue\n  \n        if(closestNode.distanceSecond === Infinity) break\n  \n        closestNode.isVisitedSecond = true\n        visitedNodesInOrder[1].push(closestNode)\n  \n        if(closestNode === finishNode) break\n  \n        updateUnvisitedNeighbors(closestNode, grid, true)\n      }\n      return visitedNodesInOrder\n    }\n  }\n  // var cout = 0\n  // export function dijkstra(grid, startNode, finishNode, isStop=false, waitTime=0){\n  //   cout++\n  //   const visitedNodesInOrder = [];\n  //   var unvisitedNodes = getAllNodes(grid)\n  //   //testing to see if visitation is removed\n  \n  //   unvisitedNodes.forEach((node) => {\n  //     if(node === startNode){\n  //       //node.distance = 0\n  //       isStop ? node.distanceSecond = 0 : node.distance = 0\n  //       console.log(node, node.distance, node.distanceSecond, cout, isStop)\n  //     } else {\n  //       isStop ? node.distanceSecond = Infinity : node.distance = Infinity\n  //     }\n  //   })\n  //   console.log(isStop, cout)\n  //   var cout2 =0\n  //   while(!!unvisitedNodes){\n  //       sortNodesByDistance(unvisitedNodes, isStop)\n  //       const closestNode = unvisitedNodes.shift();\n  \n  //       if(closestNode.isWall) continue;\n  \n  //       if(closestNode.distance === Infinity && isStop === false) {\n  //         return visitedNodesInOrder;\n  //       } else if(closestNode.distanceSecond === Infinity && cout===2) {\n  //         return visitedNodesInOrder\n  //       }\n  \n  //       isStop ? closestNode.isVisitedSecond = true : closestNode.isVisited = true\n  //       visitedNodesInOrder.push(closestNode);\n  \n  //       if(closestNode === finishNode) return visitedNodesInOrder;\n  \n  //       updateUnvisitedNeighbors(closestNode, grid, isStop);\n  //   }\n  // }\n  \n  function sortNodesByDistance(unvisitedNodes, isStop) {\n      //it is not calculating second distace correctly stays at infinity\n      unvisitedNodes.sort((nodeA, nodeB) => {\n        if(isStop===true) {\n          //console.log(cout, nodeA.distanceSecond - nodeB.distanceSecond)\n          return nodeA.distanceSecond - nodeB.distanceSecond\n        } else if(isStop===false) {\n          //console.log(cout, nodeA.distance - nodeB.distance)\n          return nodeA.distance - nodeB.distance\n        }\n      });\n      var distanceCheck = []\n      if(isStop){\n        unvisitedNodes.forEach((node) => {\n          if(node.distanceSecond != Infinity) distanceCheck.push(node)\n        })\n        //console.log(distanceCheck)\n      }\n      //console.log(unvisitedNodes, cout)\n  }\n  \n  function updateUnvisitedNeighbors(node, grid, isStop) {\n      const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n      for (const neighbor of unvisitedNeighbors) {\n        //neighbor.distance = node.distance + 1;\n        isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n  \n        neighbor.previousNode = node;\n      }\n  }\n    \n  function getUnvisitedNeighbors(node, grid, isStop) {\n      const neighbors = [];\n      const {col, row} = node;\n      if (row > 0) neighbors.push(grid[row - 1][col]);\n      if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n      if (col > 0) neighbors.push(grid[row][col - 1]);\n      if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n      return neighbors.filter((neighbor) => {\n        //isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited\n        if(isStop===true){\n          return !neighbor.isVisitedSecond\n        } else if(isStop===false){\n          return !neighbor.isVisited\n        }\n      });\n  }\n  \n  function getAllNodes(grid) {\n      const nodes = [];\n      for (const row of grid) {\n        for (const node of row) {\n          nodes.push(node);\n        }\n      }\n      return nodes;\n  }\n  \n  // Backtracks from the finishNode to find the shortest path.\n  // Only works when called *after* the dijkstra method above.\n  export function getNodesInShortestPathOrder(finishNode, stop=false) {\n      const nodesInShortestPathOrder = [];\n      let currentNode = finishNode;\n      if(stop!=false){\n        while (true){\n  \n          if(currentNode.isStop!=null){\n            break\n          }\n          nodesInShortestPathOrder.unshift(currentNode);\n          currentNode = currentNode.previousNode;\n        }\n        return nodesInShortestPathOrder;\n      }else if(stop==false){\n        while (currentNode !== null) {\n          // if(currentNode.isStart===true) break;\n          if(currentNode.isStart==true) break;\n          //console.log(currentNode, currentNode !== null)\n          nodesInShortestPathOrder.unshift(currentNode);\n          currentNode = currentNode.previousNode;\n        }\n        return nodesInShortestPathOrder;\n      }\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}