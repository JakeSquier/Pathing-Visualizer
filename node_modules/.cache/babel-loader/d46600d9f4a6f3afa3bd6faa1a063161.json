{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\";\nimport React, { Component, useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { getNodesInShortestPathOrder } from '../workers/dijkstraWorker';\nimport { aStar } from '../algorithims/aStar';\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport NavTop from './navComponents/topNav';\nimport itemData from '../data/item-data';\nimport algData from '../data/alg-data';\nimport pathGrabWorker from '../workers/pathGrabWorker';\nimport _dijkstraWorker from \"../workers/dijkstraWorker\";\nimport aStarWorker from '../workers/aStarWorker';\nimport greedyBestFirstSearchWorker from '../workers/greedyBestFirstSearchWorker';\nimport breadthFirstSearchWorker from '../workers/breadthFirstSearchWorker';\nimport depthFirstSearchWorker from '../workers/depthFirstSearchWorker';\nimport WebWorker from \"../workers/workerSetup\";\nimport './mainContainer.css';\nimport { Message } from '@material-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar maxProgressVal = 100;\nvar currProgressVal = 0;\nexport default class MainContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleWindowResize = () => {\n      console.log('changing');\n    };\n\n    this.handleMouseDown = (row, col) => {\n      var newGrid = this.state.grid;\n\n      if (this.state.grid[row][col].isStart) {\n        this.setState({\n          startIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.grid[row][col].isFinish) {\n        this.setState({\n          finishIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        this.setState({\n          stopIsMoving: true,\n          isThereStop: true\n        });\n      }\n\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n\n    this.handleMouseEnter = (row, col) => {\n      if (!this.state.mouseIsPressed) return;\n      var newGrid = this.state.grid;\n\n      if (this.state.startIsMoving) {\n        newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode);\n        this.setState({\n          startNode: [row, col]\n        });\n      } else if (this.state.finishIsMoving) {\n        newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode);\n        this.setState({\n          finishNode: [row, col]\n        });\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n      } else if (this.state.currItemDesc === 'Stop') {\n        newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n        this.setState({\n          prevStop: [row, col]\n        });\n      }\n\n      this.setState({\n        grid: newGrid\n      });\n    };\n\n    this.handleMouseUp = (row, col) => {\n      this.setState({\n        mouseIsPressed: false,\n        startIsMoving: false,\n        finishIsMoving: false\n      });\n    };\n\n    this.handleNav = () => {\n      this.setState({\n        showNav: !this.state.showNav\n      });\n    };\n\n    this.handleItemDescChange = (e, item) => {\n      var newItem = `${item}`;\n      itemData.map(_item => {\n        if (item === _item.id) {\n          this.setState({\n            currItemDesc: newItem,\n            currItemObj: _item\n          });\n        }\n      });\n    };\n\n    this.handleTabs = (e, val) => {\n      this.setState({\n        currAlgTab: val,\n        currAlgObj: algData[val]\n      });\n    };\n\n    this.handleMazeTabs = (e, val) => {\n      this.setState({\n        currMazeTab: val\n      });\n      console.log(val);\n    };\n\n    this.handleSpeedTabs = (e, val) => {\n      console.log(e, val);\n      this.setState({\n        animationSpeed: val\n      });\n    };\n\n    this.generateMaze = e => {\n      var currAlg = this.state.currMazeTab;\n\n      if (currAlg === 0) {\n        this.generateRecursiveDivisionMaze();\n      } else if (currAlg === 1) {\n        this.generateVerticalMaze();\n      } else if (currAlg === 2) {\n        this.generateHorizontalMaze();\n      } else if (currAlg === 3) {\n        this.generateRandomMaze();\n      }\n    };\n\n    this.resetGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      document.getElementsByClassName('progress')[0].style.width = '0%';\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = this.state.grid;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n      const stopNode = this.state.isThereStop ? this.state.prevStop : false;\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if (row === startNode[0] && col === startNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if (row === finishNode[0] && col === finishNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else if (stopNode !== false && row === stopNode[0] && col === stopNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-stop\";\n          } else if (grid[row][col].isWall) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-wall\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n\n      const newGrid = getGridWithoutPath(this.state.grid, true);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false\n      });\n    };\n\n    this.clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      document.getElementsByClassName('progress')[0].style.width = '0%';\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = this.state.grid;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if (row === startNode[0] && col === startNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if (row === finishNode[0] && col === finishNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n        prevStop: [],\n        isThereStop: false\n      });\n    };\n\n    this.playAnimation = e => {\n      var currAlg = this.state.currAlgObj.id;\n      this.setState({\n        prevStart: this.state.startNode,\n        prevFinish: this.state.finishNode,\n        prevAlg: this.state.AlgObj\n      });\n\n      if (currAlg === 0) {\n        this.visualizeDijkstra();\n      } else if (currAlg === 1) {\n        this.visualizeaStar();\n      } else if (currAlg === 4) {\n        this.visualizbfs();\n      } else if (currAlg === 2) {\n        this.visualizegbfs();\n      } else if (currAlg === 5) {\n        this.visualizedfs();\n      } else if (currAlg === 3) {\n        this.visualizeBidirectionalGreedySearch();\n      }\n\n      return;\n    };\n\n    this.visualizeDijkstra = () => {\n      this.dijkstraWorker = new WebWorker(_dijkstraWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        var nodesInShortestPathOrder = [];\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.dijkstraWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                console.log(messageTwo);\n                this.animateDijkstra(message.data[0], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop);\n                setTimeout(this.animateDijkstra, message.data[0].length * this.state.animationSpeed, message.data[1], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, false]);\n        this.dijkstraWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            this.animateDijkstra(message.data, messageTwo.data, message.data.length, this.state.animationSpeed, this.state.isThereStop);\n          });\n        });\n      }\n    };\n\n    this.animateMaze = walls => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({\n              grid: newGrid,\n              generatingMaze: false\n            });\n          }, i * 10);\n          return;\n        }\n\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true;\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      showNav: false,\n      currItemDesc: 'Start',\n      currItemObj: itemData[0],\n      currAlgObj: algData[0],\n      currAlgTab: 0,\n      lcurrMazeAlg: 'Recursive Division Maze',\n      currMazeTab: 0,\n      startNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), 1],\n      finishNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), Math.floor(Math.floor(window.innerWidth / 25)) - 2],\n      startIsMoving: false,\n      finishIsMoving: false,\n      isThereStop: false,\n      stopIsMoving: false,\n      prevStop: [],\n      generatingMaze: false,\n      visualizingAlgorithm: false,\n      animationSpeed: 10,\n      currProgressVal: 0,\n      maxProgressVal: 100,\n      prevStart: [],\n      prevFinish: [],\n      prevAlg: {}\n    };\n  }\n\n  //reminder!!\n  // row is width\n  // col is height\n  componentDidMount() {\n    window.addEventListener('resize', e => {\n      this.setState({\n        startNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), 1],\n        finishNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), Math.floor(Math.floor(window.innerWidth / 25)) - 2],\n        isThereStop: false,\n        stopIsMoving: false,\n        prevStop: [],\n        prevStart: [],\n        prevFinish: [],\n        prevAlg: {}\n      });\n      this.clearGrid();\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = renderGrid(this.state, rowNum, colNum, false);\n      this.setState({\n        grid\n      });\n    });\n    const grid = renderGrid(this.state, Math.floor(window.innerHeight / 25), Math.floor(window.innerWidth / 25));\n    this.setState({\n      grid: grid\n    });\n  }\n\n  //animte dijkstra\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder, animationStall) {\n    let animationSpeed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n    let isThereStop = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'; //progressTracker\n\n    const progress = $(\"#progressBar\");\n\n    if (!isSecondAnimation && isThereStop) {\n      document.getElementById(`progressBar`).className = `progress progress-stop`;\n    } else if (!isSecondAnimation && !isThereStop) {\n      document.getElementById(`progressBar`).className = 'progress progress-no-stop';\n    }\n\n    var integralVal = 100 / visitedNodesInOrder.length;\n    if (isThereStop) integralVal = 50 / visitedNodesInOrder.length;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n        progress.width(`+=${integralVal}%`);\n      }, animationSpeed * i);\n    }\n  }\n\n  //animate aStar\n  animateaStar(visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed, isThereStop) {\n    let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    var animationColor;\n    isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n    const progress = document.getElementsByClassName('progress')[0];\n    progress.style.width = '0%';\n    const integralVal = 100 / visitedNodesInOrder.length;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n        progress.style.width = `${(i + 1) * integralVal}%`;\n      }, animationSpeed * i);\n    }\n  }\n\n  visualizeaStar() {\n    this.aStarWorker = new WebWorker(aStarWorker);\n    this.pathGrabWorker = new WebWorker(pathGrabWorker);\n    var grid = this.state.grid;\n    const START_NODE = this.state.startNode;\n    const FINISH_NODE = this.state.finishNode;\n    const STOP_NODE = this.state.prevStop;\n    const startNode = grid[START_NODE[0]][START_NODE[1]];\n    const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n    const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n    if (this.state.isThereStop) {\n      this.aStarWorker.postMessage([grid, startNode, finishNode, stopNode]);\n      this.aStarWorker.addEventListener('message', message => {\n        const animateTiming = async message => {\n          this.pathGrabWorker.postMessage([message.data, true]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            const animateTime = (message, messageTwo) => {\n              console.log(messageTwo);\n              this.animateaStar(message.data[0], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n              setTimeout(this.animateaStar, message.data[0].length * this.state.animationSpeed, message.data[1], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n            };\n\n            animateTime(message, messageTwo);\n          });\n        };\n\n        animateTiming(message);\n      });\n      return;\n    } else if (!this.state.isThereStop) {\n      this.aStarWorker.postMessage([grid, startNode, finishNode, false]);\n      this.aStarWorker.addEventListener('message', message => {\n        this.pathGrabWorker.postMessage([message.data, false]);\n        this.pathGrabWorker.addEventListener('message', messageTwo => {\n          this.animateaStar(message.data, messageTwo.data, message.data.length, this.state.animationSpeed, this.state.isThereStop, false);\n        });\n      });\n    }\n  } //animate breadth first search \n\n\n  animatebfs(visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed) {\n    let isSecondAnimation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var animationColor;\n    isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n    const progress = document.getElementsByClassName('progress')[0];\n    progress.style.width = '0%';\n    const integralVal = 100 / visitedNodesInOrder.length;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(this.animateShortestPath, animationSpeed * animationStall, nodesInShortestPathOrder);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n        progress.style.width = `${(i + 1) * integralVal}%`;\n      }, animationSpeed * i);\n    }\n  }\n\n  visualizbfs() {\n    this.breadthFirstSearchWorker = new WebWorker(breadthFirstSearchWorker);\n    this.pathGrabWorker = new WebWorker(pathGrabWorker);\n    var grid = this.state.grid;\n    const START_NODE = this.state.startNode;\n    const FINISH_NODE = this.state.finishNode;\n    const STOP_NODE = this.state.prevStop;\n    const startNode = grid[START_NODE[0]][START_NODE[1]];\n    const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n    const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n    if (this.state.isThereStop) {\n      var nodesInShortestPathOrder = [];\n      this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n      this.breadthFirstSearchWorker.addEventListener('message', message => {\n        const animateTiming = async message => {\n          this.pathGrabWorker.postMessage([message.data, true]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            const animateTime = (message, messageTwo) => {\n              console.log(messageTwo);\n              this.animatebfs(message.data[0], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, false);\n              setTimeout(this.animatebfs, message.data[0].length * this.state.animationSpeed, message.data[1], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, true);\n            };\n\n            animateTime(message, messageTwo);\n          });\n        };\n\n        animateTiming(message);\n      });\n      return;\n    } else if (!this.state.isThereStop) {\n      this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n      this.breadthFirstSearchWorker.addEventListener('message', message => {\n        this.pathGrabWorker.postMessage([message.data, false]);\n        this.pathGrabWorker.addEventListener('message', messageTwo => {\n          console.log(messageTwo.data);\n          this.animatebfs(message.data, messageTwo.data, message.data.length, this.state.animationSpeed, false);\n        });\n      });\n    }\n  } // greedy best first search\n\n\n  animategbfs(visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed) {\n    let isSecondAnimation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var animationColor;\n    isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n    const progress = document.getElementsByClassName('progress')[0];\n    progress.style.width = '0%';\n    const integralVal = 100 / visitedNodesInOrder.length;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n        progress.style.width = `${(i + 1) * integralVal}%`;\n      }, animationSpeed * i);\n    }\n  }\n\n  visualizegbfs() {\n    this.greedyBestFirstSearchWorker = new WebWorker(greedyBestFirstSearchWorker);\n    this.pathGrabWorker = new WebWorker(pathGrabWorker);\n    var grid = this.state.grid;\n    const START_NODE = this.state.startNode;\n    const FINISH_NODE = this.state.finishNode;\n    const STOP_NODE = this.state.prevStop;\n    const startNode = grid[START_NODE[0]][START_NODE[1]];\n    const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n    const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n    if (this.state.isThereStop) {\n      this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n      this.greedyBestFirstSearchWorker.addEventListener('message', message => {\n        const animateTiming = async message => {\n          this.pathGrabWorker.postMessage([message.data, true]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            const animateTime = (message, messageTwo) => {\n              this.animategbfs(message.data[0], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, false);\n              setTimeout(this.animategbfs, message.data[0].length * this.state.animationSpeed, message.data[1], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n            };\n\n            animateTime(message, messageTwo);\n          });\n        };\n\n        animateTiming(message);\n      });\n    } else if (!this.state.isThereStop) {\n      this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n      this.greedyBestFirstSearchWorker.addEventListener('message', message => {\n        this.pathGrabWorker.postMessage([message.data, false]);\n        this.pathGrabWorker.addEventListener('message', messageTwo => {\n          this.animategbfs(message.data, messageTwo.data, message.data.length, this.state.animationSpeed, false);\n        });\n      });\n    }\n  } // depth first search\n\n\n  animatedfs(visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed) {\n    let isSecondAnimation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var animationColor;\n    isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n    const progress = document.getElementsByClassName('progress')[0];\n    progress.style.width = '0%';\n    const integralVal = 100 / visitedNodesInOrder.length;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        //setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n        progress.style.width = `${(i + 1) * integralVal}%`;\n      }, animationSpeed * i);\n    }\n  }\n\n  visualizedfs() {\n    this.depthFirstSearchWorker = new WebWorker(depthFirstSearchWorker);\n    this.pathGrabWorker = new WebWorker(pathGrabWorker);\n    var grid = this.state.grid;\n    const START_NODE = this.state.startNode;\n    const FINISH_NODE = this.state.finishNode;\n    const STOP_NODE = this.state.prevStop;\n    const startNode = grid[START_NODE[0]][START_NODE[1]];\n    const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n    const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n    if (this.state.isThereStop) {\n      var nodesInShortestPathOrder = [];\n      this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n      this.depthFirstSearchWorker.addEventListener('message', message => {\n        const animateTiming = async message => {\n          this.pathGrabWorker.postMessage([message.data, true]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            console.log([...message.data[0], ...message.data[1]]);\n\n            const animateTime = (message, messageTwo) => {\n              this.animatedfs(message.data[0], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, false);\n              setTimeout(this.animatedfs, message.data[0].length * this.state.animationSpeed, message.data[1], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n            };\n\n            console.log(messageTwo.data);\n            animateTime(message, messageTwo);\n          });\n        };\n\n        animateTiming(message);\n      });\n      return;\n    } else if (!this.state.isThereStop) {\n      this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n      this.depthFirstSearchWorker.addEventListener('message', message => {\n        this.pathGrabWorker.postMessage([message.data, false]);\n        console.log(message.data);\n        this.pathGrabWorker.addEventListener('message', messageTwo => {\n          this.animatedfs(message.data, messageTwo.data, message.data.length, this.state.animationSpeed, this.state.isThereStop, false);\n        });\n      });\n    }\n  } // bidirectional greedy first search\n\n\n  animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath, animationSpeed) {\n    const progress = document.getElementsByClassName('progress')[0];\n    progress.style.width = '0%';\n    const integralVal = 100 / (visitedNodesInOrderStart.length + visitedNodesInOrderFinish.length);\n    let len = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n    for (let i = 1; i <= len; i++) {\n      let nodeA = visitedNodesInOrderStart[i];\n      let nodeB = visitedNodesInOrderFinish[i];\n\n      if (i === visitedNodesInOrderStart.length) {\n        setTimeout(() => {\n          let visitedNodesInOrder = getVisitedNodesInOrder(visitedNodesInOrderStart, visitedNodesInOrderFinish);\n\n          if (isShortedPath) {\n            this.animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\n          } else {\n            this.setState({\n              visualizingAlgorithm: false\n            });\n          }\n        }, i * animationSpeed);\n        return;\n      }\n\n      setTimeout(() => {\n        //visited nodes\n        if (nodeA !== undefined) {\n          document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = \"node node-visited\";\n        }\n\n        if (nodeB !== undefined) {\n          document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = \"node node-visited\";\n        }\n\n        progress.style.width = `${(i + 1) * (integralVal * 2)}%`;\n      }, i * animationSpeed);\n    }\n  }\n\n  visualizeBidirectionalGreedySearch() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      visualizingAlgorithm: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const visitedNodesInOrder = bidirectionalGreedySearch(grid, startNode, finishNode);\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n      const isShortedPath = visitedNodesInOrder[2];\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1], visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]);\n      this.setState({\n        maxProgressVal: visitedNodesInOrderStart.length + visitedNodesInOrderFinish.length - 2\n      });\n      this.animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath, this.state.animationSpeed);\n    }, this.state.animationSpeed);\n  } //finish animations\n\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  } //generate mazes\n\n\n  generateRandomMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = randomMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateRecursiveDivisionMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const _stopNode = this.state.prevStop;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = _stopNode === [] ? grid[_stopNode[0][_stopNode[1]]] : false;\n      const walls = this.state.isThereStop ? recursiveDivisionMaze(grid, startNode, finishNode, stopNode) : recursiveDivisionMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateVerticalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = verticalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateHorizontalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = horizontalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(NavTop, {\n        state: this.state,\n        currProgressVal: currProgressVal,\n        maxProgressVal: maxProgressVal,\n        handleSpeedTabs: this.handleSpeedTabs,\n        clearGrid: this.clearGrid,\n        resetGrid: this.resetGrid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1037,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-container\",\n        children: /*#__PURE__*/_jsxDEV(Visualizer, {\n          state: this.state,\n          handleMouseDown: this.handleMouseDown,\n          handleMouseEnter: this.handleMouseEnter,\n          handleMouseUp: this.handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1039,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1038,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        state: this.state,\n        toggleNav: this.handleNav,\n        replayAnimation: this.replayAnimation,\n        resetGrid: this.resetGrid,\n        handleMazeTabs: this.handleMazeTabs,\n        genMaze: this.generateMaze,\n        play: this.playAnimation,\n        handleTabs: this.handleTabs,\n        handleItemChange: this.handleItemDescChange,\n        visualizeDijkstra: this.visualizeDijkstra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1046,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1035,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n  const grid = [];\n  var rowNum = _rowNum;\n  var colNum = _colNum;\n\n  for (let row = 0; row < rowNum; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < colNum; col++) {\n      var node = createNode(col, row, state);\n      node.className = 'node';\n      currentRow.push(node);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row, state) => {\n  const startNode = state.startNode;\n  const finishNode = state.finishNode;\n  const stopNode = state.prevStop;\n  return {\n    col,\n    row,\n    isStart: row === startNode[0] && col === startNode[1],\n    isFinish: row === finishNode[0] && col === finishNode[1],\n    isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n    isWall: false,\n    previousNode: null,\n    isVisited: false,\n    isVisitedSecond: false,\n    distance: Infinity,\n    distanceSecond: Infinity\n  };\n};\n\nconst getNewGridWithStart = (grid, row, col, prevStart) => {\n  const newGrid = grid.slice();\n  const newStart = newGrid[row][col];\n  const oldStart = newGrid[prevStart[0]][prevStart[1]];\n  const oldNode = { ...oldStart,\n    isStart: !oldStart.isStart\n  };\n  const newNode = { ...newStart,\n    isStart: !newStart.isStart\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStart[0]][prevStart[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinish = (grid, row, col, prevFinish) => {\n  const newGrid = grid.slice();\n  if (newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n  const newFinish = newGrid[row][col];\n  const oldFinish = newGrid[prevFinish[0]][prevFinish[1]];\n  const oldNode = { ...oldFinish,\n    isFinish: !oldFinish.isFinish\n  };\n  const newNode = { ...newFinish,\n    isFinish: !newFinish.isFinish\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevFinish[0]][prevFinish[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n  const newGrid = grid.slice();\n  const newStop = newGrid[row][col];\n\n  if (prevStop.length === 0) {\n    const newNode = { ...newStop,\n      isStop: !newStop.isStop\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  const oldStop = newGrid[prevStop[0]][prevStop[1]];\n  const oldNode = { ...oldStop,\n    isStop: !oldStop.isStop\n  };\n  const newNode = { ...newStop,\n    isStop: !newStop.isStop\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStop[0]][prevStop[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = { ...node,\n      isWall: true\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n\n  return newGrid;\n};\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst getVisitedNodesInOrder = (visitedNodesInOrderStart, visitedNodesInOrderFinish) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n\n  return visitedNodesInOrder;\n};\n\nconst getGridWithoutPath = function (grid) {\n  let minorReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let newGrid = grid.slice();\n\n  for (let row of grid) {\n    for (let node of row) {\n      var wall = false;\n      var stop = false;\n\n      if (minorReset) {\n        if (grid[node.row][node.col].isWall) wall = true;\n        if (grid[node.row][node.col].isStop) stop = true;\n      }\n\n      let newNode = { ...node,\n        distance: Infinity,\n        distanceSecond: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isVisitedSecond: false,\n        isShortest: false,\n        previousNode: null,\n        isWall: wall,\n        isWeight: false,\n        isStop: stop\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","useState","useEffect","$","Visualizer","getNodesInShortestPathOrder","aStar","breadthFirstSearch","greedyBFS","depthFirstSearch","randomMaze","verticalMaze","horizontalMaze","recursiveDivisionMaze","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","Navbar","NavTop","itemData","algData","pathGrabWorker","_dijkstraWorker","aStarWorker","greedyBestFirstSearchWorker","breadthFirstSearchWorker","depthFirstSearchWorker","WebWorker","Message","maxProgressVal","currProgressVal","MainContainer","constructor","props","handleWindowResize","console","log","handleMouseDown","row","col","newGrid","state","grid","isStart","setState","startIsMoving","isFinish","finishIsMoving","currItemDesc","getNewGridWithWallToggled","stopIsMoving","isThereStop","mouseIsPressed","handleMouseEnter","getNewGridWithStart","startNode","getNewGridWithFinish","finishNode","getNewGridWithStopToggled","prevStop","handleMouseUp","handleNav","showNav","handleItemDescChange","e","item","newItem","map","_item","id","currItemObj","handleTabs","val","currAlgTab","currAlgObj","handleMazeTabs","currMazeTab","handleSpeedTabs","animationSpeed","generateMaze","currAlg","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","generateRandomMaze","resetGrid","visualizingAlgorithm","generatingMaze","document","getElementsByClassName","style","width","rowNum","Math","floor","window","innerHeight","colNum","innerWidth","stopNode","length","getElementById","className","isWall","getGridWithoutPath","clearGrid","playAnimation","prevStart","prevFinish","prevAlg","AlgObj","visualizeDijkstra","visualizeaStar","visualizbfs","visualizegbfs","visualizedfs","visualizeBidirectionalGreedySearch","dijkstraWorker","START_NODE","FINISH_NODE","STOP_NODE","nodesInShortestPathOrder","postMessage","addEventListener","message","animateTiming","data","messageTwo","animateTime","animateDijkstra","setTimeout","animateMaze","walls","i","getNewGridWithMaze","wall","node","lcurrMazeAlg","componentDidMount","renderGrid","visitedNodesInOrder","animationStall","isSecondAnimation","animationColor","progress","integralVal","animateShortestPath","animateaStar","animatebfs","animategbfs","animatedfs","animateBidirectionalAlgorithm","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","len","max","nodeA","nodeB","getVisitedNodesInOrder","undefined","_startNode","_finishNode","_stopNode","render","replayAnimation","_rowNum","_colNum","currentRow","createNode","push","isStop","previousNode","isVisited","isVisitedSecond","distance","Infinity","distanceSecond","slice","newStart","oldStart","oldNode","newNode","newFinish","oldFinish","newStop","oldStop","getInitialGrid","numRows","numColumns","n","minorReset","stop","totalDistance","isShortest","isWeight"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"sourcesContent":["import React, {Component, useState, useEffect} from 'react';\nimport $ from 'jquery' \nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport { getNodesInShortestPathOrder } from '../workers/dijkstraWorker';\nimport {aStar} from '../algorithims/aStar'\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport NavTop from './navComponents/topNav';\nimport itemData from '../data/item-data'\nimport algData from '../data/alg-data'\nimport pathGrabWorker from '../workers/pathGrabWorker';\nimport _dijkstraWorker from \"../workers/dijkstraWorker\";\nimport aStarWorker from '../workers/aStarWorker'\nimport greedyBestFirstSearchWorker from '../workers/greedyBestFirstSearchWorker';\nimport breadthFirstSearchWorker from '../workers/breadthFirstSearchWorker';\nimport depthFirstSearchWorker from '../workers/depthFirstSearchWorker';\nimport WebWorker from \"../workers/workerSetup\";\nimport './mainContainer.css'\nimport { Message } from '@material-ui/icons';\n\nvar maxProgressVal = 100\nvar currProgressVal = 0\n\nexport default class MainContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start',\n            currItemObj: itemData[0],\n            currAlgObj: algData[0],\n            currAlgTab: 0,\n            lcurrMazeAlg: 'Recursive Division Maze',\n            currMazeTab: 0,\n            startNode: [Math.floor(Math.floor(window.innerHeight/25)/2), 1],\n            finishNode: [Math.floor(Math.floor(window.innerHeight/25)/2), Math.floor(Math.floor(window.innerWidth/25))-2],\n            startIsMoving: false,\n            finishIsMoving: false,\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            generatingMaze: false,\n            visualizingAlgorithm: false,\n            animationSpeed: 10,\n            currProgressVal: 0,\n            maxProgressVal: 100,\n            prevStart: [],\n            prevFinish: [],\n            prevAlg: {}\n        }\n    }\n\n    handleWindowResize = () => {\n      console.log('changing')\n    }\n    //reminder!!\n    // row is width\n    // col is height\n    componentDidMount() {\n        window.addEventListener('resize', (e) => {\n          this.setState({\n            startNode: [Math.floor(Math.floor(window.innerHeight/25)/2), 1],\n            finishNode: [Math.floor(Math.floor(window.innerHeight/25)/2), Math.floor(Math.floor(window.innerWidth/25))-2],\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            prevStart: [],\n            prevFinish: [],\n            prevAlg: {}\n          })\n\n          this.clearGrid();\n          var rowNum = Math.floor((window.innerHeight / 25))\n          var colNum = Math.floor((window.innerWidth / 25))\n          const grid = renderGrid(this.state, rowNum, colNum, false)\n          this.setState({grid});\n      })\n\n      const grid = renderGrid(this.state, Math.floor((window.innerHeight / 25)), Math.floor((window.innerWidth / 25)))\n      this.setState({grid: grid});\n    }\n\n    handleMouseDown = (row, col) => {\n        var newGrid = this.state.grid\n        if(this.state.grid[row][col].isStart){\n          this.setState({startIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.grid[row][col].isFinish){\n          this.setState({finishIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Stop'){\n          this.setState({stopIsMoving: true, isThereStop: true})\n        }\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter = (row, col) => {\n        if (!this.state.mouseIsPressed) return;\n        var newGrid = this.state.grid;\n        if(this.state.startIsMoving){\n          newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode)\n          this.setState({startNode: [row, col]})\n        } \n        else if(this.state.finishIsMoving){\n          newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode)\n          this.setState({finishNode: [row, col]})\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n        } else if(this.state.currItemDesc === 'Stop'){\n          newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n          this.setState({prevStop: [row, col]})\n        }\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp = (row, col) => {\n        this.setState({mouseIsPressed: false, startIsMoving: false, finishIsMoving: false});\n    }\n\n    handleNav = () => {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    //navBar functions\n    handleItemDescChange = (e, item) => {\n      var newItem = `${item}`\n      itemData.map((_item) => {\n        if(item === _item.id){this.setState({currItemDesc: newItem, currItemObj: _item})}\n      })\n    }\n\n    handleTabs = (e, val) => {\n      this.setState({currAlgTab: val, currAlgObj: algData[val]})\n    }\n\n    handleMazeTabs = (e, val) => {\n      this.setState({currMazeTab: val})\n      console.log(val)\n    }\n\n    handleSpeedTabs = (e, val) => {\n      console.log(e, val)\n      this.setState({animationSpeed: val})\n    }\n\n    generateMaze = (e) => {\n      var currAlg = this.state.currMazeTab\n \n      if(currAlg===0){\n        this.generateRecursiveDivisionMaze()\n      } else if(currAlg===1){\n        this.generateVerticalMaze()\n      } else if(currAlg===2){\n        this.generateHorizontalMaze()\n      } else if(currAlg===3){\n        this.generateRandomMaze()\n      }\n    }\n\n    resetGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      document.getElementsByClassName('progress')[0].style.width = '0%'\n      var rowNum = Math.floor((window.innerHeight / 25))\n      var colNum = Math.floor((window.innerWidth / 25))\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const stopNode = this.state.isThereStop ? this.state.prevStop : false\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else if(stopNode !== false && (row === stopNode[0] && col === stopNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-stop\";\n          } else if(grid[row][col].isWall)\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-wall\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid, true);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n      });\n    }\n\n    clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      document.getElementsByClassName('progress')[0].style.width = '0%'\n      var rowNum = Math.floor((window.innerHeight / 25))\n      var colNum = Math.floor((window.innerWidth / 25))\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n        prevStop: [],\n        isThereStop: false,  \n      });\n    }\n\n    // play animation\n\n    playAnimation = (e) => {\n      var currAlg = this.state.currAlgObj.id\n      this.setState({\n        prevStart: this.state.startNode,\n        prevFinish: this.state.finishNode,\n        prevAlg: this.state.AlgObj\n      })\n      if(currAlg===0){\n        this.visualizeDijkstra()\n      } else if(currAlg===1){\n        this.visualizeaStar()\n      } else if(currAlg===4){\n        this.visualizbfs()\n      } else if(currAlg===2){\n        this.visualizegbfs()\n      } else if(currAlg===5){\n        this.visualizedfs()\n      } else if(currAlg===3){\n        this.visualizeBidirectionalGreedySearch()\n      }\n      return\n    }\n\n    //animte dijkstra\n\n    animateDijkstra(\n      visitedNodesInOrder, \n      nodesInShortestPathOrder, \n      animationStall,\n      animationSpeed=10, \n      isThereStop=false,\n      isSecondAnimation=false\n    ){\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      //progressTracker\n      const progress = $(\"#progressBar\")\n\n      if(!isSecondAnimation && isThereStop) {\n\n        document.getElementById(`progressBar`).className = `progress progress-stop`\n\n      } else if(!isSecondAnimation && !isThereStop){\n        \n        document.getElementById(`progressBar`).className = 'progress progress-no-stop'\n      }\n\n      var integralVal = 100/visitedNodesInOrder.length\n\n      if(isThereStop) integralVal = 50/visitedNodesInOrder.length\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n\n        if (i === visitedNodesInOrder.length) {\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n        }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n            progress.width(`+=${integralVal}%`)\n          }, animationSpeed * i);\n      }\n    }\n    \n    visualizeDijkstra = () => {\n\n      this.dijkstraWorker = new WebWorker(_dijkstraWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.dijkstraWorker.addEventListener('message', (message) => {\n            \n            const animateTiming = async (message) => {\n\n                this.pathGrabWorker.postMessage([message.data, true])\n\n                this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                    const animateTime = (message, messageTwo) => {\n\n                      console.log(messageTwo)\n\n                      this.animateDijkstra(\n                        message.data[0], \n                        messageTwo.data, \n                        (message.data[0].length+message.data[1].length), \n                        this.state.animationSpeed, \n                        this.state.isThereStop\n                      )\n\n                      setTimeout(this.animateDijkstra, \n                        message.data[0].length * this.state.animationSpeed, \n                        message.data[1], \n                        messageTwo.data,\n                        (message.data[0].length+message.data[1].length), \n                        this.state.animationSpeed, \n                        this.state.isThereStop, \n                        true\n                      )\n                    }\n\n                    animateTime(message, messageTwo)\n                })\n            }\n            animateTiming(message)\n        })\n        return\n\n      } else if(!this.state.isThereStop){\n\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.dijkstraWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              this.animateDijkstra(message.data, messageTwo.data, message.data.length, this.state.animationSpeed, this.state.isThereStop)\n\n            })\n        })\n      }\n    }\n\n    //animate aStar\n\n    animateaStar(\n      visitedNodesInOrder, \n      nodesInShortestPathOrder,\n      animationStall, \n      animationSpeed,\n      isThereStop, \n      isSecondAnimation=false\n    ){\n\n      var animationColor;\n      isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      const progress = document.getElementsByClassName('progress')[0]\n      progress.style.width = '0%'\n\n      const integralVal = 100/visitedNodesInOrder.length\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n        }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n            progress.style.width = `${(i+1) * integralVal}%`\n          }, animationSpeed * i);\n      }\n    }\n\n    visualizeaStar() {\n\n      this.aStarWorker = new WebWorker(aStarWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      if(this.state.isThereStop) {\n        this.aStarWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.aStarWorker.addEventListener('message', (message) => {\n            \n          const animateTiming = async (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, true])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                const animateTime = (message, messageTwo) => {\n\n                  console.log(messageTwo)\n\n                  this.animateaStar(\n                    message.data[0], \n                    messageTwo.data, \n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop,\n                    false\n                  )\n\n                  setTimeout(this.animateaStar, \n                    message.data[0].length * this.state.animationSpeed, \n                    message.data[1], \n                    messageTwo.data,\n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop, \n                    true\n                  )\n                }\n\n                animateTime(message, messageTwo)\n            })\n        }\n        animateTiming(message)\n    })\n          return\n          \n      } else if(!this.state.isThereStop){\n\n          this.aStarWorker.postMessage([grid, startNode, finishNode, false])\n\n          this.aStarWorker.addEventListener('message', (message) => {\n\n              this.pathGrabWorker.postMessage([message.data, false])\n\n              this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                this.animateaStar(\n                  message.data, \n                  messageTwo.data, \n                  message.data.length,\n                  this.state.animationSpeed,\n                  this.state.isThereStop,\n                  false\n                )\n\n              })\n          })\n      }\n    }\n\n    //animate breadth first search \n\n    animatebfs(\n      visitedNodesInOrder, \n      nodesInShortestPathOrder, \n      animationStall,\n      animationSpeed, \n      isSecondAnimation=false\n    ){\n\n      var animationColor;\n      isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      const progress = document.getElementsByClassName('progress')[0]\n      progress.style.width = '0%'\n\n      const integralVal = 100/visitedNodesInOrder.length\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          \n          setTimeout(this.animateShortestPath, animationSpeed*animationStall, nodesInShortestPathOrder)\n\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n          progress.style.width = `${(i+1) * integralVal}%`\n        }, animationSpeed * i);\n      }\n    }\n\n    visualizbfs() {\n      \n      this.breadthFirstSearchWorker = new WebWorker(breadthFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.breadthFirstSearchWorker.addEventListener('message', (message) => {\n                       \n            const animateTiming = async (message) => {\n\n              this.pathGrabWorker.postMessage([message.data, true])\n\n              this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                  const animateTime = (message, messageTwo) => {\n\n                    console.log(messageTwo)\n\n                    this.animatebfs(\n                      message.data[0], \n                      messageTwo.data, \n                      (message.data[0].length+message.data[1].length), \n                      this.state.animationSpeed, \n                      false\n                    )\n\n                    setTimeout(this.animatebfs, \n                      message.data[0].length * this.state.animationSpeed, \n                      message.data[1], \n                      messageTwo.data,\n                      (message.data[0].length+message.data[1].length), \n                      this.state.animationSpeed, \n                      true\n                    )\n                  }\n\n                  animateTime(message, messageTwo)\n              })\n            }\n          animateTiming(message)\n      })\n      return\n\n      } else if(!this.state.isThereStop){\n\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.breadthFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                console.log(messageTwo.data)\n\n                this.animatebfs(message.data, messageTwo.data, message.data.length, this.state.animationSpeed, false)\n            })\n        })\n      }\n    }\n\n    // greedy best first search\n\n    animategbfs(\n      visitedNodesInOrder, \n      nodesInShortestPathOrder,\n      animationStall, \n      animationSpeed, \n      isSecondAnimation=false\n    ) {\n\n      var animationColor;\n      isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      const progress = document.getElementsByClassName('progress')[0]\n      progress.style.width = '0%'\n\n      const integralVal = 100/visitedNodesInOrder.length\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n          }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n            progress.style.width = `${(i+1) * integralVal}%`\n          }, animationSpeed * i);\n      }\n    }\n\n    visualizegbfs() {\n      \n      this.greedyBestFirstSearchWorker = new WebWorker(greedyBestFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      if(this.state.isThereStop) {\n\n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.greedyBestFirstSearchWorker.addEventListener('message', (message) => {\n            \n          const animateTiming = async (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, true])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                const animateTime = (message, messageTwo) => {\n\n                  this.animategbfs(\n                    message.data[0], \n                    messageTwo.data, \n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    false\n                  )\n\n                  setTimeout(this.animategbfs, \n                    message.data[0].length * this.state.animationSpeed, \n                    message.data[1], \n                    messageTwo.data,\n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop, \n                    true\n                  )\n                }\n\n                animateTime(message, messageTwo)\n            })\n          }\n          animateTiming(message)\n      })\n      \n      } else if(!this.state.isThereStop) {\n        \n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.greedyBestFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              this.animategbfs(\n                message.data, \n                messageTwo.data,\n                message.data.length, \n                this.state.animationSpeed, \n                false\n              )\n\n            })\n        })\n      }\n    }\n\n    // depth first search\n\n    animatedfs(\n      visitedNodesInOrder, \n      nodesInShortestPathOrder, \n      animationStall, \n      animationSpeed, \n      isSecondAnimation=false\n    ) {\n\n      var animationColor;\n\n      isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      const progress = document.getElementsByClassName('progress')[0]\n      progress.style.width = '0%'\n\n      const integralVal = 100/visitedNodesInOrder.length\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          //setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n          }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n            progress.style.width = `${(i+1) * integralVal}%`\n          }, animationSpeed * i);\n      }\n    }\n\n    visualizedfs() {\n            \n      this.depthFirstSearchWorker = new WebWorker(depthFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      \n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.depthFirstSearchWorker.addEventListener('message', (message) => {\n            \n          const animateTiming = async (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, true])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              console.log([...message.data[0], ...message.data[1]])\n\n                const animateTime = (message, messageTwo) => {\n\n                  this.animatedfs(\n                    message.data[0], \n                    messageTwo.data, \n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    false\n                  )\n\n                  setTimeout(\n                    this.animatedfs, \n                    message.data[0].length * this.state.animationSpeed, \n                    message.data[1], \n                    messageTwo.data,\n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop, \n                    true\n                  )\n                }\n\n                console.log(messageTwo.data)\n\n                animateTime(message, messageTwo)\n            })\n          }\n          animateTiming(message)\n      })\n        return\n\n      } else if(!this.state.isThereStop){\n\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.depthFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            console.log(message.data)\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              this.animatedfs(\n                message.data, \n                messageTwo.data,\n                message.data.length, \n                this.state.animationSpeed,\n                this.state.isThereStop, \n                false\n              )\n\n            })\n        })\n      }\n    }\n\n    // bidirectional greedy first search\n\n    animateBidirectionalAlgorithm(\n      visitedNodesInOrderStart,\n      visitedNodesInOrderFinish,\n      nodesInShortestPathOrder,\n      isShortedPath,\n      animationSpeed\n    ) {\n\n      const progress = document.getElementsByClassName('progress')[0]\n      progress.style.width = '0%'\n\n      const integralVal = 100/(visitedNodesInOrderStart.length + visitedNodesInOrderFinish.length)\n\n      let len = Math.max(\n        visitedNodesInOrderStart.length,\n        visitedNodesInOrderFinish.length\n      );\n\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n        if (i === visitedNodesInOrderStart.length) {\n          setTimeout(() => {\n            let visitedNodesInOrder = getVisitedNodesInOrder(\n              visitedNodesInOrderStart,\n              visitedNodesInOrderFinish\n            );\n            if (isShortedPath) {\n              this.animateShortestPath(\n                nodesInShortestPathOrder,\n                visitedNodesInOrder\n              );\n            } else {\n              this.setState({ visualizingAlgorithm: false });\n            }\n          }, i * animationSpeed);\n          return;\n        }\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined) {\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = \"node node-visited\";\n          }\n          if (nodeB !== undefined) {\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = \"node node-visited\";\n          }\n          progress.style.width = `${(i+1) * (integralVal*2)}%`\n\n        }, i * animationSpeed);\n      }\n    }\n\n    visualizeBidirectionalGreedySearch() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      \n      this.setState({ visualizingAlgorithm: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]];\n        const finishNode = grid[_finishNode[0]][_finishNode[1]];\n        const visitedNodesInOrder = bidirectionalGreedySearch(\n          grid,\n          startNode,\n          finishNode\n        );\n        const visitedNodesInOrderStart = visitedNodesInOrder[0];\n        const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n        const isShortedPath = visitedNodesInOrder[2];\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\n          visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n          visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n        );\n        this.setState({maxProgressVal: (visitedNodesInOrderStart.length + visitedNodesInOrderFinish.length)-2})\n        this.animateBidirectionalAlgorithm(\n          visitedNodesInOrderStart,\n          visitedNodesInOrderFinish,\n          nodesInShortestPathOrder,\n          isShortedPath,\n          this.state.animationSpeed\n        );\n      }, this.state.animationSpeed);\n    }\n\n    //finish animations\n\n    animateShortestPath(nodesInShortestPathOrder) {\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path';\n        }, 50 * i);\n      }\n    }\n\n    //generate mazes\n\n    animateMaze = (walls) => {\n\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({ grid: newGrid, generatingMaze: false });\n          }, i * 10);\n          return;\n        }\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    generateRandomMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = randomMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateRecursiveDivisionMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const _stopNode = this.state.prevStop\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const stopNode = _stopNode === [] ? grid[_stopNode[0][_stopNode[1]]] : false\n        const walls = this.state.isThereStop ? recursiveDivisionMaze(grid, startNode, finishNode, stopNode) : recursiveDivisionMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateVerticalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = verticalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateHorizontalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = horizontalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n\n    render(){ \n        return(\n            <div className=\"main-container\">\n                {/* <button onClick={this.handleNav}>show nav</button> */}\n                <NavTop state={this.state} currProgressVal={currProgressVal} maxProgressVal={maxProgressVal} handleSpeedTabs={this.handleSpeedTabs} clearGrid={this.clearGrid} resetGrid={this.resetGrid}/>\n                <div className=\"visualizer-container\">\n                    <Visualizer \n                        state={this.state} \n                        handleMouseDown={this.handleMouseDown} \n                        handleMouseEnter={this.handleMouseEnter} \n                        handleMouseUp={this.handleMouseUp}\n                    />\n                </div>\n                <Navbar state={this.state} toggleNav={this.handleNav} replayAnimation={this.replayAnimation} resetGrid={this.resetGrid} handleMazeTabs={this.handleMazeTabs} genMaze={this.generateMaze} play={this.playAnimation} handleTabs={this.handleTabs} handleItemChange={this.handleItemDescChange} visualizeDijkstra={this.visualizeDijkstra}/>\n            </div>\n        )\n    }\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n    const grid = [];\n    var rowNum = _rowNum\n    var colNum = _colNum\n    for (let row = 0; row < rowNum; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colNum; col++) {\n        var node = createNode(col, row, state)\n        node.className = 'node'\n        currentRow.push(node);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\n\n\nconst createNode = (col, row, state) => {\n    const startNode = state.startNode\n    const finishNode = state.finishNode\n    const stopNode = state.prevStop\n    return {\n      col,\n      row,\n      isStart: row === startNode[0] && col === startNode[1],\n      isFinish: row === finishNode[0] && col === finishNode[1],\n      isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n      isWall: false,\n      previousNode: null,\n      isVisited: false,\n      isVisitedSecond: false,\n      distance: Infinity,\n      distanceSecond: Infinity\n    };\n  };\n\n  const getNewGridWithStart = (grid, row, col, prevStart) => {\n    const newGrid = grid.slice();\n    const newStart = newGrid[row][col];\n    const oldStart = newGrid[prevStart[0]][prevStart[1]]\n    const oldNode = {\n      ...oldStart,\n      isStart: !oldStart.isStart\n    }\n    const newNode = {\n      ...newStart,\n      isStart: !newStart.isStart,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStart[0]][prevStart[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithFinish = (grid, row, col, prevFinish) => {\n    const newGrid = grid.slice();\n    if(newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n    const newFinish = newGrid[row][col];\n    const oldFinish = newGrid[prevFinish[0]][prevFinish[1]]\n    const oldNode = {\n      ...oldFinish,\n      isFinish: !oldFinish.isFinish\n    }\n    const newNode = {\n      ...newFinish,\n      isFinish: !newFinish.isFinish,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevFinish[0]][prevFinish[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n    const newGrid = grid.slice();\n    const newStop = newGrid[row][col];\n    if(prevStop.length === 0){\n      const newNode = {\n        ...newStop,\n        isStop: !newStop.isStop,\n      };\n      newGrid[row][col] = newNode;\n      return newGrid;\n    }\n    const oldStop = newGrid[prevStop[0]][prevStop[1]]\n    const oldNode = {\n      ...oldStop,\n      isStop: !oldStop.isStop\n    }\n    const newNode = {\n      ...newStop,\n      isStop: !newStop.isStop,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStop[0]][prevStop[1]] = oldNode\n    return newGrid;\n  };\n\n  const getNewGridWithMaze = (grid, walls) => {\n    let newGrid = grid.slice();\n    for (let wall of walls) {\n      let node = grid[wall[0]][wall[1]];\n      let newNode = {\n        ...node,\n        isWall: true,\n      };\n      newGrid[wall[0]][wall[1]] = newNode;\n    }\n    return newGrid;\n  };\n\n  const getInitialGrid = (numRows, numColumns) => {\n    let grid = [];\n    for (let row = 0; row < numRows; row++) {\n      let currentRow = [];\n      for (let col = 0; col < numColumns; col++) {\n        currentRow.push(createNode(row, col));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const getVisitedNodesInOrder = (\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish\n  ) => {\n    let visitedNodesInOrder = [];\n    let n = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 0; i < n; i++) {\n      if (visitedNodesInOrderStart[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n      }\n      if (visitedNodesInOrderFinish[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n      }\n    }\n    return visitedNodesInOrder;\n  };\n\n  const getGridWithoutPath = (grid, minorReset=false) => {\n    let newGrid = grid.slice();\n    for (let row of grid) {\n      for (let node of row) {\n        var wall = false\n        var stop = false\n        if(minorReset){\n          if(grid[node.row][node.col].isWall) wall = true\n\n          if(grid[node.row][node.col].isStop) stop = true\n        }\n        let newNode = {\n          ...node,\n          distance: Infinity,\n          distanceSecond: Infinity,\n          totalDistance: Infinity,\n          isVisited: false,\n          isVisitedSecond: false,\n          isShortest: false,\n          previousNode: null,\n          isWall: wall,\n          isWeight: false,\n          isStop: stop\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    return newGrid;\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module"}