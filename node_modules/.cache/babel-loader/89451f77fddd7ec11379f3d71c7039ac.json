{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\";\nimport React, { Component } from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithims/dijkstra';\nimport { aStar } from '../algorithims/aStar';\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data';\nimport algData from '../data/alg-data';\nimport './mainContainer.css';\nimport { ContactlessOutlined } from '@material-ui/icons'; // const START_NODE_ROW = 10;\n// const START_NODE_COL = 5;\n// const FINISH_NODE_ROW = 10;\n// const FINISH_NODE_COL = 45;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MainContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMouseDown = (row, col) => {\n      var newGrid = this.state.grid;\n\n      if (this.state.grid[row][col].isStart) {\n        this.setState({\n          startIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.grid[row][col].isFinish) {\n        this.setState({\n          finishIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Weight') {\n        newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        this.setState({\n          stopIsMoving: true,\n          isThereStop: true\n        });\n      }\n\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n\n    this.handleMouseEnter = (row, col) => {\n      if (!this.state.mouseIsPressed) return;\n      var newGrid = this.state.grid;\n\n      if (this.state.startIsMoving) {\n        newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode);\n        this.setState({\n          startNode: [row, col]\n        });\n      } else if (this.state.finishIsMoving) {\n        newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode);\n        this.setState({\n          finishNode: [row, col]\n        });\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n      } else if (this.state.currItemDesc === 'Weight') {\n        newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n        this.setState({\n          prevStop: [row, col]\n        });\n      }\n\n      this.setState({\n        grid: newGrid\n      });\n    };\n\n    this.handleMouseUp = (row, col) => {\n      this.setState({\n        mouseIsPressed: false,\n        startIsMoving: false,\n        finishIsMoving: false\n      });\n    };\n\n    this.handleNav = () => {\n      this.setState({\n        showNav: !this.state.showNav\n      });\n    };\n\n    this.handleItemDescChange = (e, item) => {\n      var newItem = `${item}`;\n      itemData.map(_item => {\n        if (item === _item.id) {\n          this.setState({\n            currItemDesc: newItem,\n            currItemObj: _item\n          });\n        }\n      });\n    };\n\n    this.handleTabs = (e, val) => {\n      this.setState({\n        currAlgTab: val,\n        currAlgObj: algData[val]\n      });\n    };\n\n    this.handleMazeTabs = (e, val) => {};\n\n    this.generateMaze = e => {};\n\n    this.playAnimation = e => {\n      var currAlg = this.state.currAlgObj.id;\n\n      if (currAlg === 0) {\n        this.visualizeDijkstra();\n      } else if (currAlg === 1) {\n        this.visualizeaStar();\n      } else if (currAlg === 6) {\n        this.visualizbfs();\n      } else if (currAlg === 2) {\n        this.visualizegbfs();\n      } else if (currAlg === 7) {\n        this.visualizegdfs();\n      }\n\n      return;\n    };\n\n    this.visualizeDijkstra = () => {\n      const {\n        grid\n      } = this.state;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n      const stopNode = this.state.prevStop ? this.state.prevStop : [];\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n\n      const _stopNode = this.state.isThereStop ? grid[stopNode[0]][stopNode[1]] : false;\n\n      var visitedNodesInOrder = [];\n      var visitedNodesInOrderStop = [];\n\n      if (_stopNode === false) {\n        visitedNodesInOrder = dijkstra(grid, _startNode, _finishNode);\n      } else if (_stopNode != false) {\n        visitedNodesInOrder = dijkstra(grid, _startNode, _stopNode);\n\n        var _newGrid = renderGrid(this.state);\n\n        visitedNodesInOrderStop = dijkstra(_newGrid, _stopNode, _finishNode);\n      }\n\n      console.log(visitedNodesInOrder, visitedNodesInOrderStop);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animateDijkstra(visitedNodesInOrder, visitedNodesInOrderStop, nodesInShortestPathOrder, this.state.isThereStop);\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      showNav: false,\n      currItemDesc: 'Start',\n      currItemObj: itemData[0],\n      currAlgObj: algData[0],\n      currAlgTab: 0,\n      currMazeAlg: 'Recursive Division Maze',\n      currMazeTab: 0,\n      startNode: [10, 5],\n      finishNode: [10, 45],\n      startIsMoving: false,\n      finishIsMoving: false,\n      isThereStop: false,\n      stopIsMoving: false,\n      prevStop: []\n    };\n  }\n\n  componentDidMount() {\n    const grid = renderGrid(this.state);\n    this.setState({\n      grid\n    });\n  }\n\n  //animte dijkstra\n  animateDijkstra(visitedNodesInOrder, visitedNodesInOrderStop, nodesInShortestPathOrder, isStop) {\n    console.log(visitedNodesInOrder); // for(let j = 0; j < 2; j++){\n    //   for (let i = 0; i <= visitedNodesInOrder[j].length; i++) {\n    //     if (i === visitedNodesInOrder[j].length) {\n    //       if(isStop===true){break}\n    //       setTimeout(() => {\n    //           this.animateShortestPath(nodesInShortestPathOrder);\n    //       }, 10 * i);\n    //       return;\n    //     } \n    //     setTimeout(() => {\n    //       const node = visitedNodesInOrder[j][i];\n    //       console.log(node)\n    //       document.getElementById(`node-${node.row}-${node.col}`).className =\n    //       isStop ? 'node node-target-visited' : 'node node-visited';\n    //     }, 10 * i);\n    //   }\n    // }\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length && !isStop) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      if (i === visitedNodesInOrder.length && isStop) {\n        console.log('here');\n\n        for (let j = 0; j <= visitedNodesInOrderStop.length; j++) {\n          if (j === visitedNodesInOrderStop.length) {\n            setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n            }, 10 * j);\n            return;\n          }\n\n          setTimeout(() => {\n            const node = visitedNodesInOrderStop[j];\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-target-visited';\n          }, 10 * j);\n        }\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  //animate aStar\n  animateaStar(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizeaStar() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n  } //animate breadth first search \n\n\n  animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizbfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // greedy best first search\n\n\n  animategbfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizegbfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // depth first search\n\n\n  animatedfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizegdfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } //finish animations\n\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleNav,\n        children: \"show nav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-container\",\n        children: /*#__PURE__*/_jsxDEV(Visualizer, {\n          state: this.state,\n          handleMouseDown: this.handleMouseDown,\n          handleMouseEnter: this.handleMouseEnter,\n          handleMouseUp: this.handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        state: this.state,\n        gplay: this.playAnimation,\n        handleTabs: this.handleTabs,\n        handleItemChange: this.handleItemDescChange,\n        visualizeDijkstra: this.visualizeDijkstra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = state => {\n  const grid = [];\n  var rowNum = window.innerHeight / 25;\n  var colNum = (window.innerWidth - 20) / 25;\n\n  for (let row = 0; row < rowNum; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < colNum; col++) {\n      currentRow.push(createNode(col, row, state));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row, state) => {\n  const startNode = state.startNode;\n  const finishNode = state.finishNode;\n  const stopNode = state.prevStop;\n  return {\n    col,\n    row,\n    isStart: row === startNode[0] && col === startNode[1],\n    isFinish: row === finishNode[0] && col === finishNode[1],\n    isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithStart = (grid, row, col, prevStart) => {\n  const newGrid = grid.slice();\n  const newStart = newGrid[row][col];\n  const oldStart = newGrid[prevStart[0]][prevStart[1]];\n  const oldNode = { ...oldStart,\n    isStart: !oldStart.isStart\n  };\n  const newNode = { ...newStart,\n    isStart: !newStart.isStart\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStart[0]][prevStart[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinish = (grid, row, col, prevFinish) => {\n  const newGrid = grid.slice();\n  if (newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n  const newFinish = newGrid[row][col];\n  const oldFinish = newGrid[prevFinish[0]][prevFinish[1]];\n  const oldNode = { ...oldFinish,\n    isFinish: !oldFinish.isFinish\n  };\n  const newNode = { ...newFinish,\n    isFinish: !newFinish.isFinish\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevFinish[0]][prevFinish[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithWeightToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWeight: !node.isWeight\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n  const newGrid = grid.slice();\n  const newStop = newGrid[row][col];\n\n  if (prevStop.length === 0) {\n    const newNode = { ...newStop,\n      isStop: !newStop.isStop\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  const oldStop = newGrid[prevStop[0]][prevStop[1]];\n  const oldNode = { ...oldStop,\n    isStop: !oldStop.isStop\n  };\n  const newNode = { ...newStop,\n    isStop: !newStop.isStop\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStop[0]][prevStop[1]] = oldNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"names":["React","Component","Visualizer","dijkstra","getNodesInShortestPathOrder","aStar","breadthFirstSearch","greedyBFS","depthFirstSearch","Navbar","itemData","algData","ContactlessOutlined","MainContainer","constructor","props","handleMouseDown","row","col","newGrid","state","grid","isStart","setState","startIsMoving","isFinish","finishIsMoving","currItemDesc","getNewGridWithWallToggled","getNewGridWithWeightToggled","stopIsMoving","isThereStop","mouseIsPressed","handleMouseEnter","getNewGridWithStart","startNode","getNewGridWithFinish","finishNode","getNewGridWithStopToggled","prevStop","handleMouseUp","handleNav","showNav","handleItemDescChange","e","item","newItem","map","_item","id","currItemObj","handleTabs","val","currAlgTab","currAlgObj","handleMazeTabs","generateMaze","playAnimation","currAlg","visualizeDijkstra","visualizeaStar","visualizbfs","visualizegbfs","visualizegdfs","stopNode","_startNode","_finishNode","_stopNode","visitedNodesInOrder","visitedNodesInOrderStop","_newGrid","renderGrid","console","log","nodesInShortestPathOrder","animateDijkstra","currMazeAlg","currMazeTab","componentDidMount","isStop","i","length","setTimeout","animateShortestPath","j","node","document","getElementById","className","animateaStar","animatebfs","animategbfs","animatedfs","render","rowNum","window","innerHeight","colNum","innerWidth","currentRow","push","createNode","distance","Infinity","isVisited","isWall","previousNode","prevStart","slice","newStart","oldStart","oldNode","newNode","prevFinish","newFinish","oldFinish","isWeight","newStop","oldStop"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithims/dijkstra';\nimport {aStar} from '../algorithims/aStar'\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data'\nimport algData from '../data/alg-data'\nimport './mainContainer.css'\nimport { ContactlessOutlined } from '@material-ui/icons';\n\n// const START_NODE_ROW = 10;\n// const START_NODE_COL = 5;\n// const FINISH_NODE_ROW = 10;\n// const FINISH_NODE_COL = 45;\n\nexport default class MainContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start',\n            currItemObj: itemData[0],\n            currAlgObj: algData[0],\n            currAlgTab: 0,\n            currMazeAlg: 'Recursive Division Maze',\n            currMazeTab: 0,\n            startNode: [10, 5],\n            finishNode: [10, 45],\n            startIsMoving: false,\n            finishIsMoving: false,\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n        }\n    }\n\n    componentDidMount() {\n        const grid = renderGrid(this.state);\n        this.setState({grid});\n    }\n\n    handleMouseDown = (row, col) => {\n        var newGrid = this.state.grid\n        if(this.state.grid[row][col].isStart){\n          this.setState({startIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.grid[row][col].isFinish){\n          this.setState({finishIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Stop'){\n          this.setState({stopIsMoving: true, isThereStop: true})\n        }\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter = (row, col) => {\n        if (!this.state.mouseIsPressed) return;\n        var newGrid = this.state.grid;\n        if(this.state.startIsMoving){\n          newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode)\n          this.setState({startNode: [row, col]})\n        } \n        else if(this.state.finishIsMoving){\n          newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode)\n          this.setState({finishNode: [row, col]})\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        }  else if(this.state.currItemDesc === 'Stop'){\n          newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n          this.setState({prevStop: [row, col]})\n        }\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp = (row, col) => {\n        this.setState({mouseIsPressed: false, startIsMoving: false, finishIsMoving: false});\n    }\n\n    handleNav = () => {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    //navBar functions\n    handleItemDescChange = (e, item) => {\n      var newItem = `${item}`\n      itemData.map((_item) => {\n        if(item === _item.id){this.setState({currItemDesc: newItem, currItemObj: _item})}\n      })\n    }\n\n    handleTabs = (e, val) => {\n      this.setState({currAlgTab: val, currAlgObj: algData[val]})\n    }\n\n    handleMazeTabs = (e, val) => {\n\n    }\n\n    generateMaze = (e) => {\n\n    }\n\n    // play animation\n\n    playAnimation = (e) => {\n      var currAlg = this.state.currAlgObj.id\n      if(currAlg===0){\n        this.visualizeDijkstra()\n      } else if(currAlg===1){\n        this.visualizeaStar()\n      } else if(currAlg===6){\n        this.visualizbfs()\n      } else if(currAlg===2){\n        this.visualizegbfs()\n      } else if(currAlg===7){\n        this.visualizegdfs()\n      }\n      return\n    }\n\n    //animte dijkstra\n\n    animateDijkstra(visitedNodesInOrder, visitedNodesInOrderStop, nodesInShortestPathOrder, isStop) {\n      console.log(visitedNodesInOrder)\n      // for(let j = 0; j < 2; j++){\n      //   for (let i = 0; i <= visitedNodesInOrder[j].length; i++) {\n      //     if (i === visitedNodesInOrder[j].length) {\n      //       if(isStop===true){break}\n      //       setTimeout(() => {\n      //           this.animateShortestPath(nodesInShortestPathOrder);\n      //       }, 10 * i);\n      //       return;\n      //     } \n      //     setTimeout(() => {\n      //       const node = visitedNodesInOrder[j][i];\n      //       console.log(node)\n      //       document.getElementById(`node-${node.row}-${node.col}`).className =\n      //       isStop ? 'node node-target-visited' : 'node node-visited';\n      //     }, 10 * i);\n      //   }\n      // }\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length && !isStop) {\n          setTimeout(() => {\n            this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n        }\n        if(i === visitedNodesInOrder.length && isStop){\n          console.log('here')\n          for (let j = 0; j <= visitedNodesInOrderStop.length; j++) {\n            if (j === visitedNodesInOrderStop.length) {\n              setTimeout(() => {\n                this.animateShortestPath(nodesInShortestPathOrder);\n              }, 10 * j);\n              return;\n            }\n            setTimeout(() => {\n              const node = visitedNodesInOrderStop[j];\n              document.getElementById(`node-${node.row}-${node.col}`).className =\n                'node node-target-visited';\n            }, 10 * j);\n          }\n        }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n        }, 10 * i);\n      }\n    }\n    \n    visualizeDijkstra = () => {\n          const {grid} = this.state;\n          const startNode = this.state.startNode\n          const finishNode = this.state.finishNode\n          const stopNode = this.state.prevStop ? this.state.prevStop : []\n          const _startNode = grid[startNode[0]][startNode[1]];\n          const _finishNode = grid[finishNode[0]][finishNode[1]]\n          const _stopNode = this.state.isThereStop ? grid[stopNode[0]][stopNode[1]] : false;\n          var visitedNodesInOrder = []\n          var visitedNodesInOrderStop = []\n          if(_stopNode === false){\n            visitedNodesInOrder = dijkstra(grid, _startNode, _finishNode);\n          } else if(_stopNode != false){\n            visitedNodesInOrder = dijkstra(grid, _startNode, _stopNode)\n            var _newGrid = renderGrid(this.state)\n            visitedNodesInOrderStop = dijkstra(_newGrid, _stopNode, _finishNode)\n          }\n          console.log(visitedNodesInOrder, visitedNodesInOrderStop)\n          const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n          this.animateDijkstra(visitedNodesInOrder, visitedNodesInOrderStop, nodesInShortestPathOrder, this.state.isThereStop);\n    }\n\n    //animate aStar\n\n    animateaStar(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizeaStar() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    //animate breadth first search \n\n    animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizbfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    // greedy best first search\n\n    animategbfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizegbfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    // depth first search\n\n    animatedfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizegdfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    //finish animations\n\n    animateShortestPath(nodesInShortestPathOrder) {\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path';\n        }, 50 * i);\n      }\n    }\n\n    render(){ \n        return(\n            <div className=\"main-container\">\n                <button onClick={this.handleNav}>show nav</button>\n                <div className=\"visualizer-container\">\n                    <Visualizer \n                        state={this.state} \n                        handleMouseDown={this.handleMouseDown} \n                        handleMouseEnter={this.handleMouseEnter} \n                        handleMouseUp={this.handleMouseUp}\n                    />\n                </div>\n                <Navbar state={this.state} gplay={this.playAnimation} handleTabs={this.handleTabs} handleItemChange={this.handleItemDescChange} visualizeDijkstra={this.visualizeDijkstra}/>\n            </div>\n        )\n    }\n}\n\nconst renderGrid = (state) => {\n    const grid = [];\n    var rowNum = (window.innerHeight) / 25\n    var colNum = (window.innerWidth-20) / 25\n    for (let row = 0; row < rowNum; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colNum; col++) {\n        currentRow.push(createNode(col, row, state));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\nconst createNode = (col, row, state) => {\n    const startNode = state.startNode\n    const finishNode = state.finishNode\n    const stopNode = state.prevStop\n    return {\n      col,\n      row,\n      isStart: row === startNode[0] && col === startNode[1],\n      isFinish: row === finishNode[0] && col === finishNode[1],\n      isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n\n  const getNewGridWithStart = (grid, row, col, prevStart) => {\n    const newGrid = grid.slice();\n    const newStart = newGrid[row][col];\n    const oldStart = newGrid[prevStart[0]][prevStart[1]]\n    const oldNode = {\n      ...oldStart,\n      isStart: !oldStart.isStart\n    }\n    const newNode = {\n      ...newStart,\n      isStart: !newStart.isStart,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStart[0]][prevStart[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithFinish = (grid, row, col, prevFinish) => {\n    const newGrid = grid.slice();\n    if(newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n    const newFinish = newGrid[row][col];\n    const oldFinish = newGrid[prevFinish[0]][prevFinish[1]]\n    const oldNode = {\n      ...oldFinish,\n      isFinish: !oldFinish.isFinish\n    }\n    const newNode = {\n      ...newFinish,\n      isFinish: !newFinish.isFinish,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevFinish[0]][prevFinish[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithWeightToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWeight: !node.isWeight,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n    const newGrid = grid.slice();\n    const newStop = newGrid[row][col];\n    if(prevStop.length === 0){\n      const newNode = {\n        ...newStop,\n        isStop: !newStop.isStop,\n      };\n      newGrid[row][col] = newNode;\n      return newGrid;\n    }\n    const oldStop = newGrid[prevStop[0]][prevStop[1]]\n    const oldNode = {\n      ...oldStop,\n      isStop: !oldStop.isStop\n    }\n    const newNode = {\n      ...newStop,\n      isStop: !newStop.isStop,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStop[0]][prevStop[1]] = oldNode\n    return newGrid;\n  };"]},"metadata":{},"sourceType":"module"}