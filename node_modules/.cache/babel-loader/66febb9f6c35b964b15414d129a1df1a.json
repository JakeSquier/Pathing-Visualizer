{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n\n    function depthFirstSearch(grid, startNode, finishNode) {\n      let stopNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var isStop;\n\n      if (stopNode === false) {\n        isStop = false;\n      } else {\n        isStop = true;\n      }\n\n      if (!isStop) {\n        const visitedNodesInOrder = []; // stack to keep track of the visited nodes\n\n        const stack = [];\n        stack.push(startNode);\n\n        while (stack.length) {\n          const currNode = stack.pop(); // if the finsih node is reached then we return the visitedNodes array\n\n          if (currNode === finishNode) {\n            visitedNodesInOrder.push(currNode);\n            return visitedNodesInOrder;\n          } // we skip the nodes which are walls, start node or finish node\n\n\n          if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n            currNode.isVisited = true;\n            visitedNodesInOrder.push(currNode);\n            const {\n              row,\n              col\n            } = currNode;\n            updateUnvisitedNeighbours(row, col, stack, grid, currNode);\n          }\n        }\n      } else if (isStop) {}\n    }\n\n    function updateUnvisitedNeighbours(row, col, stack, grid, currNode) {\n      let next;\n\n      if (row > 0) {\n        next = grid[row - 1][col];\n\n        if (!next.isVisited) {\n          next.previousNode = currNode;\n          stack.push(next);\n        }\n      }\n\n      if (row < grid.length - 1) {\n        next = grid[row + 1][col];\n\n        if (!next.isVisited) {\n          next.previousNode = currNode;\n          stack.push(next);\n        }\n      }\n\n      if (col < grid[0].length - 1) {\n        next = grid[row][col + 1];\n\n        if (!next.isVisited) {\n          next.previousNode = currNode;\n          stack.push(next);\n        }\n      }\n\n      if (col > 0) {\n        next = grid[row][col - 1];\n\n        if (!next.isVisited) {\n          next.previousNode = currNode;\n          stack.push(next);\n        }\n      }\n    }\n\n    const grid = message.data[0];\n    const startNode = message.data[1];\n    const finishNode = message.data[2];\n    const stopNode = message.data[3];\n    const visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode, stopNode);\n    postMessage(visitedNodesInOrder);\n  });\n});","map":{"version":3,"names":["self","addEventListener","message","depthFirstSearch","grid","startNode","finishNode","stopNode","isStop","visitedNodesInOrder","stack","push","length","currNode","pop","isWall","isStart","isVisited","row","col","updateUnvisitedNeighbours","next","previousNode","data","postMessage"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/depthFirstSearchWorker.js"],"sourcesContent":["// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n        if (!message) return;\n\n        function depthFirstSearch(grid, startNode, finishNode, stopNode=false) {\n\n            var isStop;\n            if(stopNode===false){\n                isStop = false\n            } else {\n                isStop = true\n            }\n\n            if(!isStop) {\n\n                const visitedNodesInOrder = [];\n                // stack to keep track of the visited nodes\n                const stack = []; \n                stack.push(startNode);\n                while (stack.length) {\n                    const currNode = stack.pop();\n                    // if the finsih node is reached then we return the visitedNodes array\n                    if (currNode === finishNode) {\n                        visitedNodesInOrder.push(currNode)\n                        return visitedNodesInOrder;\n                    }\n        \n                    // we skip the nodes which are walls, start node or finish node\n                    if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n                    currNode.isVisited = true;\n                    visitedNodesInOrder.push(currNode);\n                    const { row, col } = currNode;\n                    updateUnvisitedNeighbours(row, col, stack, grid,currNode);\n                    }\n                }\n            } else if(isStop) {\n\n                \n            }\n        }\n\n        function  updateUnvisitedNeighbours(row, col, stack, grid,currNode) {\n            let next;\n            if (row > 0) {\n              next = grid[row - 1][col];\n              if (!next.isVisited) {\n                next.previousNode = currNode;\n                stack.push(next);\n              }\n            }\n            if (row < grid.length - 1) {\n              next = grid[row + 1][col];\n              if (!next.isVisited) {\n                next.previousNode = currNode;\n                stack.push(next);\n              }\n            }\n            if (col < grid[0].length - 1) {\n              next = grid[row][col + 1];\n              if (!next.isVisited) {\n                next.previousNode = currNode;\n                stack.push(next);\n              }\n            }\n            if (col > 0) {\n              next = grid[row][col - 1];\n              if (!next.isVisited) {\n                next.previousNode = currNode;\n                stack.push(next);\n              }\n            }\n        }\n\n        const grid = message.data[0]\n        const startNode = message.data[1]\n        const finishNode = message.data[2]\n        const stopNode = message.data[3]\n        const visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode, stopNode)\n\n        postMessage(visitedNodesInOrder)\n    })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}