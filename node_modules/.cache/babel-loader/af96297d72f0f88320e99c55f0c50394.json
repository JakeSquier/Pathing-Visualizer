{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n\n    function bidirectionalGreedySearch(grid, startNode, finishNode, stopNode) {\n      if (!startNode || !finishNode || startNode === finishNode) {\n        return false;\n      }\n\n      const isStop = stopNode === false ? false : true;\n\n      if (isStop) {\n        let unVis;\n      } else if (!isStop) {\n        let unvisitedNodesStart = [];\n        let visitedNodesInOrderStart = [];\n        let unvisitedNodesFinish = [];\n        let visitedNodesInOrderFinish = [];\n        startNode.distance = 0;\n        finishNode.distance = 0;\n        unvisitedNodesStart.push(startNode);\n        unvisitedNodesFinish.push(finishNode);\n\n        while (unvisitedNodesStart.length !== 0 && unvisitedNodesFinish.length !== 0) {\n          unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance);\n          unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance);\n          let closestNodeStart = unvisitedNodesStart.shift();\n          let closestNodeFinish = unvisitedNodesFinish.shift();\n          closestNodeStart.isVisited = true;\n          closestNodeFinish.isVisited = true;\n          visitedNodesInOrderStart.push(closestNodeStart);\n          visitedNodesInOrderFinish.push(closestNodeFinish);\n\n          if (isNeighbour(closestNodeStart, closestNodeFinish)) {\n            return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n          } //Start side search\n\n\n          let neighbours = getNeighbours(closestNodeStart, grid);\n\n          for (let neighbour of neighbours) {\n            if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n              visitedNodesInOrderStart.push(closestNodeStart);\n              visitedNodesInOrderFinish.push(neighbour);\n              return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n            }\n\n            let distance = closestNodeStart.distance + 1; //f(n) = h(n)\n\n            if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n              unvisitedNodesStart.unshift(neighbour);\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n              neighbour.previousNode = closestNodeStart;\n            } else if (distance < neighbour.distance) {\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n              neighbour.previousNode = closestNodeStart;\n            }\n          } //Finish side search\n\n\n          neighbours = getNeighbours(closestNodeFinish, grid);\n\n          for (let neighbour of neighbours) {\n            if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n              visitedNodesInOrderStart.push(closestNodeFinish);\n              visitedNodesInOrderStart.push(neighbour);\n              return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n            }\n\n            let distance = closestNodeFinish.distance + 1; //f(n) = h(n)\n\n            if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n              unvisitedNodesFinish.unshift(neighbour);\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n              neighbour.previousNode = closestNodeFinish;\n            } else if (distance < neighbour.distance) {\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n              neighbour.previousNode = closestNodeFinish;\n            }\n          }\n        }\n\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false];\n      }\n    }\n\n    function isNeighbour(closestNodeStart, closestNodeFinish) {\n      let rowStart = closestNodeStart.row;\n      let colStart = closestNodeStart.col;\n      let rowFinish = closestNodeFinish.row;\n      let colFinish = closestNodeFinish.col;\n      if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\n      if (rowFinish === rowStart && colFinish === colStart + 1) return true;\n      if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\n      if (rowFinish === rowStart && colFinish === colStart - 1) return true;\n      return false;\n    }\n\n    function getNeighbours(node, grid) {\n      let neighbours = [];\n      let {\n        row,\n        col\n      } = node;\n      if (row !== 0) neighbours.push(grid[row - 1][col]);\n      if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n      if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n      if (col !== 0) neighbours.push(grid[row][col - 1]);\n      return neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisited);\n    }\n\n    function manhattenDistance(nodeA, nodeB) {\n      let x = Math.abs(nodeA.row - nodeB.row);\n      let y = Math.abs(nodeA.col - nodeB.col);\n      return x + y;\n    }\n\n    function neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n      for (let node of unvisitedNodes) {\n        if (node.row === neighbour.row && node.col === neighbour.col) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    const grid = message.data[0];\n    const startNode = message.data[1];\n    const finishNode = message.data[2]; //const stopNode = message.data[3]\n\n    const visitedNodesInorder = bidirectionalGreedySearch(grid, startNode, finishNode);\n    postMessage(visitedNodesInorder);\n  });\n});\nexport function getNodesInShortestPathOrderBidirectionalGreedySearch(nodeA, nodeB) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = nodeB;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.push(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  currentNode = nodeA;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["self","addEventListener","message","bidirectionalGreedySearch","grid","startNode","finishNode","stopNode","isStop","unVis","unvisitedNodesStart","visitedNodesInOrderStart","unvisitedNodesFinish","visitedNodesInOrderFinish","distance","push","length","sort","a","b","totalDistance","closestNodeStart","shift","closestNodeFinish","isVisited","isNeighbour","neighbours","getNeighbours","neighbour","neighbourNotInUnvisitedNodes","unshift","manhattenDistance","previousNode","rowStart","row","colStart","col","rowFinish","colFinish","node","filter","isWall","nodeA","nodeB","x","Math","abs","y","unvisitedNodes","data","visitedNodesInorder","postMessage","getNodesInShortestPathOrderBidirectionalGreedySearch","nodesInShortestPathOrder","currentNode"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/bidirectionalGreedySearchWorker.js"],"sourcesContent":["// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n        if (!message) return;\n        function bidirectionalGreedySearch(grid, startNode, finishNode, stopNode) {\n            if (!startNode || !finishNode || startNode === finishNode) {\n            return false;\n            }\n            const isStop = stopNode === false ? false : true\n\n            if(isStop) {\n                let unVis\n\n            } else if(!isStop) {\n\n                let unvisitedNodesStart = [];\n                let visitedNodesInOrderStart = [];\n                let unvisitedNodesFinish = [];\n                let visitedNodesInOrderFinish = [];\n                startNode.distance = 0;\n                finishNode.distance = 0;\n                unvisitedNodesStart.push(startNode);\n                unvisitedNodesFinish.push(finishNode);\n            \n                while (\n                unvisitedNodesStart.length !== 0 &&\n                unvisitedNodesFinish.length !== 0\n                ) {\n                unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance);\n                unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance);\n                let closestNodeStart = unvisitedNodesStart.shift();\n                let closestNodeFinish = unvisitedNodesFinish.shift();\n            \n                closestNodeStart.isVisited = true;\n                closestNodeFinish.isVisited = true;\n                visitedNodesInOrderStart.push(closestNodeStart);\n                visitedNodesInOrderFinish.push(closestNodeFinish);\n                if (isNeighbour(closestNodeStart, closestNodeFinish)) {\n                    return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n                }\n            \n                //Start side search\n                let neighbours = getNeighbours(closestNodeStart, grid);\n                for (let neighbour of neighbours) {\n                    if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n                    visitedNodesInOrderStart.push(closestNodeStart);\n                    visitedNodesInOrderFinish.push(neighbour);\n                    return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n                    }\n                    let distance = closestNodeStart.distance + 1;\n                    //f(n) = h(n)\n                    if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n                    unvisitedNodesStart.unshift(neighbour);\n                    neighbour.distance = distance;\n                    neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n                    neighbour.previousNode = closestNodeStart;\n                    } else if (distance < neighbour.distance) {\n                    neighbour.distance = distance;\n                    neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n                    neighbour.previousNode = closestNodeStart;\n                    }\n                }\n            \n                //Finish side search\n                neighbours = getNeighbours(closestNodeFinish, grid);\n                for (let neighbour of neighbours) {\n                    if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n                    visitedNodesInOrderStart.push(closestNodeFinish);\n                    visitedNodesInOrderStart.push(neighbour);\n                    return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n                    }\n                    let distance = closestNodeFinish.distance + 1;\n                    //f(n) = h(n)\n                    if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n                    unvisitedNodesFinish.unshift(neighbour);\n                    neighbour.distance = distance;\n                    neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n                    neighbour.previousNode = closestNodeFinish;\n                    } else if (distance < neighbour.distance) {\n                    neighbour.distance = distance;\n                    neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n                    neighbour.previousNode = closestNodeFinish;\n                    }\n                }\n                }\n                return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false];\n            }\n            \n            \n        }\n        \n        function isNeighbour(closestNodeStart, closestNodeFinish) {\n            let rowStart = closestNodeStart.row;\n            let colStart = closestNodeStart.col;\n            let rowFinish = closestNodeFinish.row;\n            let colFinish = closestNodeFinish.col;\n            if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\n            if (rowFinish === rowStart && colFinish === colStart + 1) return true;\n            if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\n            if (rowFinish === rowStart && colFinish === colStart - 1) return true;\n            return false;\n        }\n        \n        function getNeighbours(node, grid) {\n            let neighbours = [];\n            let { row, col } = node;\n            if (row !== 0) neighbours.push(grid[row - 1][col]);\n            if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n            if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n            if (col !== 0) neighbours.push(grid[row][col - 1]);\n            return neighbours.filter(\n            (neighbour) => !neighbour.isWall && !neighbour.isVisited\n            );\n        }\n        \n        function manhattenDistance(nodeA, nodeB) {\n            let x = Math.abs(nodeA.row - nodeB.row);\n            let y = Math.abs(nodeA.col - nodeB.col);\n            return x + y;\n        }\n        \n        function neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n            for (let node of unvisitedNodes) {\n            if (node.row === neighbour.row && node.col === neighbour.col) {\n                return false;\n            }\n            }\n            return true;\n        }\n\n        const grid = message.data[0]\n        const startNode = message.data[1]\n        const finishNode = message.data[2]\n        //const stopNode = message.data[3]\n        const visitedNodesInorder = bidirectionalGreedySearch(grid, startNode, finishNode)\n\n        postMessage(visitedNodesInorder);\n    })\n}\n\nexport function getNodesInShortestPathOrderBidirectionalGreedySearch(\n    nodeA,\n    nodeB\n  ) {\n    let nodesInShortestPathOrder = [];\n    let currentNode = nodeB;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.push(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    currentNode = nodeA;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}