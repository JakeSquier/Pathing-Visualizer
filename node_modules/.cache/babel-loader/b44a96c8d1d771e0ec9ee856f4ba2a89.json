{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n\n    function bfs(grid, startNode, finishNode) {\n      let stopNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var isStop;\n\n      if (stopNode === false) {\n        isStop = false;\n      } else {\n        isStop = true;\n      }\n\n      let visitedNodesInOrder = [];\n\n      if (isStop) {\n        // queue to keep track of the visited nodes\n        let queue = [];\n        let queueSecond = [];\n        visitedNodesInOrder = [[], []];\n        queue.push(startNode);\n        queueSecond.push(stopNode);\n\n        while (queue.length) {\n          const currNode = queue.shift(); // if the finsih node is reached then we return the visitedNodes array\n\n          if (currNode === stopNode) {\n            visitedNodesInOrder[0].push(currNode);\n            break;\n          } // we skip the nodes which are walls, start node or finish node\n\n\n          if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n            currNode.isVisited = true;\n            visitedNodesInOrder[0].push(currNode);\n            const {\n              row,\n              col\n            } = currNode;\n            updateUnvisitedNeighbours(row, col, queue, grid, currNode, false);\n          }\n        }\n\n        while (queueSecond.length) {\n          const currNode = queueSecond.shift(); // if the finsih node is reached then we return the visitedNodes array\n\n          console.log(currNode);\n\n          if (currNode === finishNode) {\n            visitedNodesInOrder[1].push(currNode);\n            break;\n          } // we skip the nodes which are walls, start node or finish node\n\n\n          if (!currNode.isWall && (currNode.isStart || !currNode.isVisitedSecond)) {\n            currNode.isVisitedSecond = true;\n            visitedNodesInOrder[1].push(currNode);\n            const {\n              row,\n              col\n            } = currNode;\n            updateUnvisitedNeighbours(row, col, queueSecond, grid, currNode, true);\n          }\n        }\n\n        return visitedNodesInOrder;\n      } else if (!isStop) {\n        // queue to keep track of the visited nodes\n        let queue = [];\n        queue.push(startNode);\n\n        while (queue.length) {\n          const currNode = queue.shift(); // if the finsih node is reached then we return the visitedNodes array\n\n          if (currNode === finishNode) {\n            visitedNodesInOrder.push(currNode);\n            return visitedNodesInOrder;\n          } // we skip the nodes which are walls, start node or finish node\n\n\n          if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n            currNode.isVisited = true;\n            visitedNodesInOrder.push(currNode);\n            const {\n              row,\n              col\n            } = currNode;\n            updateUnvisitedNeighbours(row, col, queue, grid, currNode, false);\n          }\n        }\n      }\n    } // updates the neighbours,\n    // in correspondance to the algorithm \n\n\n    function updateUnvisitedNeighbours(row, col, queue, grid, currNode) {\n      let isStop = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n      if (isStop) {\n        let next;\n\n        if (row > 0) {\n          next = grid[row - 1][col];\n\n          if (!next.isVisitedSecond) {\n            queue.push(next);\n            next.previousNodeSecond = currNode;\n          }\n        }\n\n        if (row < grid.length - 1) {\n          next = grid[row + 1][col];\n\n          if (!next.isVisitedSecond) {\n            queue.push(next);\n            next.previousNodeSecond = currNode;\n          }\n        }\n\n        if (col > 0) {\n          next = grid[row][col - 1];\n\n          if (!next.isVisitedSecond) {\n            queue.push(next);\n            next.previousNodeSecond = currNode;\n          }\n        }\n\n        if (col < grid[0].length - 1) {\n          next = grid[row][col + 1];\n\n          if (!next.isVisitedSecond) {\n            queue.push(next);\n            next.previousNodeSecond = currNode;\n          }\n        }\n      } else if (!isStop) {\n        let next;\n\n        if (row > 0) {\n          next = grid[row - 1][col];\n\n          if (!next.isVisited) {\n            queue.push(next);\n            next.previousNode = currNode;\n          }\n        }\n\n        if (row < grid.length - 1) {\n          next = grid[row + 1][col];\n\n          if (!next.isVisited) {\n            queue.push(next);\n            next.previousNode = currNode;\n          }\n        }\n\n        if (col > 0) {\n          next = grid[row][col - 1];\n\n          if (!next.isVisited) {\n            queue.push(next);\n            next.previousNode = currNode;\n          }\n        }\n\n        if (col < grid[0].length - 1) {\n          next = grid[row][col + 1];\n\n          if (!next.isVisited) {\n            queue.push(next);\n            next.previousNode = currNode;\n          }\n        }\n      }\n    }\n\n    const grid = message.data[0];\n    const startNode = message.data[1];\n    const finishNode = message.data[2];\n    const stopNode = message.data[3];\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode, stopNode);\n    postMessage(visitedNodesInOrder);\n  });\n});","map":{"version":3,"names":["self","addEventListener","message","bfs","grid","startNode","finishNode","stopNode","isStop","visitedNodesInOrder","queue","queueSecond","push","length","currNode","shift","isWall","isStart","isVisited","row","col","updateUnvisitedNeighbours","console","log","isVisitedSecond","next","previousNodeSecond","previousNode","data","postMessage"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/breadthFirstSearchWorker.js"],"sourcesContent":["\n// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n      if (!message) return;\n        function bfs(grid, startNode, finishNode, stopNode=false) {\n            \n            var isStop;\n            if(stopNode===false){\n                isStop = false\n            } else {\n                isStop = true\n            }\n            let visitedNodesInOrder = [];\n\n            if(isStop) {\n                // queue to keep track of the visited nodes\n                let queue = [];\n                let queueSecond = [];\n                visitedNodesInOrder = [[],[]]\n                queue.push(startNode);\n                queueSecond.push(stopNode)\n                while (queue.length) {\n                    const currNode = queue.shift();\n                    // if the finsih node is reached then we return the visitedNodes array\n                    if (currNode === stopNode) {\n                        visitedNodesInOrder[0].push(currNode);\n                        break\n                    }\n                    \n                    // we skip the nodes which are walls, start node or finish node\n                    if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n                        currNode.isVisited = true;\n                        visitedNodesInOrder[0].push(currNode);\n                        const { row, col } = currNode;\n                        updateUnvisitedNeighbours(row, col, queue, grid,currNode, false);\n                    }\n                }\n                while (queueSecond.length) {\n                    const currNode = queueSecond.shift();\n                    // if the finsih node is reached then we return the visitedNodes array\n                    console.log(currNode)\n                    if (currNode === finishNode) {\n                        visitedNodesInOrder[1].push(currNode);\n                        break\n                    }\n                    \n                    // we skip the nodes which are walls, start node or finish node\n                    if (!currNode.isWall && (currNode.isStart || !currNode.isVisitedSecond)) {\n                        currNode.isVisitedSecond = true;\n                        visitedNodesInOrder[1].push(currNode);\n                        const { row, col } = currNode;\n                        updateUnvisitedNeighbours(row, col, queueSecond, grid, currNode, true);\n                    }\n                }\n                return visitedNodesInOrder\n\n            } else if(!isStop) {\n                // queue to keep track of the visited nodes\n                let queue = [];\n                queue.push(startNode);\n                while (queue.length) {\n                    const currNode = queue.shift();\n                    // if the finsih node is reached then we return the visitedNodes array\n                    if (currNode === finishNode) {\n                        visitedNodesInOrder.push(currNode);\n                        return visitedNodesInOrder;\n                    }\n                    \n                    // we skip the nodes which are walls, start node or finish node\n                    if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n                        currNode.isVisited = true;\n                        visitedNodesInOrder.push(currNode);\n                        const { row, col } = currNode;\n                        updateUnvisitedNeighbours(row, col, queue, grid,currNode, false);\n                    }\n                }\n            }\n  \n        }\n        \n        // updates the neighbours,\n        // in correspondance to the algorithm \n        function updateUnvisitedNeighbours(row, col, queue, grid, currNode, isStop=false) {\n\n            if(isStop) {\n                let next;\n                if (row > 0) {\n                  next = grid[row - 1][col];\n                  if (!next.isVisitedSecond) {\n                    queue.push(next);\n                    next.previousNodeSecond = currNode;\n                  }\n                }\n                if (row < grid.length - 1) {\n                  next = grid[row + 1][col];\n                  if (!next.isVisitedSecond) {\n                    queue.push(next);\n                    next.previousNodeSecond = currNode;\n                  }\n                }\n                if (col > 0) {\n                  next = grid[row][col - 1];\n                  if (!next.isVisitedSecond) {\n                    queue.push(next);\n                    next.previousNodeSecond = currNode;\n                  }\n                }\n                if (col < grid[0].length - 1) {\n                  next = grid[row][col + 1];\n                  if (!next.isVisitedSecond) {\n                    queue.push(next);\n                    next.previousNodeSecond = currNode;\n                  }\n                }\n            } else if(!isStop) {\n                let next;\n                if (row > 0) {\n                  next = grid[row - 1][col];\n                  if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                  }\n                }\n                if (row < grid.length - 1) {\n                  next = grid[row + 1][col];\n                  if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                  }\n                }\n                if (col > 0) {\n                  next = grid[row][col - 1];\n                  if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                  }\n                }\n                if (col < grid[0].length - 1) {\n                  next = grid[row][col + 1];\n                  if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                  }\n                }\n            }\n      }\n\n        const grid = message.data[0]\n        const startNode = message.data[1]\n        const finishNode = message.data[2]\n        const stopNode = message.data[3]\n\n        const visitedNodesInOrder = bfs(grid, startNode, finishNode, stopNode)\n\n        postMessage(visitedNodesInOrder)\n    })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}