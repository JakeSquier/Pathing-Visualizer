{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n\n    function bfs(grid, startNode, finishNode) {\n      let stopNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var isStop;\n\n      if (stopNode !== false) {\n        isStop = true;\n      } else {\n        isStop = false;\n      }\n\n      const visitedNodesInOrder = []; // queue to keep track of the visited nodes\n\n      if (!isStop) {\n        let queue = [];\n        queue.push(startNode);\n\n        while (queue.length) {\n          const currNode = queue.shift(); // if the finsih node is reached then we return the visitedNodes array\n\n          if (currNode === finishNode) return visitedNodesInOrder; // we skip the nodes which are walls, start node or finish node\n\n          if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n            currNode.isVisited = true;\n            visitedNodesInOrder.push(currNode);\n            const {\n              row,\n              col\n            } = currNode;\n            updateUnvisitedNeighbours(row, col, queue, grid, currNode);\n          }\n        }\n      } else if (isStop) {\n        let queue = [];\n        let queueSecond = [];\n        queue.push(startNode);\n        queueSecond.push(stopNode);\n\n        while (queue.length) {\n          const currNode = queue.shift();\n          if (currNode === finishNode) break;\n        }\n      }\n    } // updates the neighbours,\n    // in correspondance to the algorithm \n\n\n    function updateUnvisitedNeighbours(row, col, queue, grid, currNode) {\n      let next;\n\n      if (row > 0) {\n        next = grid[row - 1][col];\n\n        if (!next.isVisited) {\n          queue.push(next);\n          next.previousNode = currNode;\n        }\n      }\n\n      if (row < grid.length - 1) {\n        next = grid[row + 1][col];\n\n        if (!next.isVisited) {\n          queue.push(next);\n          next.previousNode = currNode;\n        }\n      }\n\n      if (col > 0) {\n        next = grid[row][col - 1];\n\n        if (!next.isVisited) {\n          queue.push(next);\n          next.previousNode = currNode;\n        }\n      }\n\n      if (col < grid[0].length - 1) {\n        next = grid[row][col + 1];\n\n        if (!next.isVisited) {\n          queue.push(next);\n          next.previousNode = currNode;\n        }\n      }\n    }\n\n    const grid = message.data[0];\n    const startNode = message.data[1];\n    const finishNode = message.data[2];\n    const stopNode = message.data[3];\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode);\n    console.log(visitedNodesInOrder);\n    postMessage(visitedNodesInOrder);\n  });\n});","map":{"version":3,"names":["self","addEventListener","message","bfs","grid","startNode","finishNode","stopNode","isStop","visitedNodesInOrder","queue","push","length","currNode","shift","isWall","isStart","isVisited","row","col","updateUnvisitedNeighbours","queueSecond","next","previousNode","data","console","log","postMessage"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/breadthFirstSearchWorker.js"],"sourcesContent":["\n// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n      if (!message) return;\n        function bfs(grid, startNode, finishNode, stopNode=false) {\n            \n            var isStop;\n            if(stopNode!==false){\n                isStop = true\n            } else {\n                isStop = false\n            }\n            const visitedNodesInOrder = [];\n            // queue to keep track of the visited nodes\n            if(!isStop) {\n                let queue = [];\n                queue.push(startNode);\n                while (queue.length) {\n                    const currNode = queue.shift();\n                    // if the finsih node is reached then we return the visitedNodes array\n                    if (currNode === finishNode)\n                        return visitedNodesInOrder;\n                    \n                    // we skip the nodes which are walls, start node or finish node\n                    if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n                        currNode.isVisited = true;\n                        visitedNodesInOrder.push(currNode);\n                        const { row, col } = currNode;\n                        updateUnvisitedNeighbours(row, col, queue, grid,currNode);\n                    }\n                }\n            } else if(isStop) {\n                let queue = []\n                let queueSecond = []\n                queue.push(startNode)\n                queueSecond.push(stopNode)\n                \n                while(queue.length) {\n                    const currNode = queue.shift();\n\n                    if(currNode === finishNode) break\n\n                    \n                }\n            }\n        }\n        \n        // updates the neighbours,\n        // in correspondance to the algorithm \n        function updateUnvisitedNeighbours(row,col,queue,grid,currNode) {\n                let next;\n                if (row > 0) {\n                next = grid[row - 1][col];\n                if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                }\n                }\n                if (row < grid.length - 1) {\n                next = grid[row + 1][col];\n                if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                }\n                }\n                if (col > 0) {\n                next = grid[row][col - 1];\n                if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                }\n                }\n                if (col < grid[0].length - 1) {\n                next = grid[row][col + 1];\n                if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                }\n            }\n        }\n\n        const grid = message.data[0]\n        const startNode = message.data[1]\n        const finishNode = message.data[2]\n        const stopNode = message.data[3]\n\n        const visitedNodesInOrder = bfs(grid, startNode, finishNode)\n        console.log(visitedNodesInOrder)\n        postMessage(visitedNodesInOrder)\n    })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}