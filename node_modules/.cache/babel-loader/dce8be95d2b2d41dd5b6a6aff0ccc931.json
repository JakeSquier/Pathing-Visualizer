{"ast":null,"code":"export function aStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes) {\n    sortNodesByDistance(unvisitedNodes, finishNode);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n  // calculating f\n  const f = finishNode;\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    const af = Math.abs(f.row - nodeA.row) + Math.abs(f.col - nodeA.col);\n    const bf = Math.abs(f.row - nodeB.row) + Math.abs(f.col - nodeB.col);\n    if (nodeA) return nodeA.distance + af - (nodeB.distance + bf);\n  });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/aStar.js"],"names":["aStar","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","f","sort","nodeA","nodeB","af","Math","abs","row","col","bf","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","length","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["export function aStar(grid, startNode, finishNode){\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid)\n    while(!!unvisitedNodes){\n        sortNodesByDistance(unvisitedNodes, finishNode)\n        const closestNode = unvisitedNodes.shift();\n\n        if(closestNode.isWall) continue;\n\n        if(closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n\n        if(closestNode === finishNode) return visitedNodesInOrder;\n\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n    // calculating f\n    const f = finishNode\n    unvisitedNodes.sort((nodeA, nodeB) => {\n        const af = (Math.abs(f.row - nodeA.row)+(Math.abs(f.col - nodeA.col)))\n        const bf = (Math.abs(f.row - nodeB.row)+(Math.abs(f.col - nodeB.col)))\n        if(nodeA)\n        return (nodeA.distance+af) - (nodeB.distance+bf)\n    });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"]},"metadata":{},"sourceType":"module"}