{"ast":null,"code":"// export function dijkstra(grid, startNode, finishNode, stopNode=false){\n//   //setting up stop var to determine what to do\n//   var isStop;\n//   if(stopNode===false){\n//     isStop = false\n//   } else {\n//     isStop = true\n//   }\n//   if(!isStop){\n//     const visitedNodesInOrder = []\n//     //grabbing all nodes\n//     var unvisitedNodes = getAllNodes(grid)\n//     //setting node distances\n//     unvisitedNodes.forEach((node) => {\n//       if(node === startNode){\n//         node.distance = 0\n//       } else {\n//         node.distance = Infinity\n//       }\n//     })\n//     //starting algorithim\n//     while(!!unvisitedNodes){\n//       sortNodesByDistance(unvisitedNodes, false)\n//       const closestNode = unvisitedNodes.shift()\n//       //checking if current node is a wall\n//       if(closestNode.isWall) continue\n//       //checking if node has no where to venture to\n//       if(closestNode.distance === Infinity) return visitedNodesInOrder\n//       //update current node as visited then pushing it to visitednodes array\n//       closestNode.isVisited = true\n//       visitedNodesInOrder.push(closestNode)\n//       //checking to see is closest node is the finishnode\n//       if(closestNode === finishNode) return visitedNodesInOrder\n//       //get current nodes neighbors\n//       updateUnvisitedNeighbors(closestNode, grid, false);\n//     }\n//   } else if(isStop){\n//     //going to repeat normal function yet twice for stop\n//     const visitedNodesInOrder = [[],[]]\n//     //grabbing all nodes\n//     var unvisitedNodes = getAllNodes(grid)\n//     var unvisitedNodesSecond = getAllNodes(grid)\n//     unvisitedNodes.forEach((node) => {\n//       if(node === startNode){\n//         node.distance = 0\n//       } else if(node === stopNode) {\n//         node.distanceSecond = 0\n//       } else {\n//         node.distance = Infinity\n//         node.distanceSecond = Infinity\n//       }\n//     })\n//     //getting path from start to stop\n//     while(!!unvisitedNodes) {\n//       sortNodesByDistance(unvisitedNodes, false)\n//       const closestNode = unvisitedNodes.shift()\n//       //checking if current node is a wall\n//       if(closestNode.isWall) continue\n//       //checking if node has no where to venture to\n//       if(closestNode.distance === Infinity) break\n//       //update current node as visited then pushing it to visitednodes array\n//       closestNode.isVisited = true\n//       visitedNodesInOrder[0].push(closestNode)\n//       //checking to see is closest node is the finishnode\n//       if(closestNode === stopNode) break\n//       //get current nodes neighbors\n//       updateUnvisitedNeighbors(closestNode, grid, false);\n//     }\n//     //getting path from stop to finish\n//     var cout = 0\n//     while(!!unvisitedNodesSecond) {\n//       cout++\n//       setTimeout(\n//         () => sortNodesByDistance(unvisitedNodesSecond, true),\n//       )\n//       const closestNode = unvisitedNodesSecond.shift()\n//       if(closestNode.isWall) continue\n//       if(closestNode.distanceSecond === Infinity) break\n//       closestNode.isVisitedSecond = true\n//       visitedNodesInOrder[1].push(closestNode)\n//       if(closestNode === finishNode) break\n//       updateUnvisitedNeighbors(closestNode, grid, true)\n//     }\n//     return visitedNodesInOrder\n//   }\n// }\n// var cout = 0\n// export function dijkstra(grid, startNode, finishNode, isStop=false, waitTime=0){\n//   cout++\n//   const visitedNodesInOrder = [];\n//   var unvisitedNodes = getAllNodes(grid)\n//   //testing to see if visitation is removed\n//   unvisitedNodes.forEach((node) => {\n//     if(node === startNode){\n//       //node.distance = 0\n//       isStop ? node.distanceSecond = 0 : node.distance = 0\n//       console.log(node, node.distance, node.distanceSecond, cout, isStop)\n//     } else {\n//       isStop ? node.distanceSecond = Infinity : node.distance = Infinity\n//     }\n//   })\n//   console.log(isStop, cout)\n//   var cout2 =0\n//   while(!!unvisitedNodes){\n//       sortNodesByDistance(unvisitedNodes, isStop)\n//       const closestNode = unvisitedNodes.shift();\n//       if(closestNode.isWall) continue;\n//       if(closestNode.distance === Infinity && isStop === false) {\n//         return visitedNodesInOrder;\n//       } else if(closestNode.distanceSecond === Infinity && cout===2) {\n//         return visitedNodesInOrder\n//       }\n//       isStop ? closestNode.isVisitedSecond = true : closestNode.isVisited = true\n//       visitedNodesInOrder.push(closestNode);\n//       if(closestNode === finishNode) return visitedNodesInOrder;\n//       updateUnvisitedNeighbors(closestNode, grid, isStop);\n//   }\n// }\nfunction sortNodesByDistance(unvisitedNodes, isStop) {\n  //it is not calculating second distace correctly stays at infinity\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    if (isStop === true) {\n      //console.log(cout, nodeA.distanceSecond - nodeB.distanceSecond)\n      return nodeA.distanceSecond - nodeB.distanceSecond;\n    } else if (isStop === false) {\n      //console.log(cout, nodeA.distance - nodeB.distance)\n      return nodeA.distance - nodeB.distance;\n    }\n  });\n  var distanceCheck = [];\n\n  if (isStop) {\n    unvisitedNodes.forEach(node => {\n      if (node.distanceSecond != Infinity) distanceCheck.push(node);\n    }); //console.log(distanceCheck)\n  } //console.log(unvisitedNodes, cout)\n\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isStop) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n\n  for (const neighbor of unvisitedNeighbors) {\n    //neighbor.distance = node.distance + 1;\n    isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid, isStop) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => {\n    //isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited\n    if (isStop === true) {\n      return !neighbor.isVisitedSecond;\n    } else if (isStop === false) {\n      return !neighbor.isVisited;\n    }\n  });\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  let stop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  if (stop != false) {\n    while (true) {\n      if (currentNode.isStop != null) {\n        break;\n      }\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  } else if (stop == false) {\n    while (currentNode !== null) {\n      // if(currentNode.isStart===true) break;\n      if (currentNode.isStart == true) break; //console.log(currentNode, currentNode !== null)\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  }\n}","map":{"version":3,"names":["sortNodesByDistance","unvisitedNodes","isStop","sort","nodeA","nodeB","distanceSecond","distance","distanceCheck","forEach","node","Infinity","push","updateUnvisitedNeighbors","grid","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","length","filter","isVisitedSecond","isVisited","getAllNodes","nodes","getNodesInShortestPathOrder","finishNode","stop","nodesInShortestPathOrder","currentNode","unshift","isStart"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/dijkstra.js"],"sourcesContent":["\n// export function dijkstra(grid, startNode, finishNode, stopNode=false){\n//   //setting up stop var to determine what to do\n//   var isStop;\n//   if(stopNode===false){\n//     isStop = false\n//   } else {\n//     isStop = true\n//   }\n//   if(!isStop){\n//     const visitedNodesInOrder = []\n//     //grabbing all nodes\n//     var unvisitedNodes = getAllNodes(grid)\n\n//     //setting node distances\n//     unvisitedNodes.forEach((node) => {\n//       if(node === startNode){\n//         node.distance = 0\n//       } else {\n//         node.distance = Infinity\n//       }\n//     })\n\n//     //starting algorithim\n//     while(!!unvisitedNodes){\n//       sortNodesByDistance(unvisitedNodes, false)\n//       const closestNode = unvisitedNodes.shift()\n\n//       //checking if current node is a wall\n//       if(closestNode.isWall) continue\n\n//       //checking if node has no where to venture to\n//       if(closestNode.distance === Infinity) return visitedNodesInOrder\n\n//       //update current node as visited then pushing it to visitednodes array\n//       closestNode.isVisited = true\n//       visitedNodesInOrder.push(closestNode)\n\n//       //checking to see is closest node is the finishnode\n//       if(closestNode === finishNode) return visitedNodesInOrder\n\n//       //get current nodes neighbors\n//       updateUnvisitedNeighbors(closestNode, grid, false);\n//     }\n//   } else if(isStop){\n//     //going to repeat normal function yet twice for stop\n//     const visitedNodesInOrder = [[],[]]\n//     //grabbing all nodes\n//     var unvisitedNodes = getAllNodes(grid)\n\n//     var unvisitedNodesSecond = getAllNodes(grid)\n\n//     unvisitedNodes.forEach((node) => {\n//       if(node === startNode){\n//         node.distance = 0\n//       } else if(node === stopNode) {\n//         node.distanceSecond = 0\n//       } else {\n//         node.distance = Infinity\n//         node.distanceSecond = Infinity\n//       }\n//     })\n\n//     //getting path from start to stop\n//     while(!!unvisitedNodes) {\n//       sortNodesByDistance(unvisitedNodes, false)\n//       const closestNode = unvisitedNodes.shift()\n\n//       //checking if current node is a wall\n//       if(closestNode.isWall) continue\n\n//       //checking if node has no where to venture to\n//       if(closestNode.distance === Infinity) break\n\n//       //update current node as visited then pushing it to visitednodes array\n//       closestNode.isVisited = true\n//       visitedNodesInOrder[0].push(closestNode)\n\n//       //checking to see is closest node is the finishnode\n//       if(closestNode === stopNode) break\n\n//       //get current nodes neighbors\n//       updateUnvisitedNeighbors(closestNode, grid, false);\n//     }\n    \n//     //getting path from stop to finish\n//     var cout = 0\n//     while(!!unvisitedNodesSecond) {\n//       cout++\n//       setTimeout(\n//         () => sortNodesByDistance(unvisitedNodesSecond, true),\n//       )\n//       const closestNode = unvisitedNodesSecond.shift()\n\n//       if(closestNode.isWall) continue\n\n//       if(closestNode.distanceSecond === Infinity) break\n\n//       closestNode.isVisitedSecond = true\n//       visitedNodesInOrder[1].push(closestNode)\n\n//       if(closestNode === finishNode) break\n\n//       updateUnvisitedNeighbors(closestNode, grid, true)\n//     }\n//     return visitedNodesInOrder\n//   }\n// }\n// var cout = 0\n// export function dijkstra(grid, startNode, finishNode, isStop=false, waitTime=0){\n//   cout++\n//   const visitedNodesInOrder = [];\n//   var unvisitedNodes = getAllNodes(grid)\n//   //testing to see if visitation is removed\n\n//   unvisitedNodes.forEach((node) => {\n//     if(node === startNode){\n//       //node.distance = 0\n//       isStop ? node.distanceSecond = 0 : node.distance = 0\n//       console.log(node, node.distance, node.distanceSecond, cout, isStop)\n//     } else {\n//       isStop ? node.distanceSecond = Infinity : node.distance = Infinity\n//     }\n//   })\n//   console.log(isStop, cout)\n//   var cout2 =0\n//   while(!!unvisitedNodes){\n\n//       sortNodesByDistance(unvisitedNodes, isStop)\n//       const closestNode = unvisitedNodes.shift();\n\n//       if(closestNode.isWall) continue;\n\n//       if(closestNode.distance === Infinity && isStop === false) {\n//         return visitedNodesInOrder;\n//       } else if(closestNode.distanceSecond === Infinity && cout===2) {\n//         return visitedNodesInOrder\n//       }\n\n//       isStop ? closestNode.isVisitedSecond = true : closestNode.isVisited = true\n//       visitedNodesInOrder.push(closestNode);\n\n//       if(closestNode === finishNode) return visitedNodesInOrder;\n\n//       updateUnvisitedNeighbors(closestNode, grid, isStop);\n//   }\n// }\n\nfunction sortNodesByDistance(unvisitedNodes, isStop) {\n    //it is not calculating second distace correctly stays at infinity\n    unvisitedNodes.sort((nodeA, nodeB) => {\n      if(isStop===true) {\n        //console.log(cout, nodeA.distanceSecond - nodeB.distanceSecond)\n        return nodeA.distanceSecond - nodeB.distanceSecond\n      } else if(isStop===false) {\n        //console.log(cout, nodeA.distance - nodeB.distance)\n        return nodeA.distance - nodeB.distance\n      }\n    });\n    var distanceCheck = []\n    if(isStop){\n      unvisitedNodes.forEach((node) => {\n        if(node.distanceSecond != Infinity) distanceCheck.push(node)\n      })\n      //console.log(distanceCheck)\n    }\n    //console.log(unvisitedNodes, cout)\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isStop) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n    for (const neighbor of unvisitedNeighbors) {\n      //neighbor.distance = node.distance + 1;\n      isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid, isStop) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter((neighbor) => {\n      //isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited\n      if(isStop===true){\n        return !neighbor.isVisitedSecond\n      } else if(isStop===false){\n        return !neighbor.isVisited\n      }\n    });\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode, stop=false) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    if(stop!=false){\n      while (true){\n\n        if(currentNode.isStop!=null){\n          break\n        }\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n      }\n      return nodesInShortestPathOrder;\n    }else if(stop==false){\n      while (currentNode !== null) {\n        // if(currentNode.isStart===true) break;\n        if(currentNode.isStart==true) break;\n        //console.log(currentNode, currentNode !== null)\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n      }\n      return nodesInShortestPathOrder;\n    }\n}"],"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"},"metadata":{},"sourceType":"module"}