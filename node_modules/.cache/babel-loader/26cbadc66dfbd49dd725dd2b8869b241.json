{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\";\nimport React, { Component, useState, useEffect } from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithims/dijkstra';\nimport { aStar } from '../algorithims/aStar';\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data';\nimport algData from '../data/alg-data';\nimport './mainContainer.css';\nimport { ContactlessOutlined } from '@material-ui/icons'; // const START_NODE_ROW = 10;\n// const START_NODE_COL = 5;\n// const FINISH_NODE_ROW = 10;\n// const FINISH_NODE_COL = 45;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MainContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleWindowResize = () => {\n      console.log('changing');\n    };\n\n    this.renderResizeGrid = (windowHeight, windowWidth) => {};\n\n    this.handleMouseDown = (row, col) => {\n      var newGrid = this.state.grid;\n\n      if (this.state.grid[row][col].isStart) {\n        this.setState({\n          startIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.grid[row][col].isFinish) {\n        this.setState({\n          finishIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Weight') {\n        newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        this.setState({\n          stopIsMoving: true,\n          isThereStop: true\n        });\n      }\n\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n\n    this.handleMouseEnter = (row, col) => {\n      if (!this.state.mouseIsPressed) return;\n      var newGrid = this.state.grid;\n\n      if (this.state.startIsMoving) {\n        newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode);\n        this.setState({\n          startNode: [row, col]\n        });\n      } else if (this.state.finishIsMoving) {\n        newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode);\n        this.setState({\n          finishNode: [row, col]\n        });\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n      } else if (this.state.currItemDesc === 'Weight') {\n        newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n        this.setState({\n          prevStop: [row, col]\n        });\n      }\n\n      this.setState({\n        grid: newGrid\n      });\n    };\n\n    this.handleMouseUp = (row, col) => {\n      this.setState({\n        mouseIsPressed: false,\n        startIsMoving: false,\n        finishIsMoving: false\n      });\n    };\n\n    this.handleNav = () => {\n      this.setState({\n        showNav: !this.state.showNav\n      });\n    };\n\n    this.handleItemDescChange = (e, item) => {\n      var newItem = `${item}`;\n      itemData.map(_item => {\n        if (item === _item.id) {\n          this.setState({\n            currItemDesc: newItem,\n            currItemObj: _item\n          });\n        }\n      });\n    };\n\n    this.handleTabs = (e, val) => {\n      this.setState({\n        currAlgTab: val,\n        currAlgObj: algData[val]\n      });\n    };\n\n    this.handleMazeTabs = (e, val) => {\n      this.setState({\n        currMazeTab: val\n      });\n      console.log(val);\n    };\n\n    this.generateMaze = e => {\n      var currAlg = this.state.currMazeTab;\n\n      if (currAlg === 0) {\n        this.generateRecursiveDivisionMaze();\n        console.log('hi');\n      } else if (currAlg === 1) {\n        this.generateVerticalMaze();\n      } else if (currAlg === 2) {\n        this.generateHorizontalMaze();\n      } else if (currAlg === 3) {\n        this.generateRandomMaze();\n      }\n    };\n\n    this.resetGrid = e => {\n      this.clearGrid();\n    };\n\n    this.clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      var rowNum = (window.innerHeight - 25) / 25 - 2;\n      var colNum = (window.innerWidth - 20) / 25;\n      const grid = this.state.grid;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if (row === startNode[0] && col === startNode[1]) {\n            console.log('isStartNode');\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if (row === finishNode[0] && col === finishNode[1]) {\n            console.log('isfinishnode');\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false\n      });\n    };\n\n    this.playAnimation = e => {\n      var currAlg = this.state.currAlgObj.id;\n\n      if (currAlg === 0) {\n        this.visualizeDijkstra();\n      } else if (currAlg === 1) {\n        this.visualizeaStar();\n      } else if (currAlg === 6) {\n        this.visualizbfs();\n      } else if (currAlg === 2) {\n        this.visualizegbfs();\n      } else if (currAlg === 7) {\n        this.visualizegdfs();\n      } else if (currAlg === 3) {\n        this.visualizeBidirectionalGreedySearch();\n        console.log('here');\n      }\n\n      return;\n    };\n\n    this.visualizeDijkstra = () => {\n      const grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n      var visitedNodesInOrder = [];\n      var visitedNodesInOrderSecond = [];\n\n      if (this.state.isThereStop) {\n        visitedNodesInOrder = dijkstra(grid, startNode, stopNode);\n        visitedNodesInOrderSecond = dijkstra(this.state.grid, stopNode, finishNode, true);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode, stopNode);\n        var waitTime = visitedNodesInOrder.length * 10;\n        console.log(visitedNodesInOrder, visitedNodesInOrderSecond);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n        setTimeout(() => this.animateDijkstra(visitedNodesInOrderSecond, nodesInShortestPathOrder, true), waitTime);\n      } else if (!this.state.isThereStop) {\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n      }\n    };\n\n    this.animateMaze = walls => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({\n              grid: newGrid,\n              generatingMaze: false\n            });\n          }, i * 10);\n          return;\n        }\n\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true;\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      showNav: false,\n      currItemDesc: 'Start',\n      currItemObj: itemData[0],\n      currAlgObj: algData[0],\n      currAlgTab: 0,\n      currMazeAlg: 'Recursive Division Maze',\n      currMazeTab: 0,\n      startNode: [10, 5],\n      finishNode: [10, 45],\n      startIsMoving: false,\n      finishIsMoving: false,\n      isThereStop: false,\n      stopIsMoving: false,\n      prevStop: [],\n      generatingMaze: false,\n      visualizingAlgorithm: false\n    };\n  }\n\n  componentDidMount() {\n    // window.addEventListener('resize', (e) => {\n    //   console.log(e.target.innerHeight)\n    //   renderGrid(this.state)\n    // })\n    const grid = renderGrid(this.state);\n    this.setState({\n      grid\n    });\n  }\n\n  componentWillUnmount() {// window.removeEventListener('resize', (e) => {\n    //   console.log('changing2')\n    // })\n  }\n\n  //animte dijkstra\n  async animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder, isSecondAnimation = false) {\n    var animationColor = '';\n\n    if (isSecondAnimation) {\n      animationColor = 'node-target-visited';\n    } else if (!isSecondAnimation) {\n      animationColor = 'node-visited';\n    }\n\n    var isFinishClass = '';\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        if (isSecondAnimation == false && this.state.isThereStop) {\n          console.log('here');\n          return;\n        }\n\n        setTimeout(() => this.animateShortestPath(nodesInShortestPathOrder), i * 10);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if (node.isFinish && this.state.isThereStop) {\n          isFinishClass = 'node-finish';\n        } else if (!node.isFinish) {\n          isFinishClass = '';\n        }\n\n        document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor} ${isFinishClass}`;\n      }, 10 * i);\n    }\n  }\n\n  //animate aStar\n  animateaStar(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizeaStar() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n  } //animate breadth first search \n\n\n  animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizbfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // greedy best first search\n\n\n  animategbfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizegbfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // depth first search\n\n\n  animatedfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizegdfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // bidirectional greedy first search\n\n\n  animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath) {\n    let len = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n    for (let i = 1; i <= len; i++) {\n      let nodeA = visitedNodesInOrderStart[i];\n      let nodeB = visitedNodesInOrderFinish[i];\n\n      if (i === visitedNodesInOrderStart.length) {\n        setTimeout(() => {\n          let visitedNodesInOrder = getVisitedNodesInOrder(visitedNodesInOrderStart, visitedNodesInOrderFinish);\n\n          if (isShortedPath) {\n            this.animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\n          } else {\n            this.setState({\n              visualizingAlgorithm: false\n            });\n          }\n        }, i * 10);\n        return;\n      }\n\n      setTimeout(() => {\n        //visited nodes\n        if (nodeA !== undefined) document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = \"node node-visited\";\n        if (nodeB !== undefined) document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = \"node node-visited\";\n      }, i * 10);\n    }\n  }\n\n  visualizeBidirectionalGreedySearch() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      visualizingAlgorithm: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const visitedNodesInOrder = bidirectionalGreedySearch(grid, startNode, finishNode);\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n      const isShortedPath = visitedNodesInOrder[2];\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1], visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]);\n      console.log('here');\n      this.animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath);\n    }, 10);\n  } //finish animations\n\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  } //generate mazes\n\n\n  generateRandomMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = randomMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateRecursiveDivisionMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateVerticalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = verticalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateHorizontalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = horizontalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-container\",\n        children: /*#__PURE__*/_jsxDEV(Visualizer, {\n          state: this.state,\n          handleMouseDown: this.handleMouseDown,\n          handleMouseEnter: this.handleMouseEnter,\n          handleMouseUp: this.handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        state: this.state,\n        toggleNav: this.handleNav,\n        resetGrid: this.resetGrid,\n        handleMazeTabs: this.handleMazeTabs,\n        genMaze: this.generateMaze,\n        play: this.playAnimation,\n        handleTabs: this.handleTabs,\n        handleItemChange: this.handleItemDescChange,\n        visualizeDijkstra: this.visualizeDijkstra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = state => {\n  const grid = [];\n  var rowNum = window.innerHeight / 25 + 3;\n  var colNum = window.innerWidth / 25 + 2;\n\n  for (let row = 0; row < rowNum; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < colNum; col++) {\n      var node = createNode(col, row, state);\n      node.className = 'node';\n      currentRow.push(node);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row, state) => {\n  const startNode = state.startNode;\n  const finishNode = state.finishNode;\n  const stopNode = state.prevStop;\n  return {\n    col,\n    row,\n    isStart: row === startNode[0] && col === startNode[1],\n    isFinish: row === finishNode[0] && col === finishNode[1],\n    isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n    distance: Infinity,\n    isVisited: false,\n    isVisitedSecond: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst rerenderGrid = state => {\n  const grid = state.grid;\n  const startNode = grid[state.startNode[0]][state.startNode[1]];\n  const finishNode = grid[state.finishNode[0]][state.finishNode[1]];\n\n  for (let row = 0; row < grid.length; row++) {\n    var colNum = grid[row];\n\n    for (let col = 0; col < colNum.length; col++) {\n      var node = grid[row][col];\n\n      if (node.isWall || node.isWeight || node.isStop) {\n        node.isWall = false;\n        node.isWeight = false;\n        node.isStop = false;\n        node.isVisited = false;\n      }\n\n      if (node === startNode) {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-start\";\n      } else if (node === finishNode) {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-finish\";\n      } else {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node\";\n      }\n    }\n  }\n\n  return grid;\n};\n\nconst getNewGridWithStart = (grid, row, col, prevStart) => {\n  const newGrid = grid.slice();\n  const newStart = newGrid[row][col];\n  const oldStart = newGrid[prevStart[0]][prevStart[1]];\n  const oldNode = { ...oldStart,\n    isStart: !oldStart.isStart\n  };\n  const newNode = { ...newStart,\n    isStart: !newStart.isStart\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStart[0]][prevStart[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinish = (grid, row, col, prevFinish) => {\n  const newGrid = grid.slice();\n  if (newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n  const newFinish = newGrid[row][col];\n  const oldFinish = newGrid[prevFinish[0]][prevFinish[1]];\n  const oldNode = { ...oldFinish,\n    isFinish: !oldFinish.isFinish\n  };\n  const newNode = { ...newFinish,\n    isFinish: !newFinish.isFinish\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevFinish[0]][prevFinish[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithWeightToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWeight: !node.isWeight\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n  const newGrid = grid.slice();\n  const newStop = newGrid[row][col];\n\n  if (prevStop.length === 0) {\n    const newNode = { ...newStop,\n      isStop: !newStop.isStop\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  const oldStop = newGrid[prevStop[0]][prevStop[1]];\n  const oldNode = { ...oldStop,\n    isStop: !oldStop.isStop\n  };\n  const newNode = { ...newStop,\n    isStop: !newStop.isStop\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStop[0]][prevStop[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = { ...node,\n      isWall: true\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n\n  return newGrid;\n};\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst getVisitedNodesInOrder = (visitedNodesInOrderStart, visitedNodesInOrderFinish) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n\n  return visitedNodesInOrder;\n};\n\nconst getGridWithoutPath = grid => {\n  let newGrid = grid.slice();\n\n  for (let row of grid) {\n    for (let node of row) {\n      let newNode = { ...node,\n        distance: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isVisitedSecond: false,\n        isShortest: false,\n        previousNode: null,\n        isWall: false,\n        isWeight: false,\n        isStop: false\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"names":["React","Component","useState","useEffect","Visualizer","dijkstra","getNodesInShortestPathOrder","aStar","breadthFirstSearch","greedyBFS","depthFirstSearch","randomMaze","verticalMaze","horizontalMaze","recursiveDivisionMaze","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","Navbar","itemData","algData","ContactlessOutlined","MainContainer","constructor","props","handleWindowResize","console","log","renderResizeGrid","windowHeight","windowWidth","handleMouseDown","row","col","newGrid","state","grid","isStart","setState","startIsMoving","isFinish","finishIsMoving","currItemDesc","getNewGridWithWallToggled","getNewGridWithWeightToggled","stopIsMoving","isThereStop","mouseIsPressed","handleMouseEnter","getNewGridWithStart","startNode","getNewGridWithFinish","finishNode","getNewGridWithStopToggled","prevStop","handleMouseUp","handleNav","showNav","handleItemDescChange","e","item","newItem","map","_item","id","currItemObj","handleTabs","val","currAlgTab","currAlgObj","handleMazeTabs","currMazeTab","generateMaze","currAlg","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","generateRandomMaze","resetGrid","clearGrid","visualizingAlgorithm","generatingMaze","rowNum","window","innerHeight","colNum","innerWidth","length","document","getElementById","className","getGridWithoutPath","playAnimation","visualizeDijkstra","visualizeaStar","visualizbfs","visualizegbfs","visualizegdfs","visualizeBidirectionalGreedySearch","START_NODE","FINISH_NODE","STOP_NODE","stopNode","visitedNodesInOrder","visitedNodesInOrderSecond","nodesInShortestPathOrder","waitTime","animateDijkstra","setTimeout","animateMaze","walls","i","getNewGridWithMaze","wall","node","isWall","currMazeAlg","componentDidMount","renderGrid","componentWillUnmount","isSecondAnimation","animationColor","isFinishClass","animateShortestPath","animateaStar","_startNode","_finishNode","animatebfs","animategbfs","animatedfs","animateBidirectionalAlgorithm","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","len","Math","max","nodeA","nodeB","getVisitedNodesInOrder","undefined","render","currentRow","createNode","push","isStop","distance","Infinity","isVisited","isVisitedSecond","previousNode","rerenderGrid","isWeight","prevStart","slice","newStart","oldStart","oldNode","newNode","prevFinish","newFinish","oldFinish","newStop","oldStop","getInitialGrid","numRows","numColumns","n","totalDistance","isShortest"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect} from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithims/dijkstra';\nimport {aStar} from '../algorithims/aStar'\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data'\nimport algData from '../data/alg-data'\nimport './mainContainer.css'\nimport { ContactlessOutlined } from '@material-ui/icons';\n\n// const START_NODE_ROW = 10;\n// const START_NODE_COL = 5;\n// const FINISH_NODE_ROW = 10;\n// const FINISH_NODE_COL = 45;\n\nexport default class MainContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start',\n            currItemObj: itemData[0],\n            currAlgObj: algData[0],\n            currAlgTab: 0,\n            currMazeAlg: 'Recursive Division Maze',\n            currMazeTab: 0,\n            startNode: [10, 5],\n            finishNode: [10, 45],\n            startIsMoving: false,\n            finishIsMoving: false,\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            generatingMaze: false,\n            visualizingAlgorithm: false\n        }\n    }\n\n    handleWindowResize = () => {\n      console.log('changing')\n    }\n\n    componentDidMount() {\n      // window.addEventListener('resize', (e) => {\n      //   console.log(e.target.innerHeight)\n      //   renderGrid(this.state)\n      // })\n      const grid = renderGrid(this.state);\n      this.setState({grid});\n    }\n\n    componentWillUnmount(){\n      // window.removeEventListener('resize', (e) => {\n      //   console.log('changing2')\n      // })\n    }\n\n    renderResizeGrid = (windowHeight, windowWidth) => {\n\n    }\n\n    handleMouseDown = (row, col) => {\n        var newGrid = this.state.grid\n        if(this.state.grid[row][col].isStart){\n          this.setState({startIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.grid[row][col].isFinish){\n          this.setState({finishIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Stop'){\n          this.setState({stopIsMoving: true, isThereStop: true})\n        }\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter = (row, col) => {\n        if (!this.state.mouseIsPressed) return;\n        var newGrid = this.state.grid;\n        if(this.state.startIsMoving){\n          newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode)\n          this.setState({startNode: [row, col]})\n        } \n        else if(this.state.finishIsMoving){\n          newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode)\n          this.setState({finishNode: [row, col]})\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        }  else if(this.state.currItemDesc === 'Stop'){\n          newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n          this.setState({prevStop: [row, col]})\n        }\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp = (row, col) => {\n        this.setState({mouseIsPressed: false, startIsMoving: false, finishIsMoving: false});\n    }\n\n    handleNav = () => {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    //navBar functions\n    handleItemDescChange = (e, item) => {\n      var newItem = `${item}`\n      itemData.map((_item) => {\n        if(item === _item.id){this.setState({currItemDesc: newItem, currItemObj: _item})}\n      })\n    }\n\n    handleTabs = (e, val) => {\n      this.setState({currAlgTab: val, currAlgObj: algData[val]})\n    }\n\n    handleMazeTabs = (e, val) => {\n      this.setState({currMazeTab: val})\n      console.log(val)\n    }\n\n    generateMaze = (e) => {\n      var currAlg = this.state.currMazeTab\n      \n      if(currAlg===0){\n        this.generateRecursiveDivisionMaze()\n        console.log('hi')\n      } else if(currAlg===1){\n        this.generateVerticalMaze()\n      } else if(currAlg===2){\n        this.generateHorizontalMaze()\n      } else if(currAlg===3){\n        this.generateRandomMaze()\n      }\n    }\n\n    resetGrid = (e) => {\n      this.clearGrid()\n    }\n\n    clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      var rowNum = ((window.innerHeight-25) / 25)-2\n      var colNum = (window.innerWidth-20) / 25\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            console.log('isStartNode')\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            console.log('isfinishnode')\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n      });\n    }\n\n    // play animation\n\n    playAnimation = (e) => {\n      var currAlg = this.state.currAlgObj.id\n      if(currAlg===0){\n        this.visualizeDijkstra()\n      } else if(currAlg===1){\n        this.visualizeaStar()\n      } else if(currAlg===6){\n        this.visualizbfs()\n      } else if(currAlg===2){\n        this.visualizegbfs()\n      } else if(currAlg===7){\n        this.visualizegdfs()\n      } else if(currAlg===3){\n        this.visualizeBidirectionalGreedySearch()\n        console.log('here')\n      }\n      return\n    }\n\n    //animte dijkstra\n\n    async animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder, isSecondAnimation=false) {\n      var animationColor = ''\n      if(isSecondAnimation){\n        animationColor = 'node-target-visited'\n      }else if(!isSecondAnimation){\n        animationColor = 'node-visited'\n      }\n      var isFinishClass = ''\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if(isSecondAnimation==false && this.state.isThereStop){\n            console.log('here')\n            return\n          }\n          setTimeout(\n            () => this.animateShortestPath(nodesInShortestPathOrder),\n            i * 10\n          )\n          return;\n        }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          if(node.isFinish && this.state.isThereStop){\n            isFinishClass = 'node-finish'\n          }else if(!node.isFinish){\n            isFinishClass = ''\n          }\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            `node ${animationColor} ${isFinishClass}`;\n        }, 10 * i);\n      }\n    }\n    \n    visualizeDijkstra = () => {\n      const grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      var visitedNodesInOrder = []\n      var visitedNodesInOrderSecond = []\n      if(this.state.isThereStop){\n        visitedNodesInOrder = dijkstra(grid, startNode, stopNode)\n        visitedNodesInOrderSecond = dijkstra(this.state.grid, stopNode, finishNode, true)\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode, stopNode);\n        var waitTime = visitedNodesInOrder.length * 10\n        console.log(visitedNodesInOrder, visitedNodesInOrderSecond)\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder)\n        setTimeout(\n          () => this.animateDijkstra(visitedNodesInOrderSecond, nodesInShortestPathOrder, true),\n          waitTime\n        )\n      } else if(!this.state.isThereStop){\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder)\n      }\n    }\n\n    //animate aStar\n\n    animateaStar(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizeaStar() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    //animate breadth first search \n\n    animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizbfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    // greedy best first search\n\n    animategbfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizegbfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    // depth first search\n\n    animatedfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizegdfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    // bidirectional greedy first search\n\n    animateBidirectionalAlgorithm(\n      visitedNodesInOrderStart,\n      visitedNodesInOrderFinish,\n      nodesInShortestPathOrder,\n      isShortedPath\n    ) {\n      let len = Math.max(\n        visitedNodesInOrderStart.length,\n        visitedNodesInOrderFinish.length\n      );\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n        if (i === visitedNodesInOrderStart.length) {\n          setTimeout(() => {\n            let visitedNodesInOrder = getVisitedNodesInOrder(\n              visitedNodesInOrderStart,\n              visitedNodesInOrderFinish\n            );\n            if (isShortedPath) {\n              this.animateShortestPath(\n                nodesInShortestPathOrder,\n                visitedNodesInOrder\n              );\n            } else {\n              this.setState({ visualizingAlgorithm: false });\n            }\n          }, i * 10);\n          return;\n        }\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined)\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\n              \"node node-visited\";\n          if (nodeB !== undefined)\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\n              \"node node-visited\";\n        }, i * 10);\n      }\n    }\n\n    visualizeBidirectionalGreedySearch() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ visualizingAlgorithm: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]];\n        const finishNode = grid[_finishNode[0]][_finishNode[1]];\n        const visitedNodesInOrder = bidirectionalGreedySearch(\n          grid,\n          startNode,\n          finishNode\n        );\n        const visitedNodesInOrderStart = visitedNodesInOrder[0];\n        const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n        const isShortedPath = visitedNodesInOrder[2];\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\n          visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n          visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n        );\n        console.log('here')\n        this.animateBidirectionalAlgorithm(\n          visitedNodesInOrderStart,\n          visitedNodesInOrderFinish,\n          nodesInShortestPathOrder,\n          isShortedPath\n        );\n      }, 10);\n    }\n\n    //finish animations\n\n    animateShortestPath(nodesInShortestPathOrder) {\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path';\n        }, 50 * i);\n      }\n    }\n\n    //generate mazes\n\n    animateMaze = (walls) => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({ grid: newGrid, generatingMaze: false });\n          }, i * 10);\n          return;\n        }\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    generateRandomMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = randomMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateRecursiveDivisionMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateVerticalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = verticalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateHorizontalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = horizontalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n\n    render(){ \n        return(\n            <div className=\"main-container\">\n                {/* <button onClick={this.handleNav}>show nav</button> */}\n                <div className=\"visualizer-container\">\n                    <Visualizer \n                        state={this.state} \n                        handleMouseDown={this.handleMouseDown} \n                        handleMouseEnter={this.handleMouseEnter} \n                        handleMouseUp={this.handleMouseUp}\n                    />\n                </div>\n                <Navbar state={this.state} toggleNav={this.handleNav} resetGrid={this.resetGrid} handleMazeTabs={this.handleMazeTabs} genMaze={this.generateMaze} play={this.playAnimation} handleTabs={this.handleTabs} handleItemChange={this.handleItemDescChange} visualizeDijkstra={this.visualizeDijkstra}/>\n            </div>\n        )\n    }\n}\n\nconst renderGrid = (state) => {\n    const grid = [];\n    var rowNum = ((window.innerHeight) / 25) + 3\n    var colNum = ((window.innerWidth) / 25) + 2\n    for (let row = 0; row < rowNum; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colNum; col++) {\n        var node = createNode(col, row, state)\n        node.className = 'node'\n        currentRow.push(node);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\n\n\nconst createNode = (col, row, state) => {\n    const startNode = state.startNode\n    const finishNode = state.finishNode\n    const stopNode = state.prevStop\n    return {\n      col,\n      row,\n      isStart: row === startNode[0] && col === startNode[1],\n      isFinish: row === finishNode[0] && col === finishNode[1],\n      isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n      distance: Infinity,\n      isVisited: false,\n      isVisitedSecond: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n\n  const rerenderGrid = (state) => {\n    const grid = state.grid\n    const startNode = grid[state.startNode[0]][state.startNode[1]]\n    const finishNode = grid[state.finishNode[0]][state.finishNode[1]]\n    for(let row = 0; row < grid.length; row++){\n      var colNum = grid[row]\n      for(let col = 0; col < colNum.length; col++){\n        var node = grid[row][col]\n        if(node.isWall || node.isWeight || node.isStop){\n          node.isWall = false\n          node.isWeight = false\n          node.isStop = false\n          node.isVisited = false\n        }\n        if(node === startNode){\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-start\";\n        } else if(node === finishNode){\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-finish\";\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node\";\n        }\n      }\n    }\n    return grid\n\n  }\n\n  const getNewGridWithStart = (grid, row, col, prevStart) => {\n    const newGrid = grid.slice();\n    const newStart = newGrid[row][col];\n    const oldStart = newGrid[prevStart[0]][prevStart[1]]\n    const oldNode = {\n      ...oldStart,\n      isStart: !oldStart.isStart\n    }\n    const newNode = {\n      ...newStart,\n      isStart: !newStart.isStart,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStart[0]][prevStart[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithFinish = (grid, row, col, prevFinish) => {\n    const newGrid = grid.slice();\n    if(newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n    const newFinish = newGrid[row][col];\n    const oldFinish = newGrid[prevFinish[0]][prevFinish[1]]\n    const oldNode = {\n      ...oldFinish,\n      isFinish: !oldFinish.isFinish\n    }\n    const newNode = {\n      ...newFinish,\n      isFinish: !newFinish.isFinish,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevFinish[0]][prevFinish[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithWeightToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWeight: !node.isWeight,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n    const newGrid = grid.slice();\n    const newStop = newGrid[row][col];\n    if(prevStop.length === 0){\n      const newNode = {\n        ...newStop,\n        isStop: !newStop.isStop,\n      };\n      newGrid[row][col] = newNode;\n      return newGrid;\n    }\n    const oldStop = newGrid[prevStop[0]][prevStop[1]]\n    const oldNode = {\n      ...oldStop,\n      isStop: !oldStop.isStop\n    }\n    const newNode = {\n      ...newStop,\n      isStop: !newStop.isStop,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStop[0]][prevStop[1]] = oldNode\n    return newGrid;\n  };\n\n  const getNewGridWithMaze = (grid, walls) => {\n    let newGrid = grid.slice();\n    for (let wall of walls) {\n      let node = grid[wall[0]][wall[1]];\n      let newNode = {\n        ...node,\n        isWall: true,\n      };\n      newGrid[wall[0]][wall[1]] = newNode;\n    }\n    return newGrid;\n  };\n\n  const getInitialGrid = (numRows, numColumns) => {\n    let grid = [];\n    for (let row = 0; row < numRows; row++) {\n      let currentRow = [];\n      for (let col = 0; col < numColumns; col++) {\n        currentRow.push(createNode(row, col));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const getVisitedNodesInOrder = (\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish\n  ) => {\n    let visitedNodesInOrder = [];\n    let n = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 0; i < n; i++) {\n      if (visitedNodesInOrderStart[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n      }\n      if (visitedNodesInOrderFinish[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n      }\n    }\n    return visitedNodesInOrder;\n  };\n\n  const getGridWithoutPath = (grid) => {\n    let newGrid = grid.slice();\n    for (let row of grid) {\n      for (let node of row) {\n        let newNode = {\n          ...node,\n          distance: Infinity,\n          totalDistance: Infinity,\n          isVisited: false,\n          isVisitedSecond: false,\n          isShortest: false,\n          previousNode: null,\n          isWall: false,\n          isWeight: false,\n          isStop: false\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    return newGrid;\n  };"]},"metadata":{},"sourceType":"module"}