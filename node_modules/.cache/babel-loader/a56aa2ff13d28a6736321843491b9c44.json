{"ast":null,"code":"export function dijkstra(grid, startNode, finishNode, stopNode = false) {\n  //setting up stop var to determine what to do\n  var isStop;\n\n  if (stopNode === false) {\n    isStop = false;\n  } else {\n    isStop = true;\n  }\n\n  if (!isStop) {\n    const visitedNodesInOrder = []; //grabbing all nodes\n\n    var unvisitedNodes = getAllNodes(grid); //setting node distances\n\n    unvisitedNodes.forEach(node => {\n      if (node === startNode) {\n        node.distance = 0;\n      } else {\n        node.distance = Infinity;\n      }\n    }); //starting algorithim\n\n    while (!!unvisitedNodes) {\n      sortNodesByDistance(unvisitedNodes, isStop);\n      const closestNode = unvisitedNodes.shift(); //checking if current node is a wall\n\n      if (closestNode.isWall) continue; //checking if node has no where to venture to\n\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    }\n  }\n} // var cout = 0\n// export function dijkstra(grid, startNode, finishNode, isStop=false){\n//   cout++\n//   const visitedNodesInOrder = [];\n//   var unvisitedNodes = getAllNodes(grid)\n//   //testing to see if visitation is removed\n//   unvisitedNodes.forEach((node) => {\n//     if(node === startNode){\n//       //node.distance = 0\n//       isStop ? node.distanceSecond = 0 : node.distance = 0\n//       console.log(node, node.distance, node.distanceSecond, cout, isStop)\n//     } else {\n//       isStop ? node.distanceSecond = Infinity : node.distance = Infinity\n//     }\n//   })\n//   console.log(isStop, cout)\n//   var cout2 =0\n//   while(!!unvisitedNodes){\n//       sortNodesByDistance(unvisitedNodes, isStop)\n//       const closestNode = unvisitedNodes.shift();\n//       if(closestNode.isWall) continue;\n//       if(closestNode.distance === Infinity && isStop === false) {\n//         return visitedNodesInOrder;\n//       } else if(closestNode.distanceSecond === Infinity && cout===2) {\n//         return visitedNodesInOrder\n//       }\n//       isStop ? closestNode.isVisitedSecond = true : closestNode.isVisited = true\n//       visitedNodesInOrder.push(closestNode);\n//       if(closestNode === finishNode) return visitedNodesInOrder;\n//       updateUnvisitedNeighbors(closestNode, grid, isStop);\n//   }\n// }\n\nfunction sortNodesByDistance(unvisitedNodes, isStop) {\n  //it is not calculating second distace correctly stays at infinity\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    if (isStop === true) {\n      //console.log(cout, nodeA.distanceSecond - nodeB.distanceSecond)\n      return nodeA.distanceSecond - nodeB.distanceSecond;\n    } else if (isStop === false) {\n      //console.log(cout, nodeA.distance - nodeB.distance)\n      return nodeA.distance - nodeB.distance;\n    }\n  });\n  var distanceCheck = [];\n\n  if (isStop) {\n    unvisitedNodes.forEach(node => {\n      if (node.distanceSecond != Infinity) distanceCheck.push(node);\n    });\n    console.log(distanceCheck);\n  } //console.log(unvisitedNodes, cout)\n\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isStop) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n\n  for (const neighbor of unvisitedNeighbors) {\n    //neighbor.distance = node.distance + 1;\n    isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid, isStop) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => {\n    //isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited\n    if (isStop === true) {\n      return !neighbor.isVisitedSecond;\n    } else if (isStop === false) {\n      return !neighbor.isVisited;\n    }\n  });\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode, stop = false) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  if (stop != false) {\n    while (true) {\n      if (currentNode.isStop != null) {\n        break;\n      }\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  } else if (stop == false) {\n    while (currentNode !== null) {\n      // if(currentNode.isStart===true) break;\n      if (currentNode.isStart == true) break; //console.log(currentNode, currentNode !== null)\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  }\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","stopNode","isStop","visitedNodesInOrder","unvisitedNodes","getAllNodes","forEach","node","distance","Infinity","sortNodesByDistance","closestNode","shift","isWall","sort","nodeA","nodeB","distanceSecond","distanceCheck","push","console","log","updateUnvisitedNeighbors","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","length","filter","isVisitedSecond","isVisited","nodes","getNodesInShortestPathOrder","stop","nodesInShortestPathOrder","currentNode","unshift","isStart"],"mappings":"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","sourcesContent":["\nexport function dijkstra(grid, startNode, finishNode, stopNode=false){\n  //setting up stop var to determine what to do\n  var isStop;\n  if(stopNode===false){\n    isStop = false\n  } else {\n    isStop = true\n  }\n  if(!isStop){\n    const visitedNodesInOrder = []\n    //grabbing all nodes\n    var unvisitedNodes = getAllNodes(grid)\n\n    //setting node distances\n    unvisitedNodes.forEach((node) => {\n      if(node === startNode){\n        node.distance = 0\n      } else {\n        node.distance = Infinity\n      }\n    })\n\n    //starting algorithim\n    while(!!unvisitedNodes){\n      sortNodesByDistance(unvisitedNodes, isStop)\n      const closestNode = unvisitedNodes.shift()\n\n      //checking if current node is a wall\n      if(closestNode.isWall) continue\n\n      //checking if node has no where to venture to\n      if(closestNode.distance === Infinity) return visitedNodesInOrder\n\n      \n    }\n  }\n}\n// var cout = 0\n// export function dijkstra(grid, startNode, finishNode, isStop=false){\n//   cout++\n//   const visitedNodesInOrder = [];\n//   var unvisitedNodes = getAllNodes(grid)\n//   //testing to see if visitation is removed\n\n//   unvisitedNodes.forEach((node) => {\n//     if(node === startNode){\n//       //node.distance = 0\n//       isStop ? node.distanceSecond = 0 : node.distance = 0\n//       console.log(node, node.distance, node.distanceSecond, cout, isStop)\n//     } else {\n//       isStop ? node.distanceSecond = Infinity : node.distance = Infinity\n//     }\n//   })\n//   console.log(isStop, cout)\n//   var cout2 =0\n//   while(!!unvisitedNodes){\n//       sortNodesByDistance(unvisitedNodes, isStop)\n//       const closestNode = unvisitedNodes.shift();\n\n//       if(closestNode.isWall) continue;\n\n//       if(closestNode.distance === Infinity && isStop === false) {\n//         return visitedNodesInOrder;\n//       } else if(closestNode.distanceSecond === Infinity && cout===2) {\n//         return visitedNodesInOrder\n//       }\n\n//       isStop ? closestNode.isVisitedSecond = true : closestNode.isVisited = true\n//       visitedNodesInOrder.push(closestNode);\n\n//       if(closestNode === finishNode) return visitedNodesInOrder;\n\n//       updateUnvisitedNeighbors(closestNode, grid, isStop);\n//   }\n// }\n\nfunction sortNodesByDistance(unvisitedNodes, isStop) {\n    //it is not calculating second distace correctly stays at infinity\n    unvisitedNodes.sort((nodeA, nodeB) => {\n      if(isStop===true) {\n        //console.log(cout, nodeA.distanceSecond - nodeB.distanceSecond)\n        return nodeA.distanceSecond - nodeB.distanceSecond\n      } else if(isStop===false) {\n        //console.log(cout, nodeA.distance - nodeB.distance)\n        return nodeA.distance - nodeB.distance\n      }\n    });\n    var distanceCheck = []\n    if(isStop){\n      unvisitedNodes.forEach((node) => {\n        if(node.distanceSecond != Infinity) distanceCheck.push(node)\n      })\n      console.log(distanceCheck)\n    }\n    //console.log(unvisitedNodes, cout)\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isStop) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n    for (const neighbor of unvisitedNeighbors) {\n      //neighbor.distance = node.distance + 1;\n      isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid, isStop) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter((neighbor) => {\n      //isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited\n      if(isStop===true){\n        return !neighbor.isVisitedSecond\n      } else if(isStop===false){\n        return !neighbor.isVisited\n      }\n    });\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode, stop=false) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    if(stop!=false){\n      while (true){\n\n        if(currentNode.isStop!=null){\n          break\n        }\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n      }\n      return nodesInShortestPathOrder;\n    }else if(stop==false){\n      while (currentNode !== null) {\n        // if(currentNode.isStart===true) break;\n        if(currentNode.isStart==true) break;\n        //console.log(currentNode, currentNode !== null)\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n      }\n      return nodesInShortestPathOrder;\n    }\n}"]},"metadata":{},"sourceType":"module"}