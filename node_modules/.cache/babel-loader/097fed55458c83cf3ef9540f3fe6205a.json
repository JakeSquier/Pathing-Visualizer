{"ast":null,"code":"export function dijkstra(grid, startNode, finishNode, stopNode) {\n  const visitedNodesInOrder = [[], []];\n  const unvisitedNodes = getAllNodes(grid);\n  var pos = stopNode[0] ? 0 : 1;\n\n  while (pos <= 1) {\n    console.log('here');\n    var beginNode = pos === 0 ? startNode : finishNode;\n    var endNode = pos === 0 ? stopNode[1] : finishNode;\n    var _beginNode = grid[beginNode[0]][beginNode[1]];\n    var _endNode = grid[endNode[0]][endNode[1]];\n    unvisitedNodes.forEach(node => {\n      if (node === _endNode) {\n        node.distance = 0;\n      } else {\n        node.distance = Infinity;\n      }\n    });\n\n    while (!!unvisitedNodes) {\n      sortNodesByDistance(unvisitedNodes, endNode);\n      const closestNode = unvisitedNodes.shift();\n      if (closestNode.isWall) continue;\n\n      if (closestNode.distance === Infinity && pos === 0) {\n        break;\n      } else if (closestNode.distance === Infinity && pos === 1) {\n        return visitedNodesInOrder;\n      }\n\n      closestNode.isVisited = true;\n\n      if (pos === 0) {\n        visitedNodesInOrder[0].push(closestNode);\n      } else if (pos === 1) {\n        visitedNodesInOrder[1].push(closestNode);\n      }\n\n      if (closestNode === endNode && pos === 0) {\n        break;\n      } else if (closestNode === endNode && pos === 1) {\n        return visitedNodesInOrder;\n      }\n\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n\n    pos++;\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode, isStop = false) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    if (isStop && currentNode.isTarget === true) break; //console.log(currentNode, currentNode !== null)\n\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","stopNode","visitedNodesInOrder","unvisitedNodes","getAllNodes","pos","console","log","beginNode","endNode","_beginNode","_endNode","forEach","node","distance","Infinity","sortNodesByDistance","closestNode","shift","isWall","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","length","filter","nodes","getNodesInShortestPathOrder","isStop","nodesInShortestPathOrder","currentNode","isTarget","unshift"],"mappings":"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","sourcesContent":["\nexport function dijkstra(grid, startNode, finishNode, stopNode){\n  const visitedNodesInOrder = [[],[]];\n  const unvisitedNodes = getAllNodes(grid)\n  var pos = stopNode[0] ? 0 : 1\n  while(pos <= 1){\n    console.log('here')\n    var beginNode = pos===0 ? startNode : finishNode\n    var endNode = pos===0 ? stopNode[1] : finishNode\n    var _beginNode = grid[beginNode[0]][beginNode[1]]\n    var _endNode = grid[endNode[0]][endNode[1]]\n    unvisitedNodes.forEach((node) => {\n      if(node === _endNode){\n        node.distance = 0\n      } else {\n        node.distance = Infinity\n      }\n    })\n    while(!!unvisitedNodes){\n        sortNodesByDistance(unvisitedNodes, endNode)\n        const closestNode = unvisitedNodes.shift();\n  \n        if(closestNode.isWall) continue;\n  \n        if(closestNode.distance === Infinity && pos === 0){\n          break;\n        } else if(closestNode.distance === Infinity && pos === 1){\n          return visitedNodesInOrder\n        }\n        closestNode.isVisited = true;\n        if(pos === 0){\n          visitedNodesInOrder[0].push(closestNode)\n        } else if(pos === 1){\n          visitedNodesInOrder[1].push(closestNode)\n        }\n        if(closestNode === endNode && pos === 0){\n          break;\n        } else if(closestNode === endNode && pos === 1){\n          return visitedNodesInOrder\n        }\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n    pos++\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode, isStop=false) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      if(isStop && currentNode.isTarget===true) break;\n      //console.log(currentNode, currentNode !== null)\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"]},"metadata":{},"sourceType":"module"}