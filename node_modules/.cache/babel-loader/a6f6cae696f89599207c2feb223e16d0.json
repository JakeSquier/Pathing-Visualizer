{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n    var startNode, stopNode, finishNode;\n    const stop = message.data[1];\n    const nodes = stop ? [message.data[0][0], ...message.data[0][1]] : message.data[0];\n    message.data[0].map(node => {\n      if (node.isStart === true) startNode = node;\n      if (node.isStop === true) stopNode = node;\n      if (node.isFinish === true) finishNode = node;\n    });\n    console.log(startNode, stopNode, finishNode, stop, message.data);\n    var nodesInShortestPathOrder = [];\n\n    if (!stop) {\n      let currentNode = finishNode;\n\n      while (currentNode !== null) {\n        if (currentNode.isStart == true) break;\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n      }\n\n      postMessage(nodesInShortestPathOrder);\n    }\n\n    postMessage(nodesInShortestPathOrder);\n  });\n});","map":{"version":3,"names":["self","addEventListener","message","startNode","stopNode","finishNode","stop","data","nodes","map","node","isStart","isStop","isFinish","console","log","nodesInShortestPathOrder","currentNode","unshift","previousNode","postMessage"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/pathGrabWorker.js"],"sourcesContent":["// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n\n        if (!message) return;\n\n        var startNode, stopNode, finishNode\n        const stop = message.data[1]\n        const nodes = stop ? [message.data[0][0], ...message.data[0][1]] : message.data[0]\n\n        message.data[0].map((node) => {\n\n            if(node.isStart === true) startNode = node\n\n            if(node.isStop === true) stopNode = node\n\n            if(node.isFinish === true) finishNode = node\n\n        })\n        console.log(startNode, stopNode, finishNode, stop, message.data)\n\n        var nodesInShortestPathOrder = [];\n\n        if(!stop) {\n\n            let currentNode = finishNode\n\n            while (currentNode !== null) {\n\n                if(currentNode.isStart==true) break;\n\n                nodesInShortestPathOrder.unshift(currentNode);\n                currentNode = currentNode.previousNode;\n            }\n\n            postMessage(nodesInShortestPathOrder)\n        }\n\n        postMessage(nodesInShortestPathOrder)\n    })\n}"],"mappings":"AAAA;AACA,IAAIA,IAAI,GAAG,IAAX;AACA,gBAAe,MAAM;EACjB;EACAA,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAiCC,OAAO,IAAI;IAExC,IAAI,CAACA,OAAL,EAAc;IAEd,IAAIC,SAAJ,EAAeC,QAAf,EAAyBC,UAAzB;IACA,MAAMC,IAAI,GAAGJ,OAAO,CAACK,IAAR,CAAa,CAAb,CAAb;IACA,MAAMC,KAAK,GAAGF,IAAI,GAAG,CAACJ,OAAO,CAACK,IAAR,CAAa,CAAb,EAAgB,CAAhB,CAAD,EAAqB,GAAGL,OAAO,CAACK,IAAR,CAAa,CAAb,EAAgB,CAAhB,CAAxB,CAAH,GAAiDL,OAAO,CAACK,IAAR,CAAa,CAAb,CAAnE;IAEAL,OAAO,CAACK,IAAR,CAAa,CAAb,EAAgBE,GAAhB,CAAqBC,IAAD,IAAU;MAE1B,IAAGA,IAAI,CAACC,OAAL,KAAiB,IAApB,EAA0BR,SAAS,GAAGO,IAAZ;MAE1B,IAAGA,IAAI,CAACE,MAAL,KAAgB,IAAnB,EAAyBR,QAAQ,GAAGM,IAAX;MAEzB,IAAGA,IAAI,CAACG,QAAL,KAAkB,IAArB,EAA2BR,UAAU,GAAGK,IAAb;IAE9B,CARD;IASAI,OAAO,CAACC,GAAR,CAAYZ,SAAZ,EAAuBC,QAAvB,EAAiCC,UAAjC,EAA6CC,IAA7C,EAAmDJ,OAAO,CAACK,IAA3D;IAEA,IAAIS,wBAAwB,GAAG,EAA/B;;IAEA,IAAG,CAACV,IAAJ,EAAU;MAEN,IAAIW,WAAW,GAAGZ,UAAlB;;MAEA,OAAOY,WAAW,KAAK,IAAvB,EAA6B;QAEzB,IAAGA,WAAW,CAACN,OAAZ,IAAqB,IAAxB,EAA8B;QAE9BK,wBAAwB,CAACE,OAAzB,CAAiCD,WAAjC;QACAA,WAAW,GAAGA,WAAW,CAACE,YAA1B;MACH;;MAEDC,WAAW,CAACJ,wBAAD,CAAX;IACH;;IAEDI,WAAW,CAACJ,wBAAD,CAAX;EACH,CArCD;AAsCH,CAxCD"},"metadata":{},"sourceType":"module"}