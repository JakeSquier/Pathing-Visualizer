{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\";\nimport React, { Component } from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithims/dijkstra';\nimport { aStar } from '../algorithims/aStar';\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data';\nimport algData from '../data/alg-data';\nimport './mainContainer.css';\nimport { ContactlessOutlined } from '@material-ui/icons'; // const START_NODE_ROW = 10;\n// const START_NODE_COL = 5;\n// const FINISH_NODE_ROW = 10;\n// const FINISH_NODE_COL = 45;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MainContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMouseDown = (row, col) => {\n      var newGrid = this.state.grid;\n\n      if (this.state.grid[row][col].isStart) {\n        this.setState({\n          startIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.grid[row][col].isFinish) {\n        this.setState({\n          finishIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Weight') {\n        newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        this.setState({\n          stopIsMoving: true,\n          isThereStop: true\n        });\n      }\n\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n\n    this.handleMouseEnter = (row, col) => {\n      if (!this.state.mouseIsPressed) return;\n      var newGrid = this.state.grid;\n\n      if (this.state.startIsMoving) {\n        newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode);\n        this.setState({\n          startNode: [row, col]\n        });\n      } else if (this.state.finishIsMoving) {\n        newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode);\n        this.setState({\n          finishNode: [row, col]\n        });\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n      } else if (this.state.currItemDesc === 'Weight') {\n        newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n        this.setState({\n          prevStop: [row, col]\n        });\n      }\n\n      this.setState({\n        grid: newGrid\n      });\n    };\n\n    this.handleMouseUp = (row, col) => {\n      this.setState({\n        mouseIsPressed: false,\n        startIsMoving: false,\n        finishIsMoving: false\n      });\n    };\n\n    this.handleNav = () => {\n      this.setState({\n        showNav: !this.state.showNav\n      });\n    };\n\n    this.handleItemDescChange = (e, item) => {\n      var newItem = `${item}`;\n      itemData.map(_item => {\n        if (item === _item.id) {\n          this.setState({\n            currItemDesc: newItem,\n            currItemObj: _item\n          });\n        }\n      });\n    };\n\n    this.handleTabs = (e, val) => {\n      this.setState({\n        currAlgTab: val,\n        currAlgObj: algData[val]\n      });\n    };\n\n    this.handleMazeTabs = (e, val) => {\n      this.setState({\n        currMazeTab: val\n      });\n      console.log(val);\n    };\n\n    this.generateMaze = e => {\n      var currAlg = this.state.currMazeTab;\n\n      if (currAlg === 0) {\n        this.generateRecursiveDivisionMaze();\n        console.log('hi');\n      } else if (currAlg === 1) {\n        this.generateVerticalMaze();\n      } else if (currAlg === 2) {\n        this.generateHorizontalMaze();\n      } else if (currAlg === 3) {\n        this.generateRandomMaze();\n      }\n    };\n\n    this.resetGrid = e => {\n      this.clearGrid();\n    };\n\n    this.playAnimation = e => {\n      var currAlg = this.state.currAlgObj.id;\n\n      if (currAlg === 0) {\n        this.visualizeDijkstra();\n      } else if (currAlg === 1) {\n        this.visualizeaStar();\n      } else if (currAlg === 6) {\n        this.visualizbfs();\n      } else if (currAlg === 2) {\n        this.visualizegbfs();\n      } else if (currAlg === 7) {\n        this.visualizegdfs();\n      } else if (currAlg === 5) {\n        this.visualizeBidirectionalGreedySearch();\n      }\n\n      return;\n    };\n\n    this.visualizeDijkstra = () => {\n      const {\n        grid\n      } = this.state;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n      const stopNode = this.state.prevStop ? this.state.prevStop : [];\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n\n      const _stopNode = this.state.isThereStop ? grid[stopNode[0]][stopNode[1]] : false;\n\n      var visitedNodesInOrder = [];\n      var visitedNodesInOrderStop = [];\n\n      if (_stopNode === false) {\n        visitedNodesInOrder = dijkstra(grid, _startNode, _finishNode);\n      } else if (_stopNode != false) {\n        visitedNodesInOrder = dijkstra(grid, _startNode, _stopNode);\n\n        var _newGrid = renderGrid(this.state);\n\n        visitedNodesInOrderStop = dijkstra(_newGrid, _stopNode, _finishNode);\n      }\n\n      console.log(visitedNodesInOrder, visitedNodesInOrderStop);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animateDijkstra(visitedNodesInOrder, visitedNodesInOrderStop, nodesInShortestPathOrder, this.state.isThereStop);\n    };\n\n    this.animateMaze = walls => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({\n              grid: newGrid,\n              generatingMaze: false\n            });\n          }, i * 10);\n          return;\n        }\n\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true;\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      showNav: false,\n      currItemDesc: 'Start',\n      currItemObj: itemData[0],\n      currAlgObj: algData[0],\n      currAlgTab: 0,\n      currMazeAlg: 'Recursive Division Maze',\n      currMazeTab: 0,\n      startNode: [10, 5],\n      finishNode: [10, 45],\n      startIsMoving: false,\n      finishIsMoving: false,\n      isThereStop: false,\n      stopIsMoving: false,\n      prevStop: [],\n      generatingMaze: false,\n      visualizingAlgorithm: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = renderGrid(this.state);\n    this.setState({\n      grid\n    });\n  }\n\n  clearGrid() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n\n    for (let row = 0; row < this.state.grid.length; row++) {\n      for (let col = 0; col < this.state.grid[0].length; col++) {\n        if (!(row === startNode[0] && col === startNode[1] || row === finishNode[0] && col === finishNode[1])) {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n\n    var rowNum = (window.innerHeight - 25) / 25 - 2;\n    var colNum = (window.innerWidth - 20) / 25;\n    const newGrid = getInitialGrid(rowNum, colNum);\n    this.setState({\n      grid: newGrid,\n      visualizingAlgorithm: false,\n      generatingMaze: false\n    });\n  } //navBar functions\n\n\n  clearGrid() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    var rowNum = (window.innerHeight - 25) / 25 - 2;\n    var colNum = (window.innerWidth - 20) / 25;\n    const grid = this.state.grid;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n\n    for (let row = 0; row < this.state.grid.length; row++) {\n      for (let col = 0; col < this.state.grid[0].length; col++) {\n        if (!(row === startNode[0] && col === startNode[1] || row === finishNode[0] && col === finishNode[1])) {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n\n    const newGrid = getGridWithoutPath(this.state.grid);\n    this.setState({\n      grid: newGrid,\n      visualizingAlgorithm: false,\n      generatingMaze: false\n    });\n  } // play animation\n\n\n  //animte dijkstra\n  animateDijkstra(visitedNodesInOrder, visitedNodesInOrderStop, nodesInShortestPathOrder, isStop) {\n    console.log(visitedNodesInOrder); // for(let j = 0; j < 2; j++){\n    //   for (let i = 0; i <= visitedNodesInOrder[j].length; i++) {\n    //     if (i === visitedNodesInOrder[j].length) {\n    //       if(isStop===true){break}\n    //       setTimeout(() => {\n    //           this.animateShortestPath(nodesInShortestPathOrder);\n    //       }, 10 * i);\n    //       return;\n    //     } \n    //     setTimeout(() => {\n    //       const node = visitedNodesInOrder[j][i];\n    //       console.log(node)\n    //       document.getElementById(`node-${node.row}-${node.col}`).className =\n    //       isStop ? 'node node-target-visited' : 'node node-visited';\n    //     }, 10 * i);\n    //   }\n    // }\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length && !isStop) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      if (i === visitedNodesInOrder.length && isStop) {\n        for (let j = 0; j <= visitedNodesInOrderStop.length; j++) {\n          if (j === visitedNodesInOrderStop.length) {\n            setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n            }, 10 * j);\n            return;\n          }\n\n          var time = 0;\n          setTimeout(() => {\n            const node = visitedNodesInOrderStop[j];\n\n            if (!node.isWeight) {\n              time = 10;\n              document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-target-visited';\n            } else {\n              time = 15;\n              document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-target-visited';\n            }\n          }, time * j);\n        }\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  //animate aStar\n  animateaStar(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizeaStar() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n  } //animate breadth first search \n\n\n  animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizbfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // greedy best first search\n\n\n  animategbfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizegbfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // depth first search\n\n\n  animatedfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizegdfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // bidirectional greedy first search\n\n\n  animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath) {\n    let len = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n    for (let i = 1; i <= len; i++) {\n      let nodeA = visitedNodesInOrderStart[i];\n      let nodeB = visitedNodesInOrderFinish[i];\n\n      if (i === visitedNodesInOrderStart.length) {\n        setTimeout(() => {\n          let visitedNodesInOrder = getVisitedNodesInOrder(visitedNodesInOrderStart, visitedNodesInOrderFinish);\n\n          if (isShortedPath) {\n            this.animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\n          } else {\n            this.setState({\n              visualizingAlgorithm: false\n            });\n          }\n        }, i * 10);\n        return;\n      }\n\n      setTimeout(() => {\n        //visited nodes\n        if (nodeA !== undefined) document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = \"node node-visited\";\n        if (nodeB !== undefined) document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = \"node node-visited\";\n      }, i * 10);\n    }\n  }\n\n  visualizeBidirectionalGreedySearch() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      visualizingAlgorithm: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const visitedNodesInOrder = bidirectionalGreedySearch(grid, startNode, finishNode);\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n      const isShortedPath = visitedNodesInOrder[2];\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1], visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]);\n      this.animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath);\n    }, 10);\n  } //finish animations\n\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  } //generate mazes\n\n\n  generateRandomMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = randomMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateRecursiveDivisionMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateVerticalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = verticalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateHorizontalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = horizontalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleNav,\n        children: \"show nav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-container\",\n        children: /*#__PURE__*/_jsxDEV(Visualizer, {\n          state: this.state,\n          handleMouseDown: this.handleMouseDown,\n          handleMouseEnter: this.handleMouseEnter,\n          handleMouseUp: this.handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        state: this.state,\n        resetGrid: this.resetGrid,\n        handleMazeTabs: this.handleMazeTabs,\n        genMaze: this.generateMaze,\n        play: this.playAnimation,\n        handleTabs: this.handleTabs,\n        handleItemChange: this.handleItemDescChange,\n        visualizeDijkstra: this.visualizeDijkstra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = state => {\n  const grid = [];\n  var rowNum = window.innerHeight / 25 + 3;\n  var colNum = window.innerWidth / 25 + 2;\n\n  for (let row = 0; row < rowNum; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < colNum; col++) {\n      var node = createNode(col, row, state);\n      node.className = 'node-wall';\n      currentRow.push(node);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row, state) => {\n  const startNode = state.startNode;\n  const finishNode = state.finishNode;\n  const stopNode = state.prevStop;\n  return {\n    col,\n    row,\n    isStart: row === startNode[0] && col === startNode[1],\n    isFinish: row === finishNode[0] && col === finishNode[1],\n    isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst rerenderGrid = state => {\n  const grid = state.grid;\n  const startNode = grid[state.startNode[0]][state.startNode[1]];\n  const finishNode = grid[state.finishNode[0]][state.finishNode[1]];\n\n  for (let row = 0; row < grid.length; row++) {\n    var colNum = grid[row];\n\n    for (let col = 0; col < colNum.length; col++) {\n      var node = grid[row][col];\n\n      if (node.isWall || node.isWeight || node.isStop) {\n        node.isWall = false;\n        node.isWeight = false;\n        node.isStop = false;\n        node.isVisited = false;\n      }\n\n      if (node === startNode) {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-start\";\n      } else if (node === finishNode) {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-finish\";\n      } else {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node\";\n      }\n    }\n  }\n\n  return grid;\n};\n\nconst getNewGridWithStart = (grid, row, col, prevStart) => {\n  const newGrid = grid.slice();\n  const newStart = newGrid[row][col];\n  const oldStart = newGrid[prevStart[0]][prevStart[1]];\n  const oldNode = { ...oldStart,\n    isStart: !oldStart.isStart\n  };\n  const newNode = { ...newStart,\n    isStart: !newStart.isStart\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStart[0]][prevStart[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinish = (grid, row, col, prevFinish) => {\n  const newGrid = grid.slice();\n  if (newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n  const newFinish = newGrid[row][col];\n  const oldFinish = newGrid[prevFinish[0]][prevFinish[1]];\n  const oldNode = { ...oldFinish,\n    isFinish: !oldFinish.isFinish\n  };\n  const newNode = { ...newFinish,\n    isFinish: !newFinish.isFinish\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevFinish[0]][prevFinish[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithWeightToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWeight: !node.isWeight\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n  const newGrid = grid.slice();\n  const newStop = newGrid[row][col];\n\n  if (prevStop.length === 0) {\n    const newNode = { ...newStop,\n      isStop: !newStop.isStop\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  const oldStop = newGrid[prevStop[0]][prevStop[1]];\n  const oldNode = { ...oldStop,\n    isStop: !oldStop.isStop\n  };\n  const newNode = { ...newStop,\n    isStop: !newStop.isStop\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStop[0]][prevStop[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = { ...node,\n      isWall: true\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n\n  return newGrid;\n};\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst getVisitedNodesInOrder = (visitedNodesInOrderStart, visitedNodesInOrderFinish) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n\n  return visitedNodesInOrder;\n};\n\nconst getGridWithoutPath = grid => {\n  let newGrid = grid.slice();\n\n  for (let row of grid) {\n    for (let node of row) {\n      let newNode = { ...node,\n        distance: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isShortest: false,\n        previousNode: null,\n        isWall: false,\n        isWeight: false,\n        isStop: false\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"names":["React","Component","Visualizer","dijkstra","getNodesInShortestPathOrder","aStar","breadthFirstSearch","greedyBFS","depthFirstSearch","randomMaze","verticalMaze","horizontalMaze","recursiveDivisionMaze","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","Navbar","itemData","algData","ContactlessOutlined","MainContainer","constructor","props","handleMouseDown","row","col","newGrid","state","grid","isStart","setState","startIsMoving","isFinish","finishIsMoving","currItemDesc","getNewGridWithWallToggled","getNewGridWithWeightToggled","stopIsMoving","isThereStop","mouseIsPressed","handleMouseEnter","getNewGridWithStart","startNode","getNewGridWithFinish","finishNode","getNewGridWithStopToggled","prevStop","handleMouseUp","handleNav","showNav","handleItemDescChange","e","item","newItem","map","_item","id","currItemObj","handleTabs","val","currAlgTab","currAlgObj","handleMazeTabs","currMazeTab","console","log","generateMaze","currAlg","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","generateRandomMaze","resetGrid","clearGrid","playAnimation","visualizeDijkstra","visualizeaStar","visualizbfs","visualizegbfs","visualizegdfs","visualizeBidirectionalGreedySearch","stopNode","_startNode","_finishNode","_stopNode","visitedNodesInOrder","visitedNodesInOrderStop","_newGrid","renderGrid","nodesInShortestPathOrder","animateDijkstra","animateMaze","walls","i","length","setTimeout","getNewGridWithMaze","generatingMaze","wall","node","isWall","document","getElementById","className","currMazeAlg","visualizingAlgorithm","componentDidMount","rowNum","window","innerHeight","colNum","innerWidth","getInitialGrid","getGridWithoutPath","isStop","animateShortestPath","j","time","isWeight","animateaStar","animatebfs","animategbfs","animatedfs","animateBidirectionalAlgorithm","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","len","Math","max","nodeA","nodeB","getVisitedNodesInOrder","undefined","render","currentRow","createNode","push","distance","Infinity","isVisited","previousNode","rerenderGrid","prevStart","slice","newStart","oldStart","oldNode","newNode","prevFinish","newFinish","oldFinish","newStop","oldStop","numRows","numColumns","n","totalDistance","isShortest"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,SAAQC,QAAR,EAAkBC,2BAAlB,QAAoD,yBAApD;AACA,SAAQC,KAAR,QAAoB,sBAApB;AACA,SAASC,kBAAT,QAAmC,mCAAnC;AACA,SAASC,SAAT,QAA0B,sCAA1B;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,cAAT,QAA+B,mCAA/B;AACA,SAASC,qBAAT,QAAsC,0CAAtC;AACA,SAASC,yBAAT,QAA0C,0CAA1C;AACA,SAASC,oDAAT,QAAqE,0CAArE;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAO,qBAAP;AACA,SAASC,mBAAT,QAAoC,oBAApC,C,CAEA;AACA;AACA;AACA;;;AAEA,eAAe,MAAMC,aAAN,SAA4BlB,SAA5B,CAAqC;AAChDmB,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SA6BlBC,eA7BkB,GA6BA,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,UAAIC,OAAO,GAAG,KAAKC,KAAL,CAAWC,IAAzB;;AACA,UAAG,KAAKD,KAAL,CAAWC,IAAX,CAAgBJ,GAAhB,EAAqBC,GAArB,EAA0BI,OAA7B,EAAqC;AACnC,aAAKC,QAAL,CAAc;AAACC,UAAAA,aAAa,EAAE;AAAhB,SAAd;AACAL,QAAAA,OAAO,GAAG,KAAKC,KAAL,CAAWC,IAArB;AACD,OAHD,MAGO,IAAG,KAAKD,KAAL,CAAWC,IAAX,CAAgBJ,GAAhB,EAAqBC,GAArB,EAA0BO,QAA7B,EAAsC;AAC3C,aAAKF,QAAL,CAAc;AAACG,UAAAA,cAAc,EAAE;AAAjB,SAAd;AACAP,QAAAA,OAAO,GAAG,KAAKC,KAAL,CAAWC,IAArB;AACD,OAHM,MAGA,IAAG,KAAKD,KAAL,CAAWO,YAAX,KAA4B,MAA/B,EAAuC;AAC5CR,QAAAA,OAAO,GAAGS,yBAAyB,CAAC,KAAKR,KAAL,CAAWC,IAAZ,EAAkBJ,GAAlB,EAAuBC,GAAvB,CAAnC;AACD,OAFM,MAEA,IAAG,KAAKE,KAAL,CAAWO,YAAX,KAA4B,QAA/B,EAAwC;AAC7CR,QAAAA,OAAO,GAAGU,2BAA2B,CAAC,KAAKT,KAAL,CAAWC,IAAZ,EAAkBJ,GAAlB,EAAuBC,GAAvB,CAArC;AACD,OAFM,MAEA,IAAG,KAAKE,KAAL,CAAWO,YAAX,KAA4B,MAA/B,EAAsC;AAC3C,aAAKJ,QAAL,CAAc;AAACO,UAAAA,YAAY,EAAE,IAAf;AAAqBC,UAAAA,WAAW,EAAE;AAAlC,SAAd;AACD;;AACD,WAAKR,QAAL,CAAc;AAACF,QAAAA,IAAI,EAAEF,OAAP;AAAgBa,QAAAA,cAAc,EAAE;AAAhC,OAAd;AACH,KA7CiB;;AAAA,SA+ClBC,gBA/CkB,GA+CC,CAAChB,GAAD,EAAMC,GAAN,KAAc;AAC7B,UAAI,CAAC,KAAKE,KAAL,CAAWY,cAAhB,EAAgC;AAChC,UAAIb,OAAO,GAAG,KAAKC,KAAL,CAAWC,IAAzB;;AACA,UAAG,KAAKD,KAAL,CAAWI,aAAd,EAA4B;AAC1BL,QAAAA,OAAO,GAAGe,mBAAmB,CAAC,KAAKd,KAAL,CAAWC,IAAZ,EAAkBJ,GAAlB,EAAuBC,GAAvB,EAA4B,KAAKE,KAAL,CAAWe,SAAvC,CAA7B;AACA,aAAKZ,QAAL,CAAc;AAACY,UAAAA,SAAS,EAAE,CAAClB,GAAD,EAAMC,GAAN;AAAZ,SAAd;AACD,OAHD,MAIK,IAAG,KAAKE,KAAL,CAAWM,cAAd,EAA6B;AAChCP,QAAAA,OAAO,GAAGiB,oBAAoB,CAAC,KAAKhB,KAAL,CAAWC,IAAZ,EAAkBJ,GAAlB,EAAuBC,GAAvB,EAA4B,KAAKE,KAAL,CAAWiB,UAAvC,CAA9B;AACA,aAAKd,QAAL,CAAc;AAACc,UAAAA,UAAU,EAAE,CAACpB,GAAD,EAAMC,GAAN;AAAb,SAAd;AACD,OAHI,MAGE,IAAG,KAAKE,KAAL,CAAWO,YAAX,KAA4B,MAA/B,EAAuC;AAC5CR,QAAAA,OAAO,GAAGS,yBAAyB,CAAC,KAAKR,KAAL,CAAWC,IAAZ,EAAkBJ,GAAlB,EAAuBC,GAAvB,EAA4B,KAAKS,YAAjC,CAAnC;AACD,OAFM,MAEA,IAAG,KAAKP,KAAL,CAAWO,YAAX,KAA4B,QAA/B,EAAwC;AAC7CR,QAAAA,OAAO,GAAGU,2BAA2B,CAAC,KAAKT,KAAL,CAAWC,IAAZ,EAAkBJ,GAAlB,EAAuBC,GAAvB,CAArC;AACD,OAFM,MAEC,IAAG,KAAKE,KAAL,CAAWO,YAAX,KAA4B,MAA/B,EAAsC;AAC5CR,QAAAA,OAAO,GAAGmB,yBAAyB,CAAC,KAAKlB,KAAL,CAAWC,IAAZ,EAAkBJ,GAAlB,EAAuBC,GAAvB,EAA4B,KAAKE,KAAL,CAAWmB,QAAvC,CAAnC;AACA,aAAKhB,QAAL,CAAc;AAACgB,UAAAA,QAAQ,EAAE,CAACtB,GAAD,EAAMC,GAAN;AAAX,SAAd;AACD;;AACD,WAAKK,QAAL,CAAc;AAACF,QAAAA,IAAI,EAAEF;AAAP,OAAd;AACH,KAlEiB;;AAAA,SAoElBqB,aApEkB,GAoEF,CAACvB,GAAD,EAAMC,GAAN,KAAc;AAC1B,WAAKK,QAAL,CAAc;AAACS,QAAAA,cAAc,EAAE,KAAjB;AAAwBR,QAAAA,aAAa,EAAE,KAAvC;AAA8CE,QAAAA,cAAc,EAAE;AAA9D,OAAd;AACH,KAtEiB;;AAAA,SAwElBe,SAxEkB,GAwEN,MAAM;AAChB,WAAKlB,QAAL,CAAc;AAACmB,QAAAA,OAAO,EAAE,CAAC,KAAKtB,KAAL,CAAWsB;AAAtB,OAAd;AACD,KA1EiB;;AAAA,SAyGlBC,oBAzGkB,GAyGK,CAACC,CAAD,EAAIC,IAAJ,KAAa;AAClC,UAAIC,OAAO,GAAI,GAAED,IAAK,EAAtB;AACAnC,MAAAA,QAAQ,CAACqC,GAAT,CAAcC,KAAD,IAAW;AACtB,YAAGH,IAAI,KAAKG,KAAK,CAACC,EAAlB,EAAqB;AAAC,eAAK1B,QAAL,CAAc;AAACI,YAAAA,YAAY,EAAEmB,OAAf;AAAwBI,YAAAA,WAAW,EAAEF;AAArC,WAAd;AAA2D;AAClF,OAFD;AAGD,KA9GiB;;AAAA,SAgHlBG,UAhHkB,GAgHL,CAACP,CAAD,EAAIQ,GAAJ,KAAY;AACvB,WAAK7B,QAAL,CAAc;AAAC8B,QAAAA,UAAU,EAAED,GAAb;AAAkBE,QAAAA,UAAU,EAAE3C,OAAO,CAACyC,GAAD;AAArC,OAAd;AACD,KAlHiB;;AAAA,SAoHlBG,cApHkB,GAoHD,CAACX,CAAD,EAAIQ,GAAJ,KAAY;AAC3B,WAAK7B,QAAL,CAAc;AAACiC,QAAAA,WAAW,EAAEJ;AAAd,OAAd;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACD,KAvHiB;;AAAA,SAyHlBO,YAzHkB,GAyHFf,CAAD,IAAO;AACpB,UAAIgB,OAAO,GAAG,KAAKxC,KAAL,CAAWoC,WAAzB;;AAEA,UAAGI,OAAO,KAAG,CAAb,EAAe;AACb,aAAKC,6BAAL;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD,OAHD,MAGO,IAAGE,OAAO,KAAG,CAAb,EAAe;AACpB,aAAKE,oBAAL;AACD,OAFM,MAEA,IAAGF,OAAO,KAAG,CAAb,EAAe;AACpB,aAAKG,sBAAL;AACD,OAFM,MAEA,IAAGH,OAAO,KAAG,CAAb,EAAe;AACpB,aAAKI,kBAAL;AACD;AACF,KAtIiB;;AAAA,SAwIlBC,SAxIkB,GAwILrB,CAAD,IAAO;AACjB,WAAKsB,SAAL;AACD,KA1IiB;;AAAA,SA2KlBC,aA3KkB,GA2KDvB,CAAD,IAAO;AACrB,UAAIgB,OAAO,GAAG,KAAKxC,KAAL,CAAWkC,UAAX,CAAsBL,EAApC;;AACA,UAAGW,OAAO,KAAG,CAAb,EAAe;AACb,aAAKQ,iBAAL;AACD,OAFD,MAEO,IAAGR,OAAO,KAAG,CAAb,EAAe;AACpB,aAAKS,cAAL;AACD,OAFM,MAEA,IAAGT,OAAO,KAAG,CAAb,EAAe;AACpB,aAAKU,WAAL;AACD,OAFM,MAEA,IAAGV,OAAO,KAAG,CAAb,EAAe;AACpB,aAAKW,aAAL;AACD,OAFM,MAEA,IAAGX,OAAO,KAAG,CAAb,EAAe;AACpB,aAAKY,aAAL;AACD,OAFM,MAEA,IAAGZ,OAAO,KAAG,CAAb,EAAe;AACpB,aAAKa,kCAAL;AACD;;AACD;AACD,KA3LiB;;AAAA,SAwPlBL,iBAxPkB,GAwPE,MAAM;AACpB,YAAM;AAAC/C,QAAAA;AAAD,UAAS,KAAKD,KAApB;AACA,YAAMe,SAAS,GAAG,KAAKf,KAAL,CAAWe,SAA7B;AACA,YAAME,UAAU,GAAG,KAAKjB,KAAL,CAAWiB,UAA9B;AACA,YAAMqC,QAAQ,GAAG,KAAKtD,KAAL,CAAWmB,QAAX,GAAsB,KAAKnB,KAAL,CAAWmB,QAAjC,GAA4C,EAA7D;AACA,YAAMoC,UAAU,GAAGtD,IAAI,CAACc,SAAS,CAAC,CAAD,CAAV,CAAJ,CAAmBA,SAAS,CAAC,CAAD,CAA5B,CAAnB;AACA,YAAMyC,WAAW,GAAGvD,IAAI,CAACgB,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAApB;;AACA,YAAMwC,SAAS,GAAG,KAAKzD,KAAL,CAAWW,WAAX,GAAyBV,IAAI,CAACqD,QAAQ,CAAC,CAAD,CAAT,CAAJ,CAAkBA,QAAQ,CAAC,CAAD,CAA1B,CAAzB,GAA0D,KAA5E;;AACA,UAAII,mBAAmB,GAAG,EAA1B;AACA,UAAIC,uBAAuB,GAAG,EAA9B;;AACA,UAAGF,SAAS,KAAK,KAAjB,EAAuB;AACrBC,QAAAA,mBAAmB,GAAGjF,QAAQ,CAACwB,IAAD,EAAOsD,UAAP,EAAmBC,WAAnB,CAA9B;AACD,OAFD,MAEO,IAAGC,SAAS,IAAI,KAAhB,EAAsB;AAC3BC,QAAAA,mBAAmB,GAAGjF,QAAQ,CAACwB,IAAD,EAAOsD,UAAP,EAAmBE,SAAnB,CAA9B;;AACA,YAAIG,QAAQ,GAAGC,UAAU,CAAC,KAAK7D,KAAN,CAAzB;;AACA2D,QAAAA,uBAAuB,GAAGlF,QAAQ,CAACmF,QAAD,EAAWH,SAAX,EAAsBD,WAAtB,CAAlC;AACD;;AACDnB,MAAAA,OAAO,CAACC,GAAR,CAAYoB,mBAAZ,EAAiCC,uBAAjC;AACA,YAAMG,wBAAwB,GAAGpF,2BAA2B,CAAC8E,WAAD,CAA5D;AACA,WAAKO,eAAL,CAAqBL,mBAArB,EAA0CC,uBAA1C,EAAmEG,wBAAnE,EAA6F,KAAK9D,KAAL,CAAWW,WAAxG;AACL,KA5QiB;;AAAA,SA4dlBqD,WA5dkB,GA4dHC,KAAD,IAAW;AACvB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAID,KAAK,CAACE,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,YAAIA,CAAC,KAAKD,KAAK,CAACE,MAAhB,EAAwB;AACtBC,UAAAA,UAAU,CAAC,MAAM;AACf,iBAAKtB,SAAL;AACA,gBAAI/C,OAAO,GAAGsE,kBAAkB,CAAC,KAAKrE,KAAL,CAAWC,IAAZ,EAAkBgE,KAAlB,CAAhC;AACA,iBAAK9D,QAAL,CAAc;AAAEF,cAAAA,IAAI,EAAEF,OAAR;AAAiBuE,cAAAA,cAAc,EAAE;AAAjC,aAAd;AACD,WAJS,EAIPJ,CAAC,GAAG,EAJG,CAAV;AAKA;AACD;;AACD,YAAIK,IAAI,GAAGN,KAAK,CAACC,CAAD,CAAhB;AACA,YAAIM,IAAI,GAAG,KAAKxE,KAAL,CAAWC,IAAX,CAAgBsE,IAAI,CAAC,CAAD,CAApB,EAAyBA,IAAI,CAAC,CAAD,CAA7B,CAAX;AACAC,QAAAA,IAAI,CAACC,MAAL,GAAc,IAAd;AACAL,QAAAA,UAAU,CAAC,MAAM;AACf;AACAM,UAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAAC3E,GAAI,IAAG2E,IAAI,CAAC1E,GAAI,EAArD,EAAwD8E,SAAxD,GACE,gBADF;AAED,SAJS,EAIPV,CAAC,GAAG,EAJG,CAAV;AAKD;AACF,KA/eiB;;AAEd,SAAKlE,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AAETW,MAAAA,cAAc,EAAE,KAFP;AAGTU,MAAAA,OAAO,EAAE,KAHA;AAITf,MAAAA,YAAY,EAAE,OAJL;AAKTuB,MAAAA,WAAW,EAAExC,QAAQ,CAAC,CAAD,CALZ;AAMT4C,MAAAA,UAAU,EAAE3C,OAAO,CAAC,CAAD,CANV;AAOT0C,MAAAA,UAAU,EAAE,CAPH;AAQT4C,MAAAA,WAAW,EAAE,yBARJ;AASTzC,MAAAA,WAAW,EAAE,CATJ;AAUTrB,MAAAA,SAAS,EAAE,CAAC,EAAD,EAAK,CAAL,CAVF;AAWTE,MAAAA,UAAU,EAAE,CAAC,EAAD,EAAK,EAAL,CAXH;AAYTb,MAAAA,aAAa,EAAE,KAZN;AAaTE,MAAAA,cAAc,EAAE,KAbP;AAcTK,MAAAA,WAAW,EAAE,KAdJ;AAeTD,MAAAA,YAAY,EAAE,KAfL;AAgBTS,MAAAA,QAAQ,EAAE,EAhBD;AAiBTmD,MAAAA,cAAc,EAAE,KAjBP;AAkBTQ,MAAAA,oBAAoB,EAAE;AAlBb,KAAb;AAoBH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAM9E,IAAI,GAAG4D,UAAU,CAAC,KAAK7D,KAAN,CAAvB;AACA,SAAKG,QAAL,CAAc;AAACF,MAAAA;AAAD,KAAd;AACH;;AAiDD6C,EAAAA,SAAS,GAAG;AACV,QAAI,KAAK9C,KAAL,CAAW8E,oBAAX,IAAmC,KAAK9E,KAAL,CAAWsE,cAAlD,EAAkE;AAChE;AACD;;AACD,UAAMvD,SAAS,GAAG,KAAKf,KAAL,CAAWe,SAA7B;AACA,UAAME,UAAU,GAAG,KAAKjB,KAAL,CAAWiB,UAA9B;;AACA,SAAK,IAAIpB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKG,KAAL,CAAWC,IAAX,CAAgBkE,MAAxC,EAAgDtE,GAAG,EAAnD,EAAuD;AACrD,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKE,KAAL,CAAWC,IAAX,CAAgB,CAAhB,EAAmBkE,MAA3C,EAAmDrE,GAAG,EAAtD,EAA0D;AACxD,YACE,EACGD,GAAG,KAAKkB,SAAS,CAAC,CAAD,CAAjB,IAAwBjB,GAAG,KAAKiB,SAAS,CAAC,CAAD,CAA1C,IACClB,GAAG,KAAKoB,UAAU,CAAC,CAAD,CAAlB,IAAyBnB,GAAG,KAAKmB,UAAU,CAAC,CAAD,CAF9C,CADF,EAKE;AACAyD,UAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAO9E,GAAI,IAAGC,GAAI,EAA3C,EAA8C8E,SAA9C,GAA0D,MAA1D;AACD;AACF;AACF;;AACD,QAAII,MAAM,GAAI,CAACC,MAAM,CAACC,WAAP,GAAmB,EAApB,IAA0B,EAA3B,GAA+B,CAA5C;AACA,QAAIC,MAAM,GAAG,CAACF,MAAM,CAACG,UAAP,GAAkB,EAAnB,IAAyB,EAAtC;AACA,UAAMrF,OAAO,GAAGsF,cAAc,CAACL,MAAD,EAASG,MAAT,CAA9B;AACA,SAAKhF,QAAL,CAAc;AACZF,MAAAA,IAAI,EAAEF,OADM;AAEZ+E,MAAAA,oBAAoB,EAAE,KAFV;AAGZR,MAAAA,cAAc,EAAE;AAHJ,KAAd;AAKD,GAvG+C,CAyGhD;;;AAoCAxB,EAAAA,SAAS,GAAG;AACV,QAAI,KAAK9C,KAAL,CAAW8E,oBAAX,IAAmC,KAAK9E,KAAL,CAAWsE,cAAlD,EAAkE;AAChE;AACD;;AACD,QAAIU,MAAM,GAAI,CAACC,MAAM,CAACC,WAAP,GAAmB,EAApB,IAA0B,EAA3B,GAA+B,CAA5C;AACA,QAAIC,MAAM,GAAG,CAACF,MAAM,CAACG,UAAP,GAAkB,EAAnB,IAAyB,EAAtC;AACA,UAAMnF,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;AACA,UAAMc,SAAS,GAAG,KAAKf,KAAL,CAAWe,SAA7B;AACA,UAAME,UAAU,GAAG,KAAKjB,KAAL,CAAWiB,UAA9B;;AACA,SAAK,IAAIpB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKG,KAAL,CAAWC,IAAX,CAAgBkE,MAAxC,EAAgDtE,GAAG,EAAnD,EAAuD;AACrD,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKE,KAAL,CAAWC,IAAX,CAAgB,CAAhB,EAAmBkE,MAA3C,EAAmDrE,GAAG,EAAtD,EAA0D;AACxD,YACE,EACGD,GAAG,KAAKkB,SAAS,CAAC,CAAD,CAAjB,IAAwBjB,GAAG,KAAKiB,SAAS,CAAC,CAAD,CAA1C,IACClB,GAAG,KAAKoB,UAAU,CAAC,CAAD,CAAlB,IAAyBnB,GAAG,KAAKmB,UAAU,CAAC,CAAD,CAF9C,CADF,EAKE;AACAyD,UAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAO9E,GAAI,IAAGC,GAAI,EAA3C,EAA8C8E,SAA9C,GAA0D,MAA1D;AACD;AACF;AACF;;AACD,UAAM7E,OAAO,GAAGuF,kBAAkB,CAAC,KAAKtF,KAAL,CAAWC,IAAZ,CAAlC;AACA,SAAKE,QAAL,CAAc;AACZF,MAAAA,IAAI,EAAEF,OADM;AAEZ+E,MAAAA,oBAAoB,EAAE,KAFV;AAGZR,MAAAA,cAAc,EAAE;AAHJ,KAAd;AAKD,GAxK+C,CA0KhD;;;AAoBA;AAEAP,EAAAA,eAAe,CAACL,mBAAD,EAAsBC,uBAAtB,EAA+CG,wBAA/C,EAAyEyB,MAAzE,EAAiF;AAC9FlD,IAAAA,OAAO,CAACC,GAAR,CAAYoB,mBAAZ,EAD8F,CAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIR,mBAAmB,CAACS,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,UAAIA,CAAC,KAAKR,mBAAmB,CAACS,MAA1B,IAAoC,CAACoB,MAAzC,EAAiD;AAC/CnB,QAAAA,UAAU,CAAC,MAAM;AACf,eAAKoB,mBAAL,CAAyB1B,wBAAzB;AACD,SAFS,EAEP,KAAKI,CAFE,CAAV;AAGA;AACD;;AACD,UAAGA,CAAC,KAAKR,mBAAmB,CAACS,MAA1B,IAAoCoB,MAAvC,EAA8C;AAC5C,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI9B,uBAAuB,CAACQ,MAA7C,EAAqDsB,CAAC,EAAtD,EAA0D;AACxD,cAAIA,CAAC,KAAK9B,uBAAuB,CAACQ,MAAlC,EAA0C;AACxCC,YAAAA,UAAU,CAAC,MAAM;AACf,mBAAKoB,mBAAL,CAAyB1B,wBAAzB;AACD,aAFS,EAEP,KAAK2B,CAFE,CAAV;AAGA;AACD;;AACD,cAAIC,IAAI,GAAG,CAAX;AACAtB,UAAAA,UAAU,CAAC,MAAM;AACf,kBAAMI,IAAI,GAAGb,uBAAuB,CAAC8B,CAAD,CAApC;;AACA,gBAAG,CAACjB,IAAI,CAACmB,QAAT,EAAkB;AAChBD,cAAAA,IAAI,GAAG,EAAP;AACAhB,cAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAAC3E,GAAI,IAAG2E,IAAI,CAAC1E,GAAI,EAArD,EAAwD8E,SAAxD,GACA,0BADA;AAED,aAJD,MAIO;AACLc,cAAAA,IAAI,GAAG,EAAP;AACAhB,cAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAAC3E,GAAI,IAAG2E,IAAI,CAAC1E,GAAI,EAArD,EAAwD8E,SAAxD,GACA,0BADA;AAED;AACF,WAXS,EAWPc,IAAI,GAAGD,CAXA,CAAV;AAYD;AACF;;AACDrB,MAAAA,UAAU,CAAC,MAAM;AACf,cAAMI,IAAI,GAAGd,mBAAmB,CAACQ,CAAD,CAAhC;AACAQ,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAAC3E,GAAI,IAAG2E,IAAI,CAAC1E,GAAI,EAArD,EAAwD8E,SAAxD,GACE,mBADF;AAED,OAJS,EAIP,KAAKV,CAJE,CAAV;AAKD;AACF;;AAwBD;AAEA0B,EAAAA,YAAY,CAAClC,mBAAD,EAAsBI,wBAAtB,EAAgD;AAC1D,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIR,mBAAmB,CAACS,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,UAAIA,CAAC,KAAKR,mBAAmB,CAACS,MAA9B,EAAsC;AACpCC,QAAAA,UAAU,CAAC,MAAM;AACb,eAAKoB,mBAAL,CAAyB1B,wBAAzB;AACH,SAFS,EAEP,KAAKI,CAFE,CAAV;AAGA;AACC;;AACHE,MAAAA,UAAU,CAAC,MAAM;AACf,cAAMI,IAAI,GAAGd,mBAAmB,CAACQ,CAAD,CAAhC;AACAQ,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAAC3E,GAAI,IAAG2E,IAAI,CAAC1E,GAAI,EAArD,EAAwD8E,SAAxD,GACE,mBADF;AAEC,OAJO,EAIL,KAAKV,CAJA,CAAV;AAKD;AACF;;AAEDjB,EAAAA,cAAc,GAAG;AACf,UAAM;AAAChD,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,UAAMe,SAAS,GAAG,KAAKf,KAAL,CAAWe,SAA7B;AACA,UAAME,UAAU,GAAG,KAAKjB,KAAL,CAAWiB,UAA9B;AACA,UAAMsC,UAAU,GAAGtD,IAAI,CAACc,SAAS,CAAC,CAAD,CAAV,CAAJ,CAAmBA,SAAS,CAAC,CAAD,CAA5B,CAAnB;AACA,UAAMyC,WAAW,GAAGvD,IAAI,CAACgB,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAApB;AACA,UAAMyC,mBAAmB,GAAG/E,KAAK,CAACsB,IAAD,EAAOsD,UAAP,EAAmBC,WAAnB,CAAjC;AACA,UAAMM,wBAAwB,GAAGpF,2BAA2B,CAAC8E,WAAD,CAA5D;AACA,SAAKoC,YAAL,CAAkBlC,mBAAlB,EAAuCI,wBAAvC;AACD,GA1S+C,CA4ShD;;;AAEA+B,EAAAA,UAAU,CAACnC,mBAAD,EAAsBI,wBAAtB,EAAgD;AACxD,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIR,mBAAmB,CAACS,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,UAAIA,CAAC,KAAKR,mBAAmB,CAACS,MAA9B,EAAsC;AACpCC,QAAAA,UAAU,CAAC,MAAM;AACb,eAAKoB,mBAAL,CAAyB1B,wBAAzB;AACH,SAFS,EAEP,KAAKI,CAFE,CAAV;AAGA;AACC;;AACHE,MAAAA,UAAU,CAAC,MAAM;AACf,cAAMI,IAAI,GAAGd,mBAAmB,CAACQ,CAAD,CAAhC;AACAQ,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAAC3E,GAAI,IAAG2E,IAAI,CAAC1E,GAAI,EAArD,EAAwD8E,SAAxD,GACE,mBADF;AAEC,OAJO,EAIL,KAAKV,CAJA,CAAV;AAKD;AACF;;AAEDhB,EAAAA,WAAW,GAAG;AACZ,UAAM;AAACjD,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,UAAMe,SAAS,GAAG,KAAKf,KAAL,CAAWe,SAA7B;AACA,UAAME,UAAU,GAAG,KAAKjB,KAAL,CAAWiB,UAA9B;AACA,UAAMsC,UAAU,GAAGtD,IAAI,CAACc,SAAS,CAAC,CAAD,CAAV,CAAJ,CAAmBA,SAAS,CAAC,CAAD,CAA5B,CAAnB;AACA,UAAMyC,WAAW,GAAGvD,IAAI,CAACgB,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAApB;AACA,UAAMyC,mBAAmB,GAAG9E,kBAAkB,CAACqB,IAAD,EAAOsD,UAAP,EAAmBC,WAAnB,CAA9C;AACA,UAAMM,wBAAwB,GAAGpF,2BAA2B,CAAC8E,WAAD,CAA5D;AACA,SAAKqC,UAAL,CAAgBnC,mBAAhB,EAAqCI,wBAArC;AACD,GAvU+C,CAyUhD;;;AAEAgC,EAAAA,WAAW,CAACpC,mBAAD,EAAsBI,wBAAtB,EAAgD;AACzD,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIR,mBAAmB,CAACS,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,UAAIA,CAAC,KAAKR,mBAAmB,CAACS,MAA9B,EAAsC;AACpCC,QAAAA,UAAU,CAAC,MAAM;AACb,eAAKoB,mBAAL,CAAyB1B,wBAAzB;AACH,SAFS,EAEP,KAAKI,CAFE,CAAV;AAGA;AACC;;AACHE,MAAAA,UAAU,CAAC,MAAM;AACf,cAAMI,IAAI,GAAGd,mBAAmB,CAACQ,CAAD,CAAhC;AACAQ,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAAC3E,GAAI,IAAG2E,IAAI,CAAC1E,GAAI,EAArD,EAAwD8E,SAAxD,GACE,mBADF;AAEC,OAJO,EAIL,KAAKV,CAJA,CAAV;AAKD;AACF;;AAEDf,EAAAA,aAAa,GAAG;AACd,UAAM;AAAClD,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,UAAMe,SAAS,GAAG,KAAKf,KAAL,CAAWe,SAA7B;AACA,UAAME,UAAU,GAAG,KAAKjB,KAAL,CAAWiB,UAA9B;AACA,UAAMsC,UAAU,GAAGtD,IAAI,CAACc,SAAS,CAAC,CAAD,CAAV,CAAJ,CAAmBA,SAAS,CAAC,CAAD,CAA5B,CAAnB;AACA,UAAMyC,WAAW,GAAGvD,IAAI,CAACgB,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAApB;AACA,UAAMyC,mBAAmB,GAAG7E,SAAS,CAACoB,IAAD,EAAOsD,UAAP,EAAmBC,WAAnB,CAArC;AACA,UAAMM,wBAAwB,GAAGpF,2BAA2B,CAAC8E,WAAD,CAA5D;AACA,SAAKsC,WAAL,CAAiBpC,mBAAjB,EAAsCI,wBAAtC;AACD,GApW+C,CAsWhD;;;AAEAiC,EAAAA,UAAU,CAACrC,mBAAD,EAAsBI,wBAAtB,EAAgD;AACxD,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIR,mBAAmB,CAACS,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,UAAIA,CAAC,KAAKR,mBAAmB,CAACS,MAA9B,EAAsC;AACpCC,QAAAA,UAAU,CAAC,MAAM;AACb,eAAKoB,mBAAL,CAAyB1B,wBAAzB;AACH,SAFS,EAEP,KAAKI,CAFE,CAAV;AAGA;AACC;;AACHE,MAAAA,UAAU,CAAC,MAAM;AACf,cAAMI,IAAI,GAAGd,mBAAmB,CAACQ,CAAD,CAAhC;AACAQ,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAAC3E,GAAI,IAAG2E,IAAI,CAAC1E,GAAI,EAArD,EAAwD8E,SAAxD,GACE,mBADF;AAEC,OAJO,EAIL,KAAKV,CAJA,CAAV;AAKD;AACF;;AAEDd,EAAAA,aAAa,GAAG;AACd,UAAM;AAACnD,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,UAAMe,SAAS,GAAG,KAAKf,KAAL,CAAWe,SAA7B;AACA,UAAME,UAAU,GAAG,KAAKjB,KAAL,CAAWiB,UAA9B;AACA,UAAMsC,UAAU,GAAGtD,IAAI,CAACc,SAAS,CAAC,CAAD,CAAV,CAAJ,CAAmBA,SAAS,CAAC,CAAD,CAA5B,CAAnB;AACA,UAAMyC,WAAW,GAAGvD,IAAI,CAACgB,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAApB;AACA,UAAMyC,mBAAmB,GAAG5E,gBAAgB,CAACmB,IAAD,EAAOsD,UAAP,EAAmBC,WAAnB,CAA5C;AACA,UAAMM,wBAAwB,GAAGpF,2BAA2B,CAAC8E,WAAD,CAA5D;AACA,SAAKsC,WAAL,CAAiBpC,mBAAjB,EAAsCI,wBAAtC;AACD,GAjY+C,CAmYhD;;;AAEAkC,EAAAA,6BAA6B,CAC3BC,wBAD2B,EAE3BC,yBAF2B,EAG3BpC,wBAH2B,EAI3BqC,aAJ2B,EAK3B;AACA,QAAIC,GAAG,GAAGC,IAAI,CAACC,GAAL,CACRL,wBAAwB,CAAC9B,MADjB,EAER+B,yBAAyB,CAAC/B,MAFlB,CAAV;;AAIA,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIkC,GAArB,EAA0BlC,CAAC,EAA3B,EAA+B;AAC7B,UAAIqC,KAAK,GAAGN,wBAAwB,CAAC/B,CAAD,CAApC;AACA,UAAIsC,KAAK,GAAGN,yBAAyB,CAAChC,CAAD,CAArC;;AACA,UAAIA,CAAC,KAAK+B,wBAAwB,CAAC9B,MAAnC,EAA2C;AACzCC,QAAAA,UAAU,CAAC,MAAM;AACf,cAAIV,mBAAmB,GAAG+C,sBAAsB,CAC9CR,wBAD8C,EAE9CC,yBAF8C,CAAhD;;AAIA,cAAIC,aAAJ,EAAmB;AACjB,iBAAKX,mBAAL,CACE1B,wBADF,EAEEJ,mBAFF;AAID,WALD,MAKO;AACL,iBAAKvD,QAAL,CAAc;AAAE2E,cAAAA,oBAAoB,EAAE;AAAxB,aAAd;AACD;AACF,SAbS,EAaPZ,CAAC,GAAG,EAbG,CAAV;AAcA;AACD;;AACDE,MAAAA,UAAU,CAAC,MAAM;AACf;AACA,YAAImC,KAAK,KAAKG,SAAd,EACEhC,QAAQ,CAACC,cAAT,CAAyB,QAAO4B,KAAK,CAAC1G,GAAI,IAAG0G,KAAK,CAACzG,GAAI,EAAvD,EAA0D8E,SAA1D,GACE,mBADF;AAEF,YAAI4B,KAAK,KAAKE,SAAd,EACEhC,QAAQ,CAACC,cAAT,CAAyB,QAAO6B,KAAK,CAAC3G,GAAI,IAAG2G,KAAK,CAAC1G,GAAI,EAAvD,EAA0D8E,SAA1D,GACE,mBADF;AAEH,OARS,EAQPV,CAAC,GAAG,EARG,CAAV;AASD;AACF;;AAEDb,EAAAA,kCAAkC,GAAG;AACnC,QAAI,KAAKrD,KAAL,CAAW8E,oBAAX,IAAmC,KAAK9E,KAAL,CAAWsE,cAAlD,EAAkE;AAChE;AACD;;AACD,SAAKnE,QAAL,CAAc;AAAE2E,MAAAA,oBAAoB,EAAE;AAAxB,KAAd;AACAV,IAAAA,UAAU,CAAC,MAAM;AACf,YAAM;AAAEnE,QAAAA;AAAF,UAAW,KAAKD,KAAtB;AACA,YAAMuD,UAAU,GAAG,KAAKvD,KAAL,CAAWe,SAA9B;AACA,YAAMyC,WAAW,GAAG,KAAKxD,KAAL,CAAWiB,UAA/B;AACA,YAAMF,SAAS,GAAGd,IAAI,CAACsD,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;AACA,YAAMtC,UAAU,GAAGhB,IAAI,CAACuD,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;AACA,YAAME,mBAAmB,GAAGvE,yBAAyB,CACnDc,IADmD,EAEnDc,SAFmD,EAGnDE,UAHmD,CAArD;AAKA,YAAMgF,wBAAwB,GAAGvC,mBAAmB,CAAC,CAAD,CAApD;AACA,YAAMwC,yBAAyB,GAAGxC,mBAAmB,CAAC,CAAD,CAArD;AACA,YAAMyC,aAAa,GAAGzC,mBAAmB,CAAC,CAAD,CAAzC;AACA,YAAMI,wBAAwB,GAAG1E,oDAAoD,CACnF6G,wBAAwB,CAACA,wBAAwB,CAAC9B,MAAzB,GAAkC,CAAnC,CAD2D,EAEnF+B,yBAAyB,CAACA,yBAAyB,CAAC/B,MAA1B,GAAmC,CAApC,CAF0D,CAArF;AAIA,WAAK6B,6BAAL,CACEC,wBADF,EAEEC,yBAFF,EAGEpC,wBAHF,EAIEqC,aAJF;AAMD,KAxBS,EAwBP,EAxBO,CAAV;AAyBD,GA7c+C,CA+chD;;;AAEAX,EAAAA,mBAAmB,CAAC1B,wBAAD,EAA2B;AAC5C,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,wBAAwB,CAACK,MAA7C,EAAqDD,CAAC,EAAtD,EAA0D;AACxDE,MAAAA,UAAU,CAAC,MAAM;AACf,cAAMI,IAAI,GAAGV,wBAAwB,CAACI,CAAD,CAArC;AACAQ,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAAC3E,GAAI,IAAG2E,IAAI,CAAC1E,GAAI,EAArD,EAAwD8E,SAAxD,GACE,yBADF;AAED,OAJS,EAIP,KAAKV,CAJE,CAAV;AAKD;AACF,GAzd+C,CA2dhD;;;AAuBAtB,EAAAA,kBAAkB,GAAG;AACnB,QAAI,KAAK5C,KAAL,CAAW8E,oBAAX,IAAmC,KAAK9E,KAAL,CAAWsE,cAAlD,EAAkE;AAChE;AACD;;AACD,SAAKnE,QAAL,CAAc;AAAEmE,MAAAA,cAAc,EAAE;AAAlB,KAAd;AACAF,IAAAA,UAAU,CAAC,MAAM;AACf,YAAM;AAAEnE,QAAAA;AAAF,UAAW,KAAKD,KAAtB;AACA,YAAMuD,UAAU,GAAG,KAAKvD,KAAL,CAAWe,SAA9B;AACA,YAAMyC,WAAW,GAAG,KAAKxD,KAAL,CAAWiB,UAA/B;AACA,YAAMF,SAAS,GAAGd,IAAI,CAACsD,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;AACA,YAAMtC,UAAU,GAAGhB,IAAI,CAACuD,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;AACA,YAAMS,KAAK,GAAGlF,UAAU,CAACkB,IAAD,EAAOc,SAAP,EAAkBE,UAAlB,CAAxB;AACA,WAAK+C,WAAL,CAAiBC,KAAjB;AACD,KARS,EAQP,EARO,CAAV;AASD;;AAEDxB,EAAAA,6BAA6B,GAAG;AAC9B,QAAI,KAAKzC,KAAL,CAAW8E,oBAAX,IAAmC,KAAK9E,KAAL,CAAWsE,cAAlD,EAAkE;AAChE;AACD;;AACD,SAAKnE,QAAL,CAAc;AAAEmE,MAAAA,cAAc,EAAE;AAAlB,KAAd;AACAF,IAAAA,UAAU,CAAC,MAAM;AACf,YAAM;AAAEnE,QAAAA;AAAF,UAAW,KAAKD,KAAtB;AACA,YAAMuD,UAAU,GAAG,KAAKvD,KAAL,CAAWe,SAA9B;AACA,YAAMyC,WAAW,GAAG,KAAKxD,KAAL,CAAWiB,UAA/B;AACA,YAAMF,SAAS,GAAGd,IAAI,CAACsD,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;AACA,YAAMtC,UAAU,GAAGhB,IAAI,CAACuD,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;AACA,YAAMS,KAAK,GAAG/E,qBAAqB,CAACe,IAAD,EAAOc,SAAP,EAAkBE,UAAlB,CAAnC;AACA,WAAK+C,WAAL,CAAiBC,KAAjB;AACD,KARS,EAQP,EARO,CAAV;AASD;;AAEDvB,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAK1C,KAAL,CAAW8E,oBAAX,IAAmC,KAAK9E,KAAL,CAAWsE,cAAlD,EAAkE;AAChE;AACD;;AACD,SAAKnE,QAAL,CAAc;AAAEmE,MAAAA,cAAc,EAAE;AAAlB,KAAd;AACAF,IAAAA,UAAU,CAAC,MAAM;AACf,YAAM;AAAEnE,QAAAA;AAAF,UAAW,KAAKD,KAAtB;AACA,YAAMuD,UAAU,GAAG,KAAKvD,KAAL,CAAWe,SAA9B;AACA,YAAMyC,WAAW,GAAG,KAAKxD,KAAL,CAAWiB,UAA/B;AACA,YAAMF,SAAS,GAAGd,IAAI,CAACsD,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;AACA,YAAMtC,UAAU,GAAGhB,IAAI,CAACuD,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;AACA,YAAMS,KAAK,GAAGjF,YAAY,CAACiB,IAAD,EAAOc,SAAP,EAAkBE,UAAlB,CAA1B;AACA,WAAK+C,WAAL,CAAiBC,KAAjB;AACD,KARS,EAQP,EARO,CAAV;AASD;;AAEDtB,EAAAA,sBAAsB,GAAG;AACvB,QAAI,KAAK3C,KAAL,CAAW8E,oBAAX,IAAmC,KAAK9E,KAAL,CAAWsE,cAAlD,EAAkE;AAChE;AACD;;AACD,SAAKnE,QAAL,CAAc;AAAEmE,MAAAA,cAAc,EAAE;AAAlB,KAAd;AACAF,IAAAA,UAAU,CAAC,MAAM;AACf,YAAM;AAAEnE,QAAAA;AAAF,UAAW,KAAKD,KAAtB;AACA,YAAMuD,UAAU,GAAG,KAAKvD,KAAL,CAAWe,SAA9B;AACA,YAAMyC,WAAW,GAAG,KAAKxD,KAAL,CAAWiB,UAA/B;AACA,YAAMF,SAAS,GAAGd,IAAI,CAACsD,UAAU,CAAC,CAAD,CAAX,CAAJ,CAAoBA,UAAU,CAAC,CAAD,CAA9B,CAAlB;AACA,YAAMtC,UAAU,GAAGhB,IAAI,CAACuD,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAnB;AACA,YAAMS,KAAK,GAAGhF,cAAc,CAACgB,IAAD,EAAOc,SAAP,EAAkBE,UAAlB,CAA5B;AACA,WAAK+C,WAAL,CAAiBC,KAAjB;AACD,KARS,EAQP,EARO,CAAV;AASD;;AAED0C,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAE,KAAKtF,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,+BACI,QAAC,UAAD;AACI,UAAA,KAAK,EAAE,KAAKrB,KADhB;AAEI,UAAA,eAAe,EAAE,KAAKJ,eAF1B;AAGI,UAAA,gBAAgB,EAAE,KAAKiB,gBAH3B;AAII,UAAA,aAAa,EAAE,KAAKO;AAJxB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eAUI,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,KAAKpB,KAApB;AAA2B,QAAA,SAAS,EAAE,KAAK6C,SAA3C;AAAsD,QAAA,cAAc,EAAE,KAAKV,cAA3E;AAA2F,QAAA,OAAO,EAAE,KAAKI,YAAzG;AAAuH,QAAA,IAAI,EAAE,KAAKQ,aAAlI;AAAiJ,QAAA,UAAU,EAAE,KAAKhB,UAAlK;AAA8K,QAAA,gBAAgB,EAAE,KAAKR,oBAArM;AAA2N,QAAA,iBAAiB,EAAE,KAAKyB;AAAnP;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;;AAjkB+C;;AAokBpD,MAAMa,UAAU,GAAI7D,KAAD,IAAW;AAC1B,QAAMC,IAAI,GAAG,EAAb;AACA,MAAI+E,MAAM,GAAKC,MAAM,CAACC,WAAR,GAAuB,EAAxB,GAA8B,CAA3C;AACA,MAAIC,MAAM,GAAKF,MAAM,CAACG,UAAR,GAAsB,EAAvB,GAA6B,CAA1C;;AACA,OAAK,IAAIvF,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGmF,MAAxB,EAAgCnF,GAAG,EAAnC,EAAuC;AACrC,UAAM+G,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAI9G,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGqF,MAAxB,EAAgCrF,GAAG,EAAnC,EAAuC;AACrC,UAAI0E,IAAI,GAAGqC,UAAU,CAAC/G,GAAD,EAAMD,GAAN,EAAWG,KAAX,CAArB;AACAwE,MAAAA,IAAI,CAACI,SAAL,GAAiB,WAAjB;AACAgC,MAAAA,UAAU,CAACE,IAAX,CAAgBtC,IAAhB;AACD;;AACDvE,IAAAA,IAAI,CAAC6G,IAAL,CAAUF,UAAV;AACD;;AACD,SAAO3G,IAAP;AACH,CAdD;;AAkBA,MAAM4G,UAAU,GAAG,CAAC/G,GAAD,EAAMD,GAAN,EAAWG,KAAX,KAAqB;AACpC,QAAMe,SAAS,GAAGf,KAAK,CAACe,SAAxB;AACA,QAAME,UAAU,GAAGjB,KAAK,CAACiB,UAAzB;AACA,QAAMqC,QAAQ,GAAGtD,KAAK,CAACmB,QAAvB;AACA,SAAO;AACLrB,IAAAA,GADK;AAELD,IAAAA,GAFK;AAGLK,IAAAA,OAAO,EAAEL,GAAG,KAAKkB,SAAS,CAAC,CAAD,CAAjB,IAAwBjB,GAAG,KAAKiB,SAAS,CAAC,CAAD,CAH7C;AAILV,IAAAA,QAAQ,EAAER,GAAG,KAAKoB,UAAU,CAAC,CAAD,CAAlB,IAAyBnB,GAAG,KAAKmB,UAAU,CAAC,CAAD,CAJhD;AAKLsE,IAAAA,MAAM,EAAEvF,KAAK,CAACW,WAAN,GAAoBd,GAAG,KAAKyD,QAAQ,CAAC,CAAD,CAAhB,IAAuBxD,GAAG,KAAKwD,QAAQ,CAAC,CAAD,CAA3D,GAAiE,IALpE;AAMLyD,IAAAA,QAAQ,EAAEC,QANL;AAOLC,IAAAA,SAAS,EAAE,KAPN;AAQLxC,IAAAA,MAAM,EAAE,KARH;AASLyC,IAAAA,YAAY,EAAE;AATT,GAAP;AAWD,CAfH;;AAiBE,MAAMC,YAAY,GAAInH,KAAD,IAAW;AAC9B,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,QAAMc,SAAS,GAAGd,IAAI,CAACD,KAAK,CAACe,SAAN,CAAgB,CAAhB,CAAD,CAAJ,CAAyBf,KAAK,CAACe,SAAN,CAAgB,CAAhB,CAAzB,CAAlB;AACA,QAAME,UAAU,GAAGhB,IAAI,CAACD,KAAK,CAACiB,UAAN,CAAiB,CAAjB,CAAD,CAAJ,CAA0BjB,KAAK,CAACiB,UAAN,CAAiB,CAAjB,CAA1B,CAAnB;;AACA,OAAI,IAAIpB,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAGI,IAAI,CAACkE,MAA5B,EAAoCtE,GAAG,EAAvC,EAA0C;AACxC,QAAIsF,MAAM,GAAGlF,IAAI,CAACJ,GAAD,CAAjB;;AACA,SAAI,IAAIC,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAGqF,MAAM,CAAChB,MAA9B,EAAsCrE,GAAG,EAAzC,EAA4C;AAC1C,UAAI0E,IAAI,GAAGvE,IAAI,CAACJ,GAAD,CAAJ,CAAUC,GAAV,CAAX;;AACA,UAAG0E,IAAI,CAACC,MAAL,IAAeD,IAAI,CAACmB,QAApB,IAAgCnB,IAAI,CAACe,MAAxC,EAA+C;AAC7Cf,QAAAA,IAAI,CAACC,MAAL,GAAc,KAAd;AACAD,QAAAA,IAAI,CAACmB,QAAL,GAAgB,KAAhB;AACAnB,QAAAA,IAAI,CAACe,MAAL,GAAc,KAAd;AACAf,QAAAA,IAAI,CAACyC,SAAL,GAAiB,KAAjB;AACD;;AACD,UAAGzC,IAAI,KAAKzD,SAAZ,EAAsB;AACpB2D,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAAC3E,GAAI,IAAG2E,IAAI,CAAC1E,GAAI,EAArD,EAAwD8E,SAAxD,GAAoE,iBAApE;AACD,OAFD,MAEO,IAAGJ,IAAI,KAAKvD,UAAZ,EAAuB;AAC5ByD,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAAC3E,GAAI,IAAG2E,IAAI,CAAC1E,GAAI,EAArD,EAAwD8E,SAAxD,GAAoE,kBAApE;AACD,OAFM,MAEA;AACLF,QAAAA,QAAQ,CAACC,cAAT,CAAyB,QAAOH,IAAI,CAAC3E,GAAI,IAAG2E,IAAI,CAAC1E,GAAI,EAArD,EAAwD8E,SAAxD,GAAoE,MAApE;AACD;AACF;AACF;;AACD,SAAO3E,IAAP;AAED,CAzBD;;AA2BA,MAAMa,mBAAmB,GAAG,CAACb,IAAD,EAAOJ,GAAP,EAAYC,GAAZ,EAAiBsH,SAAjB,KAA+B;AACzD,QAAMrH,OAAO,GAAGE,IAAI,CAACoH,KAAL,EAAhB;AACA,QAAMC,QAAQ,GAAGvH,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAjB;AACA,QAAMyH,QAAQ,GAAGxH,OAAO,CAACqH,SAAS,CAAC,CAAD,CAAV,CAAP,CAAsBA,SAAS,CAAC,CAAD,CAA/B,CAAjB;AACA,QAAMI,OAAO,GAAG,EACd,GAAGD,QADW;AAEdrH,IAAAA,OAAO,EAAE,CAACqH,QAAQ,CAACrH;AAFL,GAAhB;AAIA,QAAMuH,OAAO,GAAG,EACd,GAAGH,QADW;AAEdpH,IAAAA,OAAO,EAAE,CAACoH,QAAQ,CAACpH;AAFL,GAAhB;AAIAH,EAAAA,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB2H,OAApB;AACA1H,EAAAA,OAAO,CAACqH,SAAS,CAAC,CAAD,CAAV,CAAP,CAAsBA,SAAS,CAAC,CAAD,CAA/B,IAAsCI,OAAtC;AACA,SAAOzH,OAAP;AACD,CAfD;;AAiBA,MAAMiB,oBAAoB,GAAG,CAACf,IAAD,EAAOJ,GAAP,EAAYC,GAAZ,EAAiB4H,UAAjB,KAAgC;AAC3D,QAAM3H,OAAO,GAAGE,IAAI,CAACoH,KAAL,EAAhB;AACA,MAAGtH,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,EAAkBI,OAAlB,IAA6BH,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,EAAkB2E,MAAlD,EAA0D,OAAOxE,IAAP;AAC1D,QAAM0H,SAAS,GAAG5H,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAlB;AACA,QAAM8H,SAAS,GAAG7H,OAAO,CAAC2H,UAAU,CAAC,CAAD,CAAX,CAAP,CAAuBA,UAAU,CAAC,CAAD,CAAjC,CAAlB;AACA,QAAMF,OAAO,GAAG,EACd,GAAGI,SADW;AAEdvH,IAAAA,QAAQ,EAAE,CAACuH,SAAS,CAACvH;AAFP,GAAhB;AAIA,QAAMoH,OAAO,GAAG,EACd,GAAGE,SADW;AAEdtH,IAAAA,QAAQ,EAAE,CAACsH,SAAS,CAACtH;AAFP,GAAhB;AAIAN,EAAAA,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB2H,OAApB;AACA1H,EAAAA,OAAO,CAAC2H,UAAU,CAAC,CAAD,CAAX,CAAP,CAAuBA,UAAU,CAAC,CAAD,CAAjC,IAAwCF,OAAxC;AACA,SAAOzH,OAAP;AACD,CAhBD;;AAkBA,MAAMS,yBAAyB,GAAG,CAACP,IAAD,EAAOJ,GAAP,EAAYC,GAAZ,KAAoB;AACpD,QAAMC,OAAO,GAAGE,IAAI,CAACoH,KAAL,EAAhB;AACA,QAAM7C,IAAI,GAAGzE,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAb;AACA,MAAI2H,OAAO,GAAG,EAAC,GAAGjD;AAAJ,GAAd;AACAiD,EAAAA,OAAO,GAAG,EACR,GAAGjD,IADK;AAERC,IAAAA,MAAM,EAAE,CAACD,IAAI,CAACC;AAFN,GAAV;AAIA1E,EAAAA,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB2H,OAApB;AACA,SAAO1H,OAAP;AACD,CAVD;;AAYA,MAAMU,2BAA2B,GAAG,CAACR,IAAD,EAAOJ,GAAP,EAAYC,GAAZ,KAAoB;AACtD,QAAMC,OAAO,GAAGE,IAAI,CAACoH,KAAL,EAAhB;AACA,QAAM7C,IAAI,GAAGzE,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAb;AACA,MAAI2H,OAAO,GAAG,EAAC,GAAGjD;AAAJ,GAAd;AACAiD,EAAAA,OAAO,GAAG,EACR,GAAGjD,IADK;AAERmB,IAAAA,QAAQ,EAAE,CAACnB,IAAI,CAACmB;AAFR,GAAV;AAIA5F,EAAAA,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB2H,OAApB;AACA,SAAO1H,OAAP;AACD,CAVD;;AAYA,MAAMmB,yBAAyB,GAAG,CAACjB,IAAD,EAAOJ,GAAP,EAAYC,GAAZ,EAAiBqB,QAAjB,KAA8B;AAC9D,QAAMpB,OAAO,GAAGE,IAAI,CAACoH,KAAL,EAAhB;AACA,QAAMQ,OAAO,GAAG9H,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAhB;;AACA,MAAGqB,QAAQ,CAACgD,MAAT,KAAoB,CAAvB,EAAyB;AACvB,UAAMsD,OAAO,GAAG,EACd,GAAGI,OADW;AAEdtC,MAAAA,MAAM,EAAE,CAACsC,OAAO,CAACtC;AAFH,KAAhB;AAIAxF,IAAAA,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB2H,OAApB;AACA,WAAO1H,OAAP;AACD;;AACD,QAAM+H,OAAO,GAAG/H,OAAO,CAACoB,QAAQ,CAAC,CAAD,CAAT,CAAP,CAAqBA,QAAQ,CAAC,CAAD,CAA7B,CAAhB;AACA,QAAMqG,OAAO,GAAG,EACd,GAAGM,OADW;AAEdvC,IAAAA,MAAM,EAAE,CAACuC,OAAO,CAACvC;AAFH,GAAhB;AAIA,QAAMkC,OAAO,GAAG,EACd,GAAGI,OADW;AAEdtC,IAAAA,MAAM,EAAE,CAACsC,OAAO,CAACtC;AAFH,GAAhB;AAIAxF,EAAAA,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoB2H,OAApB;AACA1H,EAAAA,OAAO,CAACoB,QAAQ,CAAC,CAAD,CAAT,CAAP,CAAqBA,QAAQ,CAAC,CAAD,CAA7B,IAAoCqG,OAApC;AACA,SAAOzH,OAAP;AACD,CAvBD;;AAyBA,MAAMsE,kBAAkB,GAAG,CAACpE,IAAD,EAAOgE,KAAP,KAAiB;AAC1C,MAAIlE,OAAO,GAAGE,IAAI,CAACoH,KAAL,EAAd;;AACA,OAAK,IAAI9C,IAAT,IAAiBN,KAAjB,EAAwB;AACtB,QAAIO,IAAI,GAAGvE,IAAI,CAACsE,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAcA,IAAI,CAAC,CAAD,CAAlB,CAAX;AACA,QAAIkD,OAAO,GAAG,EACZ,GAAGjD,IADS;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAd;AAIA1E,IAAAA,OAAO,CAACwE,IAAI,CAAC,CAAD,CAAL,CAAP,CAAiBA,IAAI,CAAC,CAAD,CAArB,IAA4BkD,OAA5B;AACD;;AACD,SAAO1H,OAAP;AACD,CAXD;;AAaA,MAAMsF,cAAc,GAAG,CAAC0C,OAAD,EAAUC,UAAV,KAAyB;AAC9C,MAAI/H,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIJ,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGkI,OAAxB,EAAiClI,GAAG,EAApC,EAAwC;AACtC,QAAI+G,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAI9G,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGkI,UAAxB,EAAoClI,GAAG,EAAvC,EAA2C;AACzC8G,MAAAA,UAAU,CAACE,IAAX,CAAgBD,UAAU,CAAChH,GAAD,EAAMC,GAAN,CAA1B;AACD;;AACDG,IAAAA,IAAI,CAAC6G,IAAL,CAAUF,UAAV;AACD;;AACD,SAAO3G,IAAP;AACD,CAVD;;AAYA,MAAMwG,sBAAsB,GAAG,CAC7BR,wBAD6B,EAE7BC,yBAF6B,KAG1B;AACH,MAAIxC,mBAAmB,GAAG,EAA1B;AACA,MAAIuE,CAAC,GAAG5B,IAAI,CAACC,GAAL,CACNL,wBAAwB,CAAC9B,MADnB,EAEN+B,yBAAyB,CAAC/B,MAFpB,CAAR;;AAIA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+D,CAApB,EAAuB/D,CAAC,EAAxB,EAA4B;AAC1B,QAAI+B,wBAAwB,CAAC/B,CAAD,CAAxB,KAAgCwC,SAApC,EAA+C;AAC7ChD,MAAAA,mBAAmB,CAACoD,IAApB,CAAyBb,wBAAwB,CAAC/B,CAAD,CAAjD;AACD;;AACD,QAAIgC,yBAAyB,CAAChC,CAAD,CAAzB,KAAiCwC,SAArC,EAAgD;AAC9ChD,MAAAA,mBAAmB,CAACoD,IAApB,CAAyBZ,yBAAyB,CAAChC,CAAD,CAAlD;AACD;AACF;;AACD,SAAOR,mBAAP;AACD,CAlBD;;AAoBA,MAAM4B,kBAAkB,GAAIrF,IAAD,IAAU;AACnC,MAAIF,OAAO,GAAGE,IAAI,CAACoH,KAAL,EAAd;;AACA,OAAK,IAAIxH,GAAT,IAAgBI,IAAhB,EAAsB;AACpB,SAAK,IAAIuE,IAAT,IAAiB3E,GAAjB,EAAsB;AACpB,UAAI4H,OAAO,GAAG,EACZ,GAAGjD,IADS;AAEZuC,QAAAA,QAAQ,EAAEC,QAFE;AAGZkB,QAAAA,aAAa,EAAElB,QAHH;AAIZC,QAAAA,SAAS,EAAE,KAJC;AAKZkB,QAAAA,UAAU,EAAE,KALA;AAMZjB,QAAAA,YAAY,EAAE,IANF;AAOZzC,QAAAA,MAAM,EAAE,KAPI;AAQZkB,QAAAA,QAAQ,EAAE,KARE;AASZJ,QAAAA,MAAM,EAAE;AATI,OAAd;AAWAxF,MAAAA,OAAO,CAACyE,IAAI,CAAC3E,GAAN,CAAP,CAAkB2E,IAAI,CAAC1E,GAAvB,IAA8B2H,OAA9B;AACD;AACF;;AACD,SAAO1H,OAAP;AACD,CAnBD","sourcesContent":["import React, {Component} from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithims/dijkstra';\nimport {aStar} from '../algorithims/aStar'\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data'\nimport algData from '../data/alg-data'\nimport './mainContainer.css'\nimport { ContactlessOutlined } from '@material-ui/icons';\n\n// const START_NODE_ROW = 10;\n// const START_NODE_COL = 5;\n// const FINISH_NODE_ROW = 10;\n// const FINISH_NODE_COL = 45;\n\nexport default class MainContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start',\n            currItemObj: itemData[0],\n            currAlgObj: algData[0],\n            currAlgTab: 0,\n            currMazeAlg: 'Recursive Division Maze',\n            currMazeTab: 0,\n            startNode: [10, 5],\n            finishNode: [10, 45],\n            startIsMoving: false,\n            finishIsMoving: false,\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            generatingMaze: false,\n            visualizingAlgorithm: false\n        }\n    }\n\n    componentDidMount() {\n        const grid = renderGrid(this.state);\n        this.setState({grid});\n    }\n\n    handleMouseDown = (row, col) => {\n        var newGrid = this.state.grid\n        if(this.state.grid[row][col].isStart){\n          this.setState({startIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.grid[row][col].isFinish){\n          this.setState({finishIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Stop'){\n          this.setState({stopIsMoving: true, isThereStop: true})\n        }\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter = (row, col) => {\n        if (!this.state.mouseIsPressed) return;\n        var newGrid = this.state.grid;\n        if(this.state.startIsMoving){\n          newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode)\n          this.setState({startNode: [row, col]})\n        } \n        else if(this.state.finishIsMoving){\n          newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode)\n          this.setState({finishNode: [row, col]})\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        }  else if(this.state.currItemDesc === 'Stop'){\n          newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n          this.setState({prevStop: [row, col]})\n        }\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp = (row, col) => {\n        this.setState({mouseIsPressed: false, startIsMoving: false, finishIsMoving: false});\n    }\n\n    handleNav = () => {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    clearGrid() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if (\n            !(\n              (row === startNode[0] && col === startNode[1]) ||\n              (row === finishNode[0] && col === finishNode[1])\n            )\n          ) {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      var rowNum = ((window.innerHeight-25) / 25)-2\n      var colNum = (window.innerWidth-20) / 25\n      const newGrid = getInitialGrid(rowNum, colNum);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n      });\n    }\n\n    //navBar functions\n    handleItemDescChange = (e, item) => {\n      var newItem = `${item}`\n      itemData.map((_item) => {\n        if(item === _item.id){this.setState({currItemDesc: newItem, currItemObj: _item})}\n      })\n    }\n\n    handleTabs = (e, val) => {\n      this.setState({currAlgTab: val, currAlgObj: algData[val]})\n    }\n\n    handleMazeTabs = (e, val) => {\n      this.setState({currMazeTab: val})\n      console.log(val)\n    }\n\n    generateMaze = (e) => {\n      var currAlg = this.state.currMazeTab\n      \n      if(currAlg===0){\n        this.generateRecursiveDivisionMaze()\n        console.log('hi')\n      } else if(currAlg===1){\n        this.generateVerticalMaze()\n      } else if(currAlg===2){\n        this.generateHorizontalMaze()\n      } else if(currAlg===3){\n        this.generateRandomMaze()\n      }\n    }\n\n    resetGrid = (e) => {\n      this.clearGrid()\n    }\n\n    clearGrid() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      var rowNum = ((window.innerHeight-25) / 25)-2\n      var colNum = (window.innerWidth-20) / 25\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if (\n            !(\n              (row === startNode[0] && col === startNode[1]) ||\n              (row === finishNode[0] && col === finishNode[1])\n            )\n          ) {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n      });\n    }\n\n    // play animation\n\n    playAnimation = (e) => {\n      var currAlg = this.state.currAlgObj.id\n      if(currAlg===0){\n        this.visualizeDijkstra()\n      } else if(currAlg===1){\n        this.visualizeaStar()\n      } else if(currAlg===6){\n        this.visualizbfs()\n      } else if(currAlg===2){\n        this.visualizegbfs()\n      } else if(currAlg===7){\n        this.visualizegdfs()\n      } else if(currAlg===5){\n        this.visualizeBidirectionalGreedySearch()\n      }\n      return\n    }\n\n    //animte dijkstra\n\n    animateDijkstra(visitedNodesInOrder, visitedNodesInOrderStop, nodesInShortestPathOrder, isStop) {\n      console.log(visitedNodesInOrder)\n      // for(let j = 0; j < 2; j++){\n      //   for (let i = 0; i <= visitedNodesInOrder[j].length; i++) {\n      //     if (i === visitedNodesInOrder[j].length) {\n      //       if(isStop===true){break}\n      //       setTimeout(() => {\n      //           this.animateShortestPath(nodesInShortestPathOrder);\n      //       }, 10 * i);\n      //       return;\n      //     } \n      //     setTimeout(() => {\n      //       const node = visitedNodesInOrder[j][i];\n      //       console.log(node)\n      //       document.getElementById(`node-${node.row}-${node.col}`).className =\n      //       isStop ? 'node node-target-visited' : 'node node-visited';\n      //     }, 10 * i);\n      //   }\n      // }\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length && !isStop) {\n          setTimeout(() => {\n            this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n        }\n        if(i === visitedNodesInOrder.length && isStop){\n          for (let j = 0; j <= visitedNodesInOrderStop.length; j++) {\n            if (j === visitedNodesInOrderStop.length) {\n              setTimeout(() => {\n                this.animateShortestPath(nodesInShortestPathOrder);\n              }, 10 * j);\n              return;\n            }\n            var time = 0\n            setTimeout(() => {\n              const node = visitedNodesInOrderStop[j];\n              if(!node.isWeight){\n                time = 10\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                'node node-target-visited';\n              } else {\n                time = 15\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                'node node-target-visited';\n              }\n            }, time * j);\n          }\n        }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n        }, 10 * i);\n      }\n    }\n    \n    visualizeDijkstra = () => {\n          const {grid} = this.state;\n          const startNode = this.state.startNode\n          const finishNode = this.state.finishNode\n          const stopNode = this.state.prevStop ? this.state.prevStop : []\n          const _startNode = grid[startNode[0]][startNode[1]];\n          const _finishNode = grid[finishNode[0]][finishNode[1]]\n          const _stopNode = this.state.isThereStop ? grid[stopNode[0]][stopNode[1]] : false;\n          var visitedNodesInOrder = []\n          var visitedNodesInOrderStop = []\n          if(_stopNode === false){\n            visitedNodesInOrder = dijkstra(grid, _startNode, _finishNode);\n          } else if(_stopNode != false){\n            visitedNodesInOrder = dijkstra(grid, _startNode, _stopNode)\n            var _newGrid = renderGrid(this.state)\n            visitedNodesInOrderStop = dijkstra(_newGrid, _stopNode, _finishNode)\n          }\n          console.log(visitedNodesInOrder, visitedNodesInOrderStop)\n          const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n          this.animateDijkstra(visitedNodesInOrder, visitedNodesInOrderStop, nodesInShortestPathOrder, this.state.isThereStop);\n    }\n\n    //animate aStar\n\n    animateaStar(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizeaStar() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    //animate breadth first search \n\n    animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizbfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    // greedy best first search\n\n    animategbfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizegbfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    // depth first search\n\n    animatedfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizegdfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    // bidirectional greedy first search\n\n    animateBidirectionalAlgorithm(\n      visitedNodesInOrderStart,\n      visitedNodesInOrderFinish,\n      nodesInShortestPathOrder,\n      isShortedPath\n    ) {\n      let len = Math.max(\n        visitedNodesInOrderStart.length,\n        visitedNodesInOrderFinish.length\n      );\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n        if (i === visitedNodesInOrderStart.length) {\n          setTimeout(() => {\n            let visitedNodesInOrder = getVisitedNodesInOrder(\n              visitedNodesInOrderStart,\n              visitedNodesInOrderFinish\n            );\n            if (isShortedPath) {\n              this.animateShortestPath(\n                nodesInShortestPathOrder,\n                visitedNodesInOrder\n              );\n            } else {\n              this.setState({ visualizingAlgorithm: false });\n            }\n          }, i * 10);\n          return;\n        }\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined)\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\n              \"node node-visited\";\n          if (nodeB !== undefined)\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\n              \"node node-visited\";\n        }, i * 10);\n      }\n    }\n\n    visualizeBidirectionalGreedySearch() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ visualizingAlgorithm: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]];\n        const finishNode = grid[_finishNode[0]][_finishNode[1]];\n        const visitedNodesInOrder = bidirectionalGreedySearch(\n          grid,\n          startNode,\n          finishNode\n        );\n        const visitedNodesInOrderStart = visitedNodesInOrder[0];\n        const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n        const isShortedPath = visitedNodesInOrder[2];\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\n          visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n          visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n        );\n        this.animateBidirectionalAlgorithm(\n          visitedNodesInOrderStart,\n          visitedNodesInOrderFinish,\n          nodesInShortestPathOrder,\n          isShortedPath\n        );\n      }, 10);\n    }\n\n    //finish animations\n\n    animateShortestPath(nodesInShortestPathOrder) {\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path';\n        }, 50 * i);\n      }\n    }\n\n    //generate mazes\n\n    animateMaze = (walls) => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({ grid: newGrid, generatingMaze: false });\n          }, i * 10);\n          return;\n        }\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    generateRandomMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = randomMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateRecursiveDivisionMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateVerticalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = verticalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateHorizontalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = horizontalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n\n    render(){ \n        return(\n            <div className=\"main-container\">\n                <button onClick={this.handleNav}>show nav</button>\n                <div className=\"visualizer-container\">\n                    <Visualizer \n                        state={this.state} \n                        handleMouseDown={this.handleMouseDown} \n                        handleMouseEnter={this.handleMouseEnter} \n                        handleMouseUp={this.handleMouseUp}\n                    />\n                </div>\n                <Navbar state={this.state} resetGrid={this.resetGrid} handleMazeTabs={this.handleMazeTabs} genMaze={this.generateMaze} play={this.playAnimation} handleTabs={this.handleTabs} handleItemChange={this.handleItemDescChange} visualizeDijkstra={this.visualizeDijkstra}/>\n            </div>\n        )\n    }\n}\n\nconst renderGrid = (state) => {\n    const grid = [];\n    var rowNum = ((window.innerHeight) / 25) + 3\n    var colNum = ((window.innerWidth) / 25) + 2\n    for (let row = 0; row < rowNum; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colNum; col++) {\n        var node = createNode(col, row, state)\n        node.className = 'node-wall'\n        currentRow.push(node);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\n\n\nconst createNode = (col, row, state) => {\n    const startNode = state.startNode\n    const finishNode = state.finishNode\n    const stopNode = state.prevStop\n    return {\n      col,\n      row,\n      isStart: row === startNode[0] && col === startNode[1],\n      isFinish: row === finishNode[0] && col === finishNode[1],\n      isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n\n  const rerenderGrid = (state) => {\n    const grid = state.grid\n    const startNode = grid[state.startNode[0]][state.startNode[1]]\n    const finishNode = grid[state.finishNode[0]][state.finishNode[1]]\n    for(let row = 0; row < grid.length; row++){\n      var colNum = grid[row]\n      for(let col = 0; col < colNum.length; col++){\n        var node = grid[row][col]\n        if(node.isWall || node.isWeight || node.isStop){\n          node.isWall = false\n          node.isWeight = false\n          node.isStop = false\n          node.isVisited = false\n        }\n        if(node === startNode){\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-start\";\n        } else if(node === finishNode){\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-finish\";\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node\";\n        }\n      }\n    }\n    return grid\n\n  }\n\n  const getNewGridWithStart = (grid, row, col, prevStart) => {\n    const newGrid = grid.slice();\n    const newStart = newGrid[row][col];\n    const oldStart = newGrid[prevStart[0]][prevStart[1]]\n    const oldNode = {\n      ...oldStart,\n      isStart: !oldStart.isStart\n    }\n    const newNode = {\n      ...newStart,\n      isStart: !newStart.isStart,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStart[0]][prevStart[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithFinish = (grid, row, col, prevFinish) => {\n    const newGrid = grid.slice();\n    if(newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n    const newFinish = newGrid[row][col];\n    const oldFinish = newGrid[prevFinish[0]][prevFinish[1]]\n    const oldNode = {\n      ...oldFinish,\n      isFinish: !oldFinish.isFinish\n    }\n    const newNode = {\n      ...newFinish,\n      isFinish: !newFinish.isFinish,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevFinish[0]][prevFinish[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithWeightToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWeight: !node.isWeight,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n    const newGrid = grid.slice();\n    const newStop = newGrid[row][col];\n    if(prevStop.length === 0){\n      const newNode = {\n        ...newStop,\n        isStop: !newStop.isStop,\n      };\n      newGrid[row][col] = newNode;\n      return newGrid;\n    }\n    const oldStop = newGrid[prevStop[0]][prevStop[1]]\n    const oldNode = {\n      ...oldStop,\n      isStop: !oldStop.isStop\n    }\n    const newNode = {\n      ...newStop,\n      isStop: !newStop.isStop,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStop[0]][prevStop[1]] = oldNode\n    return newGrid;\n  };\n\n  const getNewGridWithMaze = (grid, walls) => {\n    let newGrid = grid.slice();\n    for (let wall of walls) {\n      let node = grid[wall[0]][wall[1]];\n      let newNode = {\n        ...node,\n        isWall: true,\n      };\n      newGrid[wall[0]][wall[1]] = newNode;\n    }\n    return newGrid;\n  };\n\n  const getInitialGrid = (numRows, numColumns) => {\n    let grid = [];\n    for (let row = 0; row < numRows; row++) {\n      let currentRow = [];\n      for (let col = 0; col < numColumns; col++) {\n        currentRow.push(createNode(row, col));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const getVisitedNodesInOrder = (\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish\n  ) => {\n    let visitedNodesInOrder = [];\n    let n = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 0; i < n; i++) {\n      if (visitedNodesInOrderStart[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n      }\n      if (visitedNodesInOrderFinish[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n      }\n    }\n    return visitedNodesInOrder;\n  };\n\n  const getGridWithoutPath = (grid) => {\n    let newGrid = grid.slice();\n    for (let row of grid) {\n      for (let node of row) {\n        let newNode = {\n          ...node,\n          distance: Infinity,\n          totalDistance: Infinity,\n          isVisited: false,\n          isShortest: false,\n          previousNode: null,\n          isWall: false,\n          isWeight: false,\n          isStop: false\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    return newGrid;\n  };"]},"metadata":{},"sourceType":"module"}