{"ast":null,"code":"// export function dijkstra(grid, startNode, finishNode, stopNode){\n//   const visitedNodesInOrder = [[],[]];\n//   const unvisitedNodes = getAllNodes(grid)\n//   const _stopNode = stopNode[0] ? stopNode[1] : [];\n//   var pos = 0\n//   while(pos < 2){\n//     console.log('here')\n//     var endBool = pos===0 && stopNode[0]\n//     var beginNode = pos===0 ? startNode : _stopNode\n//     if(pos===0){\n//       beginNode = startNode\n//     } else if(pos===1 && stopNode[0]){\n//       beginNode = _stopNode\n//     }\n//     var endNode = endBool ? _stopNode : finishNode\n//     if(pos===0 && stopNode[0]){\n//       endNode = _stopNode\n//     } else if(!stopNode[1]){\n//       endNode = finishNode\n//     }\n//     console.log(unvisitedNodes)\n//     unvisitedNodes.forEach((node) => {\n//       if(node === beginNode){\n//         node.distance = 0\n//       } else {\n//         node.distance = Infinity\n//       }\n//     })\n//     unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n//     console.log(unvisitedNodes, pos)\n//     while(!!unvisitedNodes){\n//         sortNodesByDistance(unvisitedNodes, endNode)\n//         const closestNode = unvisitedNodes.shift();\n//         if(closestNode.isWall) continue;\n//         console.log('hh', pos)\n//         if(closestNode.distance === Infinity) return visitedNodesInOrder;\n//         closestNode.isVisited = true;\n//         if(pos === 0){\n//           visitedNodesInOrder[0].push(closestNode)\n//         } else if(pos === 1){\n//           visitedNodesInOrder[1].push(closestNode)\n//         }\n//         console.log('jj', pos)\n//         if(closestNode === endNode && stopNode[0]){\n//           break;\n//         } else if(closestNode === endNode && !stopNode[0]){\n//           return visitedNodesInOrder\n//         }\n//         updateUnvisitedNeighbors(closestNode, grid);\n//     }\n//     pos++\n//   }\n// }\nexport function dijkstra(grid, startNode, finishNode, isStop = false) {\n  const visitedNodesInOrder = [];\n  const unvisitedNodes = getAllNodes(grid);\n  console.log(grid, unvisitedNodes);\n  unvisitedNodes.forEach(node => {\n    if (node === startNode) {\n      node.distance = 0;\n      alert('h');\n    } else {\n      node.distance = Infinity;\n    }\n  });\n  var cout = 0;\n\n  while (!!unvisitedNodes) {\n    sortNodesByDistance(unvisitedNodes, finishNode);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue; //function is returning below when taking in the subgrid why?\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    if (nodeA.isWeight) {\n      nodeA.distance += 1;\n    } else if (nodeB.isWeight) {\n      nodeB.distance += 2;\n    }\n\n    return nodeA.distance - nodeB.distance;\n  });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode, stop = false) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  if (stop != false) {\n    while (true) {\n      if (currentNode.isStop != null) {\n        break;\n      }\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  } else if (stop == false) {\n    while (currentNode !== null) {\n      // if(currentNode.isStart===true) break;\n      if (currentNode.isStart == true) break; //console.log(currentNode, currentNode !== null)\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  }\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","isStop","visitedNodesInOrder","unvisitedNodes","getAllNodes","console","log","forEach","node","distance","alert","Infinity","cout","sortNodesByDistance","closestNode","shift","isWall","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","isWeight","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","length","filter","nodes","getNodesInShortestPathOrder","stop","nodesInShortestPathOrder","currentNode","unshift","isStart"],"mappings":"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","sourcesContent":["\n// export function dijkstra(grid, startNode, finishNode, stopNode){\n//   const visitedNodesInOrder = [[],[]];\n//   const unvisitedNodes = getAllNodes(grid)\n//   const _stopNode = stopNode[0] ? stopNode[1] : [];\n//   var pos = 0\n//   while(pos < 2){\n//     console.log('here')\n//     var endBool = pos===0 && stopNode[0]\n//     var beginNode = pos===0 ? startNode : _stopNode\n//     if(pos===0){\n//       beginNode = startNode\n//     } else if(pos===1 && stopNode[0]){\n//       beginNode = _stopNode\n//     }\n//     var endNode = endBool ? _stopNode : finishNode\n//     if(pos===0 && stopNode[0]){\n//       endNode = _stopNode\n//     } else if(!stopNode[1]){\n//       endNode = finishNode\n//     }\n//     console.log(unvisitedNodes)\n//     unvisitedNodes.forEach((node) => {\n//       if(node === beginNode){\n//         node.distance = 0\n//       } else {\n//         node.distance = Infinity\n//       }\n//     })\n//     unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n\n//     console.log(unvisitedNodes, pos)\n//     while(!!unvisitedNodes){\n  \n//         sortNodesByDistance(unvisitedNodes, endNode)\n//         const closestNode = unvisitedNodes.shift();\n\n//         if(closestNode.isWall) continue;\n//         console.log('hh', pos)\n//         if(closestNode.distance === Infinity) return visitedNodesInOrder;\n    \n//         closestNode.isVisited = true;\n//         if(pos === 0){\n//           visitedNodesInOrder[0].push(closestNode)\n//         } else if(pos === 1){\n//           visitedNodesInOrder[1].push(closestNode)\n//         }\n//         console.log('jj', pos)\n//         if(closestNode === endNode && stopNode[0]){\n//           break;\n//         } else if(closestNode === endNode && !stopNode[0]){\n//           return visitedNodesInOrder\n//         }\n//         updateUnvisitedNeighbors(closestNode, grid);\n//     }\n//     pos++\n//   }\n// }\n\nexport function dijkstra(grid, startNode, finishNode, isStop=false){\n  const visitedNodesInOrder = [];\n  const unvisitedNodes = getAllNodes(grid)\n  console.log(grid, unvisitedNodes)\n  unvisitedNodes.forEach((node) => {\n    if(node === startNode){\n      node.distance = 0\n      alert('h')\n    } else {\n      node.distance = Infinity\n    }\n  })\n  var cout = 0\n  while(!!unvisitedNodes){\n      sortNodesByDistance(unvisitedNodes, finishNode)\n      const closestNode = unvisitedNodes.shift();\n\n      if(closestNode.isWall) continue;\n      //function is returning below when taking in the subgrid why?\n      if(closestNode.distance === Infinity) return visitedNodesInOrder;\n\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n\n      if(closestNode === finishNode) return visitedNodesInOrder;\n\n      updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => {\n      if(nodeA.isWeight){\n        nodeA.distance += 1\n      } else if(nodeB.isWeight){\n        nodeB.distance += 2\n      }\n      return nodeA.distance - nodeB.distance\n    });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode, stop=false) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    if(stop!=false){\n      while (true){\n\n        if(currentNode.isStop!=null){\n          break\n        }\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n      }\n      return nodesInShortestPathOrder;\n    }else if(stop==false){\n      while (currentNode !== null) {\n        // if(currentNode.isStart===true) break;\n        if(currentNode.isStart==true) break;\n        //console.log(currentNode, currentNode !== null)\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n      }\n      return nodesInShortestPathOrder;\n    }\n}"]},"metadata":{},"sourceType":"module"}