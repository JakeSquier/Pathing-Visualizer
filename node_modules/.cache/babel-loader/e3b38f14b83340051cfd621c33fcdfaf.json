{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\";\nimport React, { Component, useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { getNodesInShortestPathOrder } from '../workers/dijkstraWorker';\nimport { aStar } from '../algorithims/aStar';\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport NavTop from './navComponents/topNav';\nimport itemData from '../data/item-data';\nimport algData from '../data/alg-data';\nimport pathGrabWorker from '../workers/pathGrabWorker';\nimport _dijkstraWorker from \"../workers/dijkstraWorker\";\nimport aStarWorker from '../workers/aStarWorker';\nimport greedyBestFirstSearchWorker from '../workers/greedyBestFirstSearchWorker';\nimport breadthFirstSearchWorker from '../workers/breadthFirstSearchWorker';\nimport depthFirstSearchWorker from '../workers/depthFirstSearchWorker';\nimport WebWorker from \"../workers/workerSetup\";\nimport './mainContainer.css';\nimport { Message } from '@material-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar maxProgressVal = 100;\nvar currProgressVal = 0;\nexport default class MainContainer extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.handleWindowResize = () => {\n      console.log('changing');\n    };\n\n    this.handleMouseDown = (row, col) => {\n      var newGrid = this.state.grid;\n      const startNode = newGrid[this.state.startNode[0]][this.state.startNode[1]];\n      const finishNode = newGrid[this.state.finishNode[0]][this.state.finishNode[1]];\n      const stopNode = this.state.isThereStop ? newGrid[this.state.prevStop[0]][this.state.prevStop[1]] : false;\n\n      if (this.state.grid[row][col].isStart) {\n        this.setState({\n          startIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.grid[row][col].isFinish) {\n        this.setState({\n          finishIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.currItemDesc === 'Stop') {\n        this.setState({\n          stopIsMoving: true,\n          isThereStop: true\n        });\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(newGrid, row, col);\n        console.log(newGrid[row]);\n      }\n\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n\n    this.handleMouseEnter = (row, col) => {\n      if (!this.state.mouseIsPressed) return;\n      var newGrid = this.state.grid;\n\n      if (this.state.startIsMoving) {\n        newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode);\n        this.setState({\n          startNode: [row, col]\n        });\n      } else if (this.state.finishIsMoving) {\n        newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode);\n        this.setState({\n          finishNode: [row, col]\n        });\n      } else if (this.state.currItemDesc === 'Stop') {\n        newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n        this.setState({\n          prevStop: [row, col]\n        });\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(newGrid, row, col);\n        console.log(newGrid[(row, col)]);\n      }\n\n      this.setState({\n        grid: newGrid\n      });\n    };\n\n    this.handleMouseUp = (row, col) => {\n      this.setState({\n        mouseIsPressed: false,\n        startIsMoving: false,\n        finishIsMoving: false\n      });\n    };\n\n    this.handleNav = () => {\n      this.setState({\n        showNav: !this.state.showNav\n      });\n    };\n\n    this.handleItemDescChange = (e, item) => {\n      var newItem = `${item}`;\n      itemData.map(_item => {\n        if (item === _item.id) {\n          this.setState({\n            currItemDesc: newItem,\n            currItemObj: _item\n          });\n        }\n      });\n    };\n\n    this.handleTabs = (e, val) => {\n      this.setState({\n        currAlgTab: val,\n        currAlgObj: algData[val]\n      });\n    };\n\n    this.handleMazeTabs = (e, val) => {\n      this.setState({\n        currMazeTab: val\n      });\n      console.log(val);\n    };\n\n    this.handleSpeedTabs = (e, val) => {\n      console.log(e, val);\n      this.setState({\n        animationSpeed: val\n      });\n    };\n\n    this.generateMaze = e => {\n      var currAlg = this.state.currMazeTab;\n\n      if (currAlg === 0) {\n        this.generateRecursiveDivisionMaze();\n      } else if (currAlg === 1) {\n        this.generateVerticalMaze();\n      } else if (currAlg === 2) {\n        this.generateHorizontalMaze();\n      } else if (currAlg === 3) {\n        this.generateRandomMaze();\n      }\n    };\n\n    this.resetGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      document.getElementsByClassName('progress')[0].style.width = '0%';\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = this.state.grid;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n      const stopNode = this.state.isThereStop ? this.state.prevStop : false;\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if (row === startNode[0] && col === startNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if (row === finishNode[0] && col === finishNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else if (stopNode !== false && row === stopNode[0] && col === stopNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-stop\";\n          } else if (grid[row][col].isWall) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-wall\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n\n      const newGrid = getGridWithoutPath(this.state.grid, true);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false\n      });\n    };\n\n    this.clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      document.getElementsByClassName('progress')[0].style.width = '0%';\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = this.state.grid;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if (row === startNode[0] && col === startNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if (row === finishNode[0] && col === finishNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n        prevStop: [],\n        isThereStop: false\n      });\n    };\n\n    this.playAnimation = e => {\n      var currAlg = this.state.currAlgObj.id;\n      this.setState({\n        prevStart: this.state.startNode,\n        prevFinish: this.state.finishNode,\n        prevAlg: this.state.AlgObj\n      });\n\n      if (currAlg === 0) {\n        this.visualizeDijkstra();\n      } else if (currAlg === 1) {\n        this.visualizeaStar();\n      } else if (currAlg === 4) {\n        this.visualizbfs();\n      } else if (currAlg === 2) {\n        this.visualizegbfs();\n      } else if (currAlg === 5) {\n        this.visualizedfs();\n      } else if (currAlg === 3) {\n        this.visualizeBidirectionalGreedySearch();\n      }\n\n      return;\n    };\n\n    this.handleProgressSetup = (isThereStop, isSecondAnimation, animationSpeed, animationDuration) => {\n      const progressBar = document.getElementById(`progressBar`);\n      progressBar.style.animation = 'progressFiller .1';\n\n      if (!isThereStop) {\n        progressBar.className = 'progress progress-no-stop';\n        progressBar.style.animation = `progressAnim ${animationDuration * animationSpeed / 1000}s`;\n        return 100 / animationDuration;\n      } else if (!isSecondAnimation && isThereStop) {\n        progressBar.className = 'progress progress-no-stop';\n        progressBar.style.animation = `progressAnim ${animationDuration * animationSpeed / 1000}s`;\n        return 50 / animationDuration;\n      } else if (isSecondAnimation && isThereStop) {\n        progressBar.className = 'progress progress-stop';\n        progressBar.style.animation = `progressAnimStop ${animationDuration * animationSpeed / 1000}s`;\n        return 50 / animationDuration;\n      }\n    };\n\n    this.animateDijkstra = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall) {\n      let animationSpeed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n      let isThereStop = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n      _this.setState({\n        visualizingAlgorithm: true\n      }); //progressTracker\n\n\n      const progress = $(\"#progressBar\");\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizeDijkstra = () => {\n      this.dijkstraWorker = new WebWorker(_dijkstraWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        var nodesInShortestPathOrder = [];\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.dijkstraWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                console.log(messageTwo);\n                this.animateDijkstra(message.data[0], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animateDijkstra, message.data[0].length * this.state.animationSpeed, message.data[1], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, false]);\n        this.dijkstraWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            this.animateDijkstra(message.data, messageTwo.data, message.data.length, this.state.animationSpeed, this.state.isThereStop);\n          });\n        });\n      }\n    };\n\n    this.animateaStar = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed, isThereStop) {\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n      _this.setState({\n        visualizingAlgorithm: true\n      }); //progress tracker\n\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizeaStar = () => {\n      this.aStarWorker = new WebWorker(aStarWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        this.aStarWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.aStarWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                console.log(messageTwo);\n                this.animateaStar(message.data[0], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animateaStar, message.data[0].length * this.state.animationSpeed, message.data[1], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.aStarWorker.postMessage([grid, startNode, finishNode, false]);\n        this.aStarWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            this.animateaStar(message.data, messageTwo.data, message.data.length, this.state.animationSpeed, this.state.isThereStop, false);\n          });\n        });\n      }\n    };\n\n    this.animatebfs = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed, isThereStop) {\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n      _this.setState({\n        visualizingAlgorithm: true\n      }); //progress tracker\n\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationSpeed * animationStall, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizbfs = () => {\n      this.breadthFirstSearchWorker = new WebWorker(breadthFirstSearchWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        var nodesInShortestPathOrder = [];\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.breadthFirstSearchWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                console.log(messageTwo);\n                this.animatebfs(message.data[0], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animatebfs, message.data[0].length * this.state.animationSpeed, message.data[1], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n        this.breadthFirstSearchWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            console.log(messageTwo.data);\n            this.animatebfs(message.data, messageTwo.data, message.data.length, this.state.animationSpeed, false);\n          });\n        });\n      }\n    };\n\n    this.animategbfs = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed, isThereStop) {\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n      _this.setState({\n        visualizingAlgorithm: true\n      }); //progress tracker\n\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizegbfs = () => {\n      this.greedyBestFirstSearchWorker = new WebWorker(greedyBestFirstSearchWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.greedyBestFirstSearchWorker.addEventListener('message', message => {\n          console.log(message.data);\n\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                this.animategbfs(message.data[0], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animategbfs, message.data[0].length * this.state.animationSpeed, message.data[1], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n      } else if (!this.state.isThereStop) {\n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n        this.greedyBestFirstSearchWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            this.animategbfs(message.data, messageTwo.data, message.data.length, this.state.animationSpeed, this.state.isThereStop, false);\n          });\n        });\n      }\n    };\n\n    this.animatedfs = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed, isThereStop) {\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n      _this.setState({\n        visualizingAlgorithm: true\n      }); //progress tracker\n\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizedfs = () => {\n      this.depthFirstSearchWorker = new WebWorker(depthFirstSearchWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        var nodesInShortestPathOrder = [];\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.depthFirstSearchWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              console.log([...message.data[0], ...message.data[1]]);\n\n              const animateTime = (message, messageTwo) => {\n                this.animatedfs(message.data[0], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animatedfs, message.data[0].length * this.state.animationSpeed, message.data[1], messageTwo.data, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              console.log(messageTwo.data);\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n        this.depthFirstSearchWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          console.log(message.data);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            this.animatedfs(message.data, messageTwo.data, message.data.length, this.state.animationSpeed, this.state.isThereStop, false);\n          });\n        });\n      }\n    };\n\n    this.animateBidirectionalAlgorithm = (visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath, animationSpeed) => {\n      this.setState({\n        visualizingAlgorithm: true\n      }); //progress tracker\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n      var integralVal = this.handleProgressSetup(this.state.isThereStop, false, animationSpeed, visitedNodesInOrderStart.length);\n      let len = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n\n        if (i === visitedNodesInOrderStart.length) {\n          setTimeout(() => {\n            let visitedNodesInOrder = getVisitedNodesInOrder(visitedNodesInOrderStart, visitedNodesInOrderFinish);\n\n            if (isShortedPath) {\n              this.animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\n            } else {\n              this.setState({\n                visualizingAlgorithm: false\n              });\n            }\n          }, i * animationSpeed);\n          return;\n        }\n\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined) {\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = \"node node-visited\";\n          }\n\n          if (nodeB !== undefined) {\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = \"node node-visited\";\n          }\n\n          progress.width(`+=${integralVal * 2}%`);\n        }, i * animationSpeed);\n      }\n    };\n\n    this.visualizeBidirectionalGreedySearch = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      this.setState({\n        visualizingAlgorithm: true\n      });\n      setTimeout(() => {\n        const {\n          grid\n        } = this.state;\n        const _startNode = this.state.startNode;\n        const _finishNode = this.state.finishNode;\n        const startNode = grid[_startNode[0]][_startNode[1]];\n        const finishNode = grid[_finishNode[0]][_finishNode[1]];\n        const visitedNodesInOrder = bidirectionalGreedySearch(grid, startNode, finishNode);\n        const visitedNodesInOrderStart = visitedNodesInOrder[0];\n        const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n        const isShortedPath = visitedNodesInOrder[2];\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1], visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]);\n        this.setState({\n          maxProgressVal: visitedNodesInOrderStart.length + visitedNodesInOrderFinish.length - 2\n        });\n        this.animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath, this.state.animationSpeed);\n      }, this.state.animationSpeed);\n    };\n\n    this.animateShortestPath = nodesInShortestPathOrder => {\n      const startNode = this.state.grid[this.state.startNode[0]][this.state.startNode[1]];\n      const finishNode = this.state.grid[this.state.finishNode[0]][this.state.finishNode[1]];\n      const stopNode = this.state.isThereStop ? this.state.grid[this.state.prevStop[0]][this.state.prevStop[1]] : [];\n\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          var currObj = document.getElementById(`node-${node.row}-${node.col}`);\n\n          if (node.row === startNode.row && node.col === startNode.col) {\n            currObj.className = 'node node-shortest-path node-shortest-path-start';\n          } else if (node.row === finishNode.row && node.col === finishNode.col) {\n            currObj.className = 'node node-shortest-path node-shortest-path-finish';\n          } else if (this.state.isThereStop && node.row === stopNode.row && node.col === stopNode.col) {\n            currObj.className = 'node node-shortest-path node-shortest-path-stop';\n          } else if (document.getElementById(`node-${node.row}-${node.col}`).className.includes('node-shortest-path')) {\n            $(`#node-${node.row}-${node.col}`).replaceWith($(`#node-${node.row}-${node.col}`).clone(true));\n          } else {\n            currObj.className = 'node node-shortest-path';\n          }\n\n          if (i === nodesInShortestPathOrder.length - 1) this.setState({\n            visualizingAlgorithm: false\n          });\n        }, 50 * i);\n      }\n    };\n\n    this.animateMaze = walls => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({\n              grid: newGrid,\n              generatingMaze: false\n            });\n          }, i * 10);\n          return;\n        }\n\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true;\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      showNav: false,\n      currItemDesc: 'Start',\n      currItemObj: itemData[0],\n      currAlgObj: algData[0],\n      currAlgTab: 0,\n      lcurrMazeAlg: 'Recursive Division Maze',\n      currMazeTab: 0,\n      startNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), 1],\n      finishNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), Math.floor(Math.floor(window.innerWidth / 25)) - 2],\n      startIsMoving: false,\n      finishIsMoving: false,\n      isThereStop: false,\n      stopIsMoving: false,\n      prevStop: [],\n      generatingMaze: false,\n      visualizingAlgorithm: false,\n      animationSpeed: 10,\n      currProgressVal: 0,\n      maxProgressVal: 100\n    };\n  }\n\n  //reminder!!\n  // row is width\n  // col is height\n  componentDidMount() {\n    window.addEventListener('resize', e => {\n      this.setState({\n        startNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), 1],\n        finishNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), Math.floor(Math.floor(window.innerWidth / 25)) - 2],\n        isThereStop: false,\n        stopIsMoving: false,\n        prevStop: [],\n        prevStart: [],\n        prevFinish: [],\n        prevAlg: {}\n      });\n      this.clearGrid();\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = renderGrid(this.state, rowNum, colNum, false);\n      this.setState({\n        grid\n      });\n    });\n    const grid = renderGrid(this.state, Math.floor(window.innerHeight / 25), Math.floor(window.innerWidth / 25));\n    this.setState({\n      grid: grid\n    });\n  }\n\n  generateRandomMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false;\n      const walls = this.state.isThereStop ? randomMaze(grid, startNode, finishNode, true, stopNode) : randomMaze(grid, startNode, finishNode, false);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateRecursiveDivisionMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false;\n      const walls = this.state.isThereStop ? recursiveDivisionMaze(grid, startNode, finishNode, true, stopNode) : recursiveDivisionMaze(grid, startNode, finishNode, false, stopNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateVerticalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false;\n      const walls = this.state.isThereStop ? verticalMaze(grid, startNode, finishNode, true, stopNode) : verticalMaze(grid, startNode, finishNode, false);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateHorizontalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false;\n      const walls = this.state.isThereStop ? horizontalMaze(grid, startNode, finishNode, true, stopNode) : horizontalMaze(grid, startNode, finishNode, false);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(NavTop, {\n        state: this.state,\n        currProgressVal: currProgressVal,\n        maxProgressVal: maxProgressVal,\n        handleSpeedTabs: this.handleSpeedTabs,\n        clearGrid: this.clearGrid,\n        resetGrid: this.resetGrid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-container\",\n        children: /*#__PURE__*/_jsxDEV(Visualizer, {\n          state: this.state,\n          handleMouseDown: this.handleMouseDown,\n          handleMouseEnter: this.handleMouseEnter,\n          handleMouseUp: this.handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1156,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        state: this.state,\n        toggleNav: this.handleNav,\n        replayAnimation: this.replayAnimation,\n        resetGrid: this.resetGrid,\n        handleMazeTabs: this.handleMazeTabs,\n        genMaze: this.generateMaze,\n        play: this.playAnimation,\n        handleTabs: this.handleTabs,\n        handleItemChange: this.handleItemDescChange,\n        visualizeDijkstra: this.visualizeDijkstra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1163,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1152,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n  const grid = [];\n  var rowNum = _rowNum;\n  var colNum = _colNum;\n\n  for (let row = 0; row < rowNum; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < colNum; col++) {\n      var node = createNode(col, row, state);\n      node.className = 'node';\n      currentRow.push(node);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row, state) => {\n  const startNode = state.startNode;\n  const finishNode = state.finishNode;\n  const stopNode = state.prevStop;\n  return {\n    col,\n    row,\n    isStart: row === startNode[0] && col === startNode[1],\n    isFinish: row === finishNode[0] && col === finishNode[1],\n    isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : false,\n    isWall: false,\n    previousNode: null,\n    previousNodeSecond: null,\n    isVisited: false,\n    isVisitedSecond: false,\n    distance: Infinity,\n    distanceSecond: Infinity\n  };\n};\n\nconst getNewGridWithStart = (grid, row, col, prevStart) => {\n  const newGrid = grid.slice();\n  const newStart = newGrid[row][col];\n  const oldStart = newGrid[prevStart[0]][prevStart[1]];\n  const oldNode = { ...oldStart,\n    isStart: !oldStart.isStart\n  };\n  const newNode = { ...newStart,\n    isStart: !newStart.isStart,\n    isWall: false\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStart[0]][prevStart[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinish = (grid, row, col, prevFinish) => {\n  const newGrid = grid.slice();\n  if (newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n  const newFinish = newGrid[row][col];\n  const oldFinish = newGrid[prevFinish[0]][prevFinish[1]];\n  const oldNode = { ...oldFinish,\n    isFinish: !oldFinish.isFinish\n  };\n  const newNode = { ...newFinish,\n    isFinish: !newFinish.isFinish,\n    isWall: false\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevFinish[0]][prevFinish[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n  const newGrid = grid.slice();\n  const newStop = newGrid[row][col];\n\n  if (prevStop.length === 0) {\n    const newNode = { ...newStop,\n      isStop: !newStop.isStop,\n      isWall: false\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  const oldStop = newGrid[prevStop[0]][prevStop[1]];\n  const oldNode = { ...oldStop,\n    isStop: !oldStop.isStop\n  };\n  const newNode = { ...newStop,\n    isStop: !newStop.isStop,\n    isWall: false\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStop[0]][prevStop[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = { ...node,\n      isWall: true\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n\n  return newGrid;\n};\n\nconst getVisitedNodesInOrder = (visitedNodesInOrderStart, visitedNodesInOrderFinish) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n\n  return visitedNodesInOrder;\n};\n\nconst getGridWithoutPath = function (grid) {\n  let minorReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let newGrid = grid.slice();\n\n  for (let row of grid) {\n    for (let node of row) {\n      var wall = false;\n      var stop = false;\n\n      if (minorReset) {\n        if (grid[node.row][node.col].isWall) wall = true;\n        if (grid[node.row][node.col].isStop) stop = true;\n      }\n\n      let newNode = { ...node,\n        distance: Infinity,\n        distanceSecond: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isVisitedSecond: false,\n        isShortest: false,\n        previousNode: null,\n        isWall: wall,\n        isWeight: false,\n        isStop: stop\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","useState","useEffect","$","Visualizer","getNodesInShortestPathOrder","aStar","breadthFirstSearch","greedyBFS","depthFirstSearch","randomMaze","verticalMaze","horizontalMaze","recursiveDivisionMaze","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","Navbar","NavTop","itemData","algData","pathGrabWorker","_dijkstraWorker","aStarWorker","greedyBestFirstSearchWorker","breadthFirstSearchWorker","depthFirstSearchWorker","WebWorker","Message","maxProgressVal","currProgressVal","MainContainer","constructor","props","handleWindowResize","console","log","handleMouseDown","row","col","newGrid","state","grid","startNode","finishNode","stopNode","isThereStop","prevStop","isStart","setState","startIsMoving","isFinish","finishIsMoving","currItemDesc","stopIsMoving","getNewGridWithWallToggled","mouseIsPressed","handleMouseEnter","getNewGridWithStart","getNewGridWithFinish","getNewGridWithStopToggled","handleMouseUp","handleNav","showNav","handleItemDescChange","e","item","newItem","map","_item","id","currItemObj","handleTabs","val","currAlgTab","currAlgObj","handleMazeTabs","currMazeTab","handleSpeedTabs","animationSpeed","generateMaze","currAlg","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","generateRandomMaze","resetGrid","visualizingAlgorithm","generatingMaze","document","getElementsByClassName","style","width","rowNum","Math","floor","window","innerHeight","colNum","innerWidth","length","getElementById","className","isWall","getGridWithoutPath","clearGrid","playAnimation","prevStart","prevFinish","prevAlg","AlgObj","visualizeDijkstra","visualizeaStar","visualizbfs","visualizegbfs","visualizedfs","visualizeBidirectionalGreedySearch","handleProgressSetup","isSecondAnimation","animationDuration","progressBar","animation","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","animationStall","animationColor","progress","integralVal","i","setTimeout","animateShortestPath","node","dijkstraWorker","START_NODE","FINISH_NODE","STOP_NODE","postMessage","addEventListener","message","animateTiming","data","messageTwo","animateTime","animateaStar","replaceWith","clone","animatebfs","animategbfs","animatedfs","animateBidirectionalAlgorithm","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","len","max","nodeA","nodeB","getVisitedNodesInOrder","undefined","_startNode","_finishNode","currObj","includes","animateMaze","walls","getNewGridWithMaze","wall","lcurrMazeAlg","componentDidMount","renderGrid","render","replayAnimation","_rowNum","_colNum","currentRow","createNode","push","isStop","previousNode","previousNodeSecond","isVisited","isVisitedSecond","distance","Infinity","distanceSecond","slice","newStart","oldStart","oldNode","newNode","newFinish","oldFinish","newStop","oldStop","n","minorReset","stop","totalDistance","isShortest","isWeight"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"sourcesContent":["import React, {Component, useState, useEffect} from 'react';\nimport $ from 'jquery' \nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport { getNodesInShortestPathOrder } from '../workers/dijkstraWorker';\nimport {aStar} from '../algorithims/aStar'\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport NavTop from './navComponents/topNav';\nimport itemData from '../data/item-data'\nimport algData from '../data/alg-data'\nimport pathGrabWorker from '../workers/pathGrabWorker';\nimport _dijkstraWorker from \"../workers/dijkstraWorker\";\nimport aStarWorker from '../workers/aStarWorker'\nimport greedyBestFirstSearchWorker from '../workers/greedyBestFirstSearchWorker';\nimport breadthFirstSearchWorker from '../workers/breadthFirstSearchWorker';\nimport depthFirstSearchWorker from '../workers/depthFirstSearchWorker';\nimport WebWorker from \"../workers/workerSetup\";\nimport './mainContainer.css'\nimport { Message } from '@material-ui/icons';\n\nvar maxProgressVal = 100\nvar currProgressVal = 0\n\nexport default class MainContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start',\n            currItemObj: itemData[0],\n            currAlgObj: algData[0],\n            currAlgTab: 0,\n            lcurrMazeAlg: 'Recursive Division Maze',\n            currMazeTab: 0,\n            startNode: [Math.floor(Math.floor(window.innerHeight/25)/2), 1],\n            finishNode: [Math.floor(Math.floor(window.innerHeight/25)/2), Math.floor(Math.floor(window.innerWidth/25))-2],\n            startIsMoving: false,\n            finishIsMoving: false,\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            generatingMaze: false,\n            visualizingAlgorithm: false,\n            animationSpeed: 10,\n            currProgressVal: 0,\n            maxProgressVal: 100,\n        }\n    }\n\n    handleWindowResize = () => {\n      console.log('changing')\n    }\n    //reminder!!\n    // row is width\n    // col is height\n    componentDidMount() {\n        window.addEventListener('resize', (e) => {\n          this.setState({\n            startNode: [Math.floor(Math.floor(window.innerHeight/25)/2), 1],\n            finishNode: [Math.floor(Math.floor(window.innerHeight/25)/2), Math.floor(Math.floor(window.innerWidth/25))-2],\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            prevStart: [],\n            prevFinish: [],\n            prevAlg: {}\n          })\n\n          this.clearGrid();\n          var rowNum = Math.floor((window.innerHeight / 25))\n          var colNum = Math.floor((window.innerWidth / 25))\n          const grid = renderGrid(this.state, rowNum, colNum, false)\n          this.setState({grid});\n      })\n\n      const grid = renderGrid(this.state, Math.floor((window.innerHeight / 25)), Math.floor((window.innerWidth / 25)))\n      this.setState({grid: grid});\n    }\n\n    handleMouseDown = (row, col) => {\n        var newGrid = this.state.grid\n        const startNode = newGrid[this.state.startNode[0]][this.state.startNode[1]]\n        const finishNode = newGrid[this.state.finishNode[0]][this.state.finishNode[1]]\n        const stopNode = this.state.isThereStop ? newGrid[this.state.prevStop[0]][this.state.prevStop[1]] : false\n\n        if(this.state.grid[row][col].isStart){\n          this.setState({startIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.grid[row][col].isFinish){\n          this.setState({finishIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.currItemDesc === 'Stop'){\n          this.setState({stopIsMoving: true, isThereStop: true})\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled( newGrid, row, col)  \n          console.log(newGrid[row])   \n        }\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter = (row, col) => {\n        if (!this.state.mouseIsPressed) return;\n        var newGrid = this.state.grid;\n        if(this.state.startIsMoving){\n          newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode)\n          this.setState({startNode: [row, col]})\n        } else if(this.state.finishIsMoving){\n          newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode)\n          this.setState({finishNode: [row, col]})\n        } else if(this.state.currItemDesc === 'Stop'){\n          newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n          this.setState({prevStop: [row, col]})\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled( newGrid, row, col);\n          console.log(newGrid[row, col])   \n        }\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp = (row, col) => {\n        this.setState({mouseIsPressed: false, startIsMoving: false, finishIsMoving: false});\n    }\n\n    handleNav = () => {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    //navBar functions\n    handleItemDescChange = (e, item) => {\n      var newItem = `${item}`\n      itemData.map((_item) => {\n        if(item === _item.id){this.setState({currItemDesc: newItem, currItemObj: _item})}\n      })\n    }\n\n    handleTabs = (e, val) => {\n      this.setState({currAlgTab: val, currAlgObj: algData[val]})\n    }\n\n    handleMazeTabs = (e, val) => {\n      this.setState({currMazeTab: val})\n      console.log(val)\n    }\n\n    handleSpeedTabs = (e, val) => {\n      console.log(e, val)\n      this.setState({animationSpeed: val})\n    }\n\n    generateMaze = (e) => {\n      var currAlg = this.state.currMazeTab\n \n      if(currAlg===0){\n        this.generateRecursiveDivisionMaze()\n      } else if(currAlg===1){\n        this.generateVerticalMaze()\n      } else if(currAlg===2){\n        this.generateHorizontalMaze()\n      } else if(currAlg===3){\n        this.generateRandomMaze()\n      }\n    }\n\n    resetGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      document.getElementsByClassName('progress')[0].style.width = '0%'\n      var rowNum = Math.floor((window.innerHeight / 25))\n      var colNum = Math.floor((window.innerWidth / 25))\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const stopNode = this.state.isThereStop ? this.state.prevStop : false\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else if(stopNode !== false && (row === stopNode[0] && col === stopNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-stop\";\n          } else if(grid[row][col].isWall)\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-wall\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid, true);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n      });\n    }\n\n    clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      document.getElementsByClassName('progress')[0].style.width = '0%'\n      \n      var rowNum = Math.floor((window.innerHeight / 25))\n      var colNum = Math.floor((window.innerWidth / 25))\n\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n        prevStop: [],\n        isThereStop: false  \n      });\n    }\n\n    // play animation\n\n    playAnimation = (e) => {\n      var currAlg = this.state.currAlgObj.id\n      this.setState({\n        prevStart: this.state.startNode,\n        prevFinish: this.state.finishNode,\n        prevAlg: this.state.AlgObj\n      })\n      if(currAlg===0){\n        this.visualizeDijkstra()\n      } else if(currAlg===1){\n        this.visualizeaStar()\n      } else if(currAlg===4){\n        this.visualizbfs()\n      } else if(currAlg===2){\n        this.visualizegbfs()\n      } else if(currAlg===5){\n        this.visualizedfs()\n      } else if(currAlg===3){\n        this.visualizeBidirectionalGreedySearch()\n      }\n      return\n    }\n\n    handleProgressSetup = (\n      isThereStop, \n      isSecondAnimation, \n      animationSpeed,\n      animationDuration,\n    ) => {\n\n      const progressBar = document.getElementById(`progressBar`)\n      progressBar.style.animation = 'progressFiller .1'\n      \n      if(!isThereStop) {\n\n        progressBar.className = 'progress progress-no-stop'\n        progressBar.style.animation=`progressAnim ${(animationDuration*animationSpeed/1000)}s`\n        return 100/animationDuration\n\n      } else if(!isSecondAnimation && isThereStop) {\n\n        progressBar.className = 'progress progress-no-stop'\n        progressBar.style.animation=`progressAnim ${(animationDuration*animationSpeed/1000)}s`\n        return 50/animationDuration\n\n      } else if(isSecondAnimation && isThereStop) {\n\n        progressBar.className = 'progress progress-stop'\n        progressBar.style.animation=`progressAnimStop ${(animationDuration*animationSpeed/1000)}s`\n        return 50/animationDuration\n\n      }\n    }\n\n    //animte dijkstra\n\n    animateDijkstra = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder, \n      animationStall,\n      animationSpeed=10, \n      isThereStop=false,\n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n      \n      this.setState({visualizingAlgorithm: true})\n\n      //progressTracker\n      const progress = $(\"#progressBar\")\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n        }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n            progress.width(`+=${integralVal}%`)\n          }, animationSpeed * i);\n      }\n    }\n    \n    visualizeDijkstra = () => {\n\n      this.dijkstraWorker = new WebWorker(_dijkstraWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.dijkstraWorker.addEventListener('message', (message) => {\n            \n            const animateTiming = async (message) => {\n\n                this.pathGrabWorker.postMessage([message.data, true])\n\n                this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                    const animateTime = (message, messageTwo) => {\n\n                      console.log(messageTwo)\n\n                      this.animateDijkstra(\n                        message.data[0], \n                        messageTwo.data, \n                        (message.data[0].length+message.data[1].length), \n                        this.state.animationSpeed, \n                        this.state.isThereStop,\n                        false\n                      )\n\n                      setTimeout(this.animateDijkstra, \n                        message.data[0].length * this.state.animationSpeed, \n                        message.data[1], \n                        messageTwo.data,\n                        (message.data[0].length+message.data[1].length), \n                        this.state.animationSpeed, \n                        this.state.isThereStop, \n                        true\n                      )\n                    }\n\n                    animateTime(message, messageTwo)\n                })\n            }\n            animateTiming(message)\n        })\n\n        return\n\n      } else if(!this.state.isThereStop){\n\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.dijkstraWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              this.animateDijkstra(\n                message.data, \n                messageTwo.data, \n                message.data.length, \n                this.state.animationSpeed, \n                this.state.isThereStop\n              )\n\n            })\n        })\n      }\n    }\n\n    //animate aStar\n\n    animateaStar = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder,\n      animationStall, \n      animationSpeed,\n      isThereStop, \n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      this.setState({visualizingAlgorithm: true})\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n        }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n            progress.width(`+=${integralVal}%`)\n          }, animationSpeed * i);\n      }\n    }\n\n    visualizeaStar = () => {\n\n      this.aStarWorker = new WebWorker(aStarWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      if(this.state.isThereStop) {\n        this.aStarWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.aStarWorker.addEventListener('message', (message) => {\n            \n          const animateTiming = async (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, true])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                const animateTime = (message, messageTwo) => {\n\n                  console.log(messageTwo)\n\n                  this.animateaStar(\n                    message.data[0], \n                    messageTwo.data, \n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop,\n                    false\n                  )\n\n                  setTimeout(this.animateaStar, \n                    message.data[0].length * this.state.animationSpeed, \n                    message.data[1], \n                    messageTwo.data,\n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop, \n                    true\n                  )\n                }\n\n                animateTime(message, messageTwo)\n            })\n        }\n        animateTiming(message)\n    })\n          return\n          \n      } else if(!this.state.isThereStop){\n\n          this.aStarWorker.postMessage([grid, startNode, finishNode, false])\n\n          this.aStarWorker.addEventListener('message', (message) => {\n\n              this.pathGrabWorker.postMessage([message.data, false])\n\n              this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                this.animateaStar(\n                  message.data, \n                  messageTwo.data, \n                  message.data.length,\n                  this.state.animationSpeed,\n                  this.state.isThereStop,\n                  false\n                )\n\n              })\n          })\n      }\n    }\n\n    //animate breadth first search \n\n    animatebfs = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder, \n      animationStall,\n      animationSpeed, \n      isThereStop,\n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      this.setState({visualizingAlgorithm: true})\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n          \n          setTimeout(this.animateShortestPath, animationSpeed*animationStall, nodesInShortestPathOrder)\n\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n          progress.width(`+=${integralVal}%`)\n        }, animationSpeed * i);\n      }\n    }\n\n    visualizbfs = () => {\n      \n      this.breadthFirstSearchWorker = new WebWorker(breadthFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.breadthFirstSearchWorker.addEventListener('message', (message) => {\n                       \n            const animateTiming = async (message) => {\n\n              this.pathGrabWorker.postMessage([message.data, true])\n\n              this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                  const animateTime = (message, messageTwo) => {\n\n                    console.log(messageTwo)\n\n                    this.animatebfs(\n                      message.data[0], \n                      messageTwo.data, \n                      (message.data[0].length+message.data[1].length), \n                      this.state.animationSpeed, \n                      this.state.isThereStop,\n                      false\n                    )\n\n                    setTimeout(this.animatebfs, \n                      message.data[0].length * this.state.animationSpeed, \n                      message.data[1], \n                      messageTwo.data,\n                      (message.data[0].length+message.data[1].length), \n                      this.state.animationSpeed, \n                      this.state.isThereStop,\n                      true\n                    )\n                  }\n\n                  animateTime(message, messageTwo)\n              })\n            }\n          animateTiming(message)\n      })\n      return\n\n      } else if(!this.state.isThereStop){\n\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.breadthFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                console.log(messageTwo.data)\n\n                this.animatebfs(message.data, messageTwo.data, message.data.length, this.state.animationSpeed, false)\n            })\n        })\n      }\n    }\n\n    // greedy best first search\n\n    animategbfs = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder,\n      animationStall, \n      animationSpeed, \n      isThereStop,\n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      this.setState({visualizingAlgorithm: true})\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n          }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n            progress.width(`+=${integralVal}%`)\n          }, animationSpeed * i);\n      }\n    }\n\n    visualizegbfs = () => {\n      \n      this.greedyBestFirstSearchWorker = new WebWorker(greedyBestFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      if(this.state.isThereStop) {\n\n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.greedyBestFirstSearchWorker.addEventListener('message', (message) => {\n\n          console.log(message.data)\n            \n          const animateTiming = async (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, true])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                const animateTime = (message, messageTwo) => {\n\n                  this.animategbfs(\n                    message.data[0], \n                    messageTwo.data, \n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop,\n                    false\n                  )\n\n                  setTimeout(this.animategbfs, \n                    message.data[0].length * this.state.animationSpeed, \n                    message.data[1], \n                    messageTwo.data,\n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop, \n                    true\n                  )\n                }\n\n                animateTime(message, messageTwo)\n            })\n          }\n          animateTiming(message)\n      })\n      \n      } else if(!this.state.isThereStop) {\n        \n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.greedyBestFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              this.animategbfs(\n                message.data, \n                messageTwo.data,\n                message.data.length, \n                this.state.animationSpeed, \n                this.state.isThereStop,\n                false\n              )\n\n            })\n        })\n      }\n    }\n\n    // depth first search\n\n    animatedfs = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder, \n      animationStall, \n      animationSpeed, \n      isThereStop,\n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      this.setState({visualizingAlgorithm: true})\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n          }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n            progress.width(`+=${integralVal}%`)\n          }, animationSpeed * i);\n      }\n    }\n\n    visualizedfs = () => {\n            \n      this.depthFirstSearchWorker = new WebWorker(depthFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      \n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.depthFirstSearchWorker.addEventListener('message', (message) => {\n            \n          const animateTiming = async (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, true])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              console.log([...message.data[0], ...message.data[1]])\n\n                const animateTime = (message, messageTwo) => {\n\n                  this.animatedfs(\n                    message.data[0], \n                    messageTwo.data, \n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop,\n                    false\n                  )\n\n                  setTimeout(\n                    this.animatedfs, \n                    message.data[0].length * this.state.animationSpeed, \n                    message.data[1], \n                    messageTwo.data,\n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop, \n                    true\n                  )\n                }\n\n                console.log(messageTwo.data)\n\n                animateTime(message, messageTwo)\n            })\n          }\n          animateTiming(message)\n      })\n        return\n\n      } else if(!this.state.isThereStop){\n\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.depthFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            console.log(message.data)\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              this.animatedfs(\n                message.data, \n                messageTwo.data,\n                message.data.length, \n                this.state.animationSpeed,\n                this.state.isThereStop, \n                false\n              )\n\n            })\n        })\n      }\n    }\n\n    // bidirectional greedy first search\n\n    animateBidirectionalAlgorithm = (\n      visitedNodesInOrderStart,\n      visitedNodesInOrderFinish,\n      nodesInShortestPathOrder,\n      isShortedPath,\n      animationSpeed\n    ) => {\n\n      this.setState({visualizingAlgorithm: true})\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        this.state.isThereStop,\n        false,\n        animationSpeed,\n        visitedNodesInOrderStart.length\n      )\n\n      let len = Math.max(\n        visitedNodesInOrderStart.length,\n        visitedNodesInOrderFinish.length\n      );\n\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n        if (i === visitedNodesInOrderStart.length) {\n          setTimeout(() => {\n            let visitedNodesInOrder = getVisitedNodesInOrder(\n              visitedNodesInOrderStart,\n              visitedNodesInOrderFinish\n            );\n            if (isShortedPath) {\n              this.animateShortestPath(\n                nodesInShortestPathOrder,\n                visitedNodesInOrder\n              );\n            } else {\n              this.setState({ visualizingAlgorithm: false });\n            }\n          }, i * animationSpeed);\n          return;\n        }\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined) {\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = \"node node-visited\";\n          }\n          if (nodeB !== undefined) {\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = \"node node-visited\";\n          }\n          progress.width(`+=${integralVal*2}%`)\n\n        }, i * animationSpeed);\n      }\n    }\n\n    visualizeBidirectionalGreedySearch = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      \n      this.setState({ visualizingAlgorithm: true });\n\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]];\n        const finishNode = grid[_finishNode[0]][_finishNode[1]];\n        const visitedNodesInOrder = bidirectionalGreedySearch(\n          grid,\n          startNode,\n          finishNode\n        );\n        const visitedNodesInOrderStart = visitedNodesInOrder[0];\n        const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n        const isShortedPath = visitedNodesInOrder[2];\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\n          visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n          visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n        );\n        this.setState({maxProgressVal: (visitedNodesInOrderStart.length + visitedNodesInOrderFinish.length)-2})\n        this.animateBidirectionalAlgorithm(\n          visitedNodesInOrderStart,\n          visitedNodesInOrderFinish,\n          nodesInShortestPathOrder,\n          isShortedPath,\n          this.state.animationSpeed\n        );\n      }, this.state.animationSpeed);\n    }\n\n    //finish animations\n\n    animateShortestPath = (nodesInShortestPathOrder) => {\n\n      const startNode = this.state.grid[this.state.startNode[0]][this.state.startNode[1]]\n      const finishNode = this.state.grid[this.state.finishNode[0]][this.state.finishNode[1]]\n      const stopNode = this.state.isThereStop ? this.state.grid[this.state.prevStop[0]][this.state.prevStop[1]] : []\n\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n\n          var currObj = document.getElementById(`node-${node.row}-${node.col}`)\n\n          if(node.row === startNode.row && node.col === startNode.col) {\n            currObj.className = 'node node-shortest-path node-shortest-path-start';\n          } else if(node.row === finishNode.row && node.col === finishNode.col){\n            currObj.className = 'node node-shortest-path node-shortest-path-finish';\n          } else if(this.state.isThereStop && (node.row === stopNode.row && node.col === stopNode.col)) {\n            currObj.className = 'node node-shortest-path node-shortest-path-stop';\n          } else if(document.getElementById(`node-${node.row}-${node.col}`).className.includes('node-shortest-path')) {\n            $(`#node-${node.row}-${node.col}`).replaceWith($(`#node-${node.row}-${node.col}`).clone(true))\n          } else {\n            currObj.className = 'node node-shortest-path';\n          }\n\n          if(i === nodesInShortestPathOrder.length-1) this.setState({visualizingAlgorithm: false})\n\n        }, 50 * i);\n      }\n    }\n\n    //generate mazes\n\n    animateMaze = (walls) => {\n\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({ grid: newGrid, generatingMaze: false });\n          }, i * 10);\n          return;\n        }\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    generateRandomMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false\n        const walls = this.state.isThereStop ? randomMaze(grid, startNode, finishNode, true, stopNode) : randomMaze(grid, startNode, finishNode, false);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateRecursiveDivisionMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false\n        const walls = this.state.isThereStop ? recursiveDivisionMaze(grid, startNode, finishNode, true, stopNode) : recursiveDivisionMaze(grid, startNode, finishNode, false, stopNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateVerticalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false\n        const walls = this.state.isThereStop ? verticalMaze(grid, startNode, finishNode, true, stopNode) : verticalMaze(grid, startNode, finishNode, false);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateHorizontalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false\n        const walls = this.state.isThereStop ? horizontalMaze(grid, startNode, finishNode, true, stopNode) : horizontalMaze(grid, startNode, finishNode, false);\n        this.animateMaze(walls);\n      }, 10);\n    }\n\n    render(){ \n        return(\n            <div className=\"main-container\">\n                {/* <button onClick={this.handleNav}>show nav</button> */}\n                <NavTop state={this.state} currProgressVal={currProgressVal} maxProgressVal={maxProgressVal} handleSpeedTabs={this.handleSpeedTabs} clearGrid={this.clearGrid} resetGrid={this.resetGrid}/>\n                <div className=\"visualizer-container\">\n                    <Visualizer \n                        state={this.state} \n                        handleMouseDown={this.handleMouseDown} \n                        handleMouseEnter={this.handleMouseEnter} \n                        handleMouseUp={this.handleMouseUp}\n                    />\n                </div>\n                <Navbar state={this.state} toggleNav={this.handleNav} replayAnimation={this.replayAnimation} resetGrid={this.resetGrid} handleMazeTabs={this.handleMazeTabs} genMaze={this.generateMaze} play={this.playAnimation} handleTabs={this.handleTabs} handleItemChange={this.handleItemDescChange} visualizeDijkstra={this.visualizeDijkstra}/>\n            </div>\n        )\n    }\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n    const grid = [];\n    var rowNum = _rowNum\n    var colNum = _colNum\n    for (let row = 0; row < rowNum; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colNum; col++) {\n        var node = createNode(col, row, state)\n        node.className = 'node'\n        currentRow.push(node);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\n\n\nconst createNode = (col, row, state) => {\n    const startNode = state.startNode\n    const finishNode = state.finishNode\n    const stopNode = state.prevStop\n    return {\n      col,\n      row,\n      isStart: row === startNode[0] && col === startNode[1],\n      isFinish: row === finishNode[0] && col === finishNode[1],\n      isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : false,\n      isWall: false,\n      previousNode: null,\n      previousNodeSecond: null,\n      isVisited: false,\n      isVisitedSecond: false,\n      distance: Infinity,\n      distanceSecond: Infinity\n    };\n  };\n\n  const getNewGridWithStart = (grid, row, col, prevStart) => {\n    const newGrid = grid.slice();\n    const newStart = newGrid[row][col];\n    const oldStart = newGrid[prevStart[0]][prevStart[1]]\n    const oldNode = {\n      ...oldStart,\n      isStart: !oldStart.isStart\n    }\n    const newNode = {\n      ...newStart,\n      isStart: !newStart.isStart,\n      isWall: false\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStart[0]][prevStart[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithFinish = (grid, row, col, prevFinish) => {\n    const newGrid = grid.slice();\n    if(newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n    const newFinish = newGrid[row][col];\n    const oldFinish = newGrid[prevFinish[0]][prevFinish[1]]\n    const oldNode = {\n      ...oldFinish,\n      isFinish: !oldFinish.isFinish\n    }\n    const newNode = {\n      ...newFinish,\n      isFinish: !newFinish.isFinish,\n      isWall: false\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevFinish[0]][prevFinish[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n    const newGrid = grid.slice();\n    const newStop = newGrid[row][col];\n    if(prevStop.length === 0){\n      const newNode = {\n        ...newStop,\n        isStop: !newStop.isStop,\n        isWall: false\n      };\n      newGrid[row][col] = newNode;\n      return newGrid;\n    }\n    const oldStop = newGrid[prevStop[0]][prevStop[1]]\n    const oldNode = {\n      ...oldStop,\n      isStop: !oldStop.isStop\n    }\n    const newNode = {\n      ...newStop,\n      isStop: !newStop.isStop,\n      isWall: false\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStop[0]][prevStop[1]] = oldNode\n    return newGrid;\n  };\n\n  const getNewGridWithMaze = (grid, walls) => {\n    let newGrid = grid.slice();\n    for (let wall of walls) {\n      let node = grid[wall[0]][wall[1]];\n      let newNode = {\n        ...node,\n        isWall: true,\n      };\n      newGrid[wall[0]][wall[1]] = newNode;\n    }\n    return newGrid;\n  };\n\n  const getVisitedNodesInOrder = (\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish\n  ) => {\n    let visitedNodesInOrder = [];\n    let n = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 0; i < n; i++) {\n      if (visitedNodesInOrderStart[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n      }\n      if (visitedNodesInOrderFinish[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n      }\n    }\n    return visitedNodesInOrder;\n  };\n\n  const getGridWithoutPath = (grid, minorReset=false) => {\n    let newGrid = grid.slice();\n    for (let row of grid) {\n      for (let node of row) {\n        var wall = false\n        var stop = false\n        if(minorReset){\n          if(grid[node.row][node.col].isWall) wall = true\n\n          if(grid[node.row][node.col].isStop) stop = true\n        }\n        let newNode = {\n          ...node,\n          distance: Infinity,\n          distanceSecond: Infinity,\n          totalDistance: Infinity,\n          isVisited: false,\n          isVisitedSecond: false,\n          isShortest: false,\n          previousNode: null,\n          isWall: wall,\n          isWeight: false,\n          isStop: stop\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    return newGrid;\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module"}