{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\";\nimport React, { Component, useState, useEffect } from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { getNodesInShortestPathOrder } from '../workers/dijkstraWorker';\nimport { aStar } from '../algorithims/aStar';\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport NavTop from './navComponents/topNav';\nimport itemData from '../data/item-data';\nimport algData from '../data/alg-data';\nimport pathGrabWorker from '../workers/pathGrabWorker';\nimport _dijkstraWorker from \"../workers/dijkstraWorker\";\nimport aStarWorker from '../workers/aStarWorker';\nimport greedyBestFirstSearchWorker from '../workers/greedyBestFirstSearchWorker';\nimport breadthFirstSearchWorker from '../workers/breadthFirstSearchWorker';\nimport depthFirstSearchWorker from '../workers/depthFirstSearchWorker';\nimport WebWorker from \"../workers/workerSetup\";\nimport './mainContainer.css';\nimport { Message } from '@material-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MainContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleWindowResize = () => {\n      console.log('changing');\n    };\n\n    this.handleMouseDown = (row, col) => {\n      var newGrid = this.state.grid;\n\n      if (this.state.grid[row][col].isStart) {\n        this.setState({\n          startIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.grid[row][col].isFinish) {\n        this.setState({\n          finishIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Weight') {\n        newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        this.setState({\n          stopIsMoving: true,\n          isThereStop: true\n        });\n      }\n\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n\n    this.handleMouseEnter = (row, col) => {\n      if (!this.state.mouseIsPressed) return;\n      var newGrid = this.state.grid;\n\n      if (this.state.startIsMoving) {\n        newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode);\n        this.setState({\n          startNode: [row, col]\n        });\n      } else if (this.state.finishIsMoving) {\n        newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode);\n        this.setState({\n          finishNode: [row, col]\n        });\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n      } else if (this.state.currItemDesc === 'Weight') {\n        newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n        this.setState({\n          prevStop: [row, col]\n        });\n      }\n\n      this.setState({\n        grid: newGrid\n      });\n    };\n\n    this.handleMouseUp = (row, col) => {\n      this.setState({\n        mouseIsPressed: false,\n        startIsMoving: false,\n        finishIsMoving: false\n      });\n    };\n\n    this.handleNav = () => {\n      this.setState({\n        showNav: !this.state.showNav\n      });\n    };\n\n    this.handleItemDescChange = (e, item) => {\n      var newItem = `${item}`;\n      itemData.map(_item => {\n        if (item === _item.id) {\n          this.setState({\n            currItemDesc: newItem,\n            currItemObj: _item\n          });\n        }\n      });\n    };\n\n    this.handleTabs = (e, val) => {\n      this.setState({\n        currAlgTab: val,\n        currAlgObj: algData[val]\n      });\n    };\n\n    this.handleMazeTabs = (e, val) => {\n      this.setState({\n        currMazeTab: val\n      });\n      console.log(val);\n    };\n\n    this.handleSpeedTabs = (e, val) => {\n      console.log(e, val);\n    };\n\n    this.generateMaze = e => {\n      var currAlg = this.state.currMazeTab;\n\n      if (currAlg === 0) {\n        this.generateRecursiveDivisionMaze();\n      } else if (currAlg === 1) {\n        this.generateVerticalMaze();\n      } else if (currAlg === 2) {\n        this.generateHorizontalMaze();\n      } else if (currAlg === 3) {\n        this.generateRandomMaze();\n      }\n    };\n\n    this.resetGrid = e => {\n      this.clearGrid();\n    };\n\n    this.clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = this.state.grid;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if (row === startNode[0] && col === startNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if (row === finishNode[0] && col === finishNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false\n      });\n    };\n\n    this.replayAnimation = e => {\n      console.log(this.state);\n\n      if (this.state.prevAlg === {} || this.state.prevStart === [] || this.state.prevFinish === []) {\n        console.log('not met');\n        return;\n      }\n\n      this.clearGrid();\n      var prevAnimation = this.state;\n      this.setState({\n        startNode: prevAnimation.prevStart,\n        finishNode: prevAnimation.prevFinish,\n        currAlgObj: prevAnimation.currAlgObj\n      });\n      const grid = renderGrid(this.state, Math.floor(window.innerHeight / 25), Math.floor(window.innerWidth / 25));\n      this.setState({\n        grid\n      });\n      this.playAnimation();\n    };\n\n    this.playAnimation = e => {\n      var currAlg = this.state.currAlgObj.id;\n      this.setState({\n        prevStart: this.state.startNode,\n        prevFinish: this.state.finishNode,\n        prevAlg: this.state.AlgObj\n      });\n\n      if (currAlg === 0) {\n        this.visualizeDijkstra();\n      } else if (currAlg === 1) {\n        this.visualizeaStar();\n      } else if (currAlg === 4) {\n        this.visualizbfs();\n      } else if (currAlg === 2) {\n        this.visualizegbfs();\n      } else if (currAlg === 5) {\n        this.visualizegdfs();\n      } else if (currAlg === 3) {\n        this.visualizeBidirectionalGreedySearch();\n      }\n\n      return;\n    };\n\n    this.visualizeDijkstra = () => {\n      this.dijkstraWorker = new WebWorker(_dijkstraWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const subGridOne = grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        var nodesInShortestPathOrder = [];\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.dijkstraWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                console.log(message.data);\n                this.animateDijkstra(message.data[0], messageTwo);\n                setTimeout(this.animateDijkstra, message.data[0].length * 10, message.data[1], messageTwo, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, false]);\n        this.dijkstraWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data[message.data.length - 1], false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            this.animateDijkstra(message.data, messageTwo.data);\n          });\n        });\n      }\n    };\n\n    this.animateMaze = walls => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({\n              grid: newGrid,\n              generatingMaze: false\n            });\n          }, i * 10);\n          return;\n        }\n\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true;\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      showNav: false,\n      currItemDesc: 'Start',\n      currItemObj: itemData[0],\n      currAlgObj: algData[0],\n      currAlgTab: 0,\n      lcurrMazeAlg: 'Recursive Division Maze',\n      currMazeTab: 0,\n      startNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), 1],\n      finishNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), Math.floor(Math.floor(window.innerWidth / 25)) - 2],\n      startIsMoving: false,\n      finishIsMoving: false,\n      isThereStop: false,\n      stopIsMoving: false,\n      prevStop: [],\n      generatingMaze: false,\n      visualizingAlgorithm: false,\n      animationSpeed: 10,\n      prevStart: [],\n      prevFinish: [],\n      prevAlg: {}\n    };\n  }\n\n  //reminder!!\n  // row is width\n  // col is height\n  componentDidMount() {\n    window.addEventListener('resize', e => {\n      this.setState({\n        startNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), 1],\n        finishNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), Math.floor(Math.floor(window.innerWidth / 25)) - 2],\n        isThereStop: false,\n        stopIsMoving: false,\n        prevStop: [],\n        prevStart: [],\n        prevFinish: [],\n        prevAlg: {}\n      });\n      this.clearGrid();\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = renderGrid(this.state, rowNum, colNum, false);\n      this.setState({\n        grid\n      });\n    });\n    const grid = renderGrid(this.state, Math.floor(window.innerHeight / 25), Math.floor(window.innerWidth / 25));\n    this.setState({\n      grid: grid\n    });\n  }\n\n  //animte dijkstra\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    let isSecondAnimation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var animationColor;\n    isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        //if(isSecondAnimation===false && this.state.isThereStop===true) return\n        setTimeout(this.animateShortestPath, 10 * i, nodesInShortestPathOrder);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n      }, 10 * i);\n    }\n  }\n\n  //animate aStar\n  animateaStar(visitedNodesInOrder, nodesInShortestPathOrder) {\n    let isSecondAnimation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var animationColor;\n    isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(this.animateShortestPath, 10 * i, nodesInShortestPathOrder);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n      }, 10 * i);\n    }\n  }\n\n  visualizeaStar() {\n    this.aStarWorker = new WebWorker(aStarWorker);\n    this.pathGrabWorker = new WebWorker(pathGrabWorker);\n    var grid = this.state.grid;\n    const START_NODE = this.state.startNode;\n    const FINISH_NODE = this.state.finishNode;\n    const STOP_NODE = this.state.prevStop;\n    const startNode = grid[START_NODE[0]][START_NODE[1]];\n    const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n    const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n    if (this.state.isThereStop) {\n      this.aStarWorker.postMessage([grid, startNode, finishNode, stopNode]);\n      this.aStarWorker.addEventListener('message', message => {\n        const animateTiming = async message => {\n          this.pathGrabWorker.postMessage([message.data, true]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            const animateTime = (message, messageTwo) => {\n              console.log(message.data);\n              this.animateaStar(message.data[0], messageTwo, false);\n              setTimeout(this.animateaStar, message.data[0].length * 10, message.data[1], messageTwo, true);\n            };\n\n            animateTime(message, messageTwo);\n          });\n        };\n\n        animateTiming(message);\n      });\n      return;\n    } else if (!this.state.isThereStop) {\n      this.aStarWorker.postMessage([grid, startNode, finishNode, false]);\n      this.aStarWorker.addEventListener('message', message => {\n        this.pathGrabWorker.postMessage([message.data[message.data.length - 1], false]);\n        this.pathGrabWorker.addEventListener('message', messageTwo => {\n          this.animateaStar(message.data, messageTwo.data, false);\n        });\n      });\n    }\n  } //animate breadth first search \n\n\n  animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        // setTimeout(() => {\n        //     this.animateShortestPath(nodesInShortestPathOrder);\n        // }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizbfs() {\n    this.breadthFirstSearchWorker = new WebWorker(breadthFirstSearchWorker);\n    this.pathGrabWorker = new WebWorker(pathGrabWorker);\n    var grid = this.state.grid;\n    const START_NODE = this.state.startNode;\n    const FINISH_NODE = this.state.finishNode;\n    const STOP_NODE = this.state.prevStop;\n    const startNode = grid[START_NODE[0]][START_NODE[1]];\n    const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n    const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []; // const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n    // const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    // this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n\n    if (this.state.isThereStop) {\n      var nodesInShortestPathOrder = [];\n      this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n      this.breadthFirstSearchWorker.addEventListener('message', message => {\n        const animateTiming = async message => {\n          this.pathGrabWorker.postMessage([message.data, true]);\n          this.animatebfs(message.data[0], []);\n          setTimeout(this.animatebfs, message.data[1].length * 10, message.data[1], []);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            const animateTime = (message, messageTwo) => {\n              console.log(message.data); // this.animatebfs(message.data[0], [])\n              // setTimeout(this.animatebfs, message.data[0].length * 10, message.data[1], [])\n            };\n\n            animateTime(message, messageTwo);\n          });\n        };\n\n        animateTiming(message);\n      });\n      return;\n    } else if (!this.state.isThereStop) {\n      this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n      this.breadthFirstSearchWorker.addEventListener('message', message => {\n        this.pathGrabWorker.postMessage([message.data[message.data.length - 1], false]);\n        this.pathGrabWorker.addEventListener('message', messageTwo => {\n          this.animatebfs(message.data, messageTwo.data);\n        });\n      });\n    }\n  } // greedy best first search\n\n\n  animategbfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    let isSecondAnimation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var animationColor;\n    isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        //setTimeout(this.animateShortestPath, 10*i, nodesInShortestPathOrder)\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n      }, 10 * i);\n    }\n  }\n\n  visualizegbfs() {\n    this.greedyBestFirstSearchWorker = new WebWorker(greedyBestFirstSearchWorker);\n    this.pathGrabWorker = new WebWorker(pathGrabWorker);\n    var grid = this.state.grid;\n    const START_NODE = this.state.startNode;\n    const FINISH_NODE = this.state.finishNode;\n    const STOP_NODE = this.state.prevStop;\n    const startNode = grid[START_NODE[0]][START_NODE[1]];\n    const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n    const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n    console.log('here');\n\n    if (this.state.isThereStop) {\n      this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n      this.greedyBestFirstSearchWorker.addEventListener('message', message => {\n        const animateTiming = async message => {\n          this.pathGrabWorker.postMessage([message.data, true]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            const animateTime = (message, messageTwo) => {\n              console.log(message.data);\n              this.animategbfs(message.data[0], messageTwo, false);\n              setTimeout(this.animategbfs, message.data[0].length * 10, message.data[1], messageTwo, true);\n            };\n\n            animateTime(message, messageTwo);\n          });\n        };\n\n        animateTiming(message);\n      });\n    } else if (!this.state.isThereStop) {\n      this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n      this.greedyBestFirstSearchWorker.addEventListener('message', message => {\n        this.pathGrabWorker.postMessage([message.data[message.data.length - 1], false]);\n        this.pathGrabWorker.addEventListener('message', messageTwo => {\n          console.log(message.data, messageTwo.data);\n          this.animategbfs(message.data, messageTwo.data, false);\n        });\n      });\n    }\n  } // depth first search\n\n\n  animatedfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    let isSecondAnimation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var animationColor;\n    isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        //setTimeout(this.animateShortestPath, 10*i, nodesInShortestPathOrder)\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n      }, 10 * i);\n    }\n  }\n\n  visualizegdfs() {\n    this.depthFirstSearchWorker = new WebWorker(depthFirstSearchWorker);\n    this.pathGrabWorker = new WebWorker(pathGrabWorker);\n    var grid = this.state.grid;\n    const START_NODE = this.state.startNode;\n    const FINISH_NODE = this.state.finishNode;\n    const STOP_NODE = this.state.prevStop;\n    const startNode = grid[START_NODE[0]][START_NODE[1]];\n    const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n    const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n    if (this.state.isThereStop) {\n      var nodesInShortestPathOrder = [];\n      this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n      this.depthFirstSearchWorker.addEventListener('message', message => {\n        const animateTiming = async message => {\n          this.pathGrabWorker.postMessage([message.data, true]);\n          this.animatedfs(message.data[0], []);\n          setTimeout(this.animatedfs, message.data[0].length * 10, message.data[1], [], true);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            const animateTime = (message, messageTwo) => {\n              console.log(message.data); // this.animatedfs(message.data[0], [])\n              // setTimeout(this.animatedfs, message.data[1].length * 10, message.data[1], [], true)\n            };\n\n            animateTime(message, messageTwo);\n          });\n        };\n\n        animateTiming(message);\n      });\n      return;\n    } else if (!this.state.isThereStop) {\n      this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n      this.depthFirstSearchWorker.addEventListener('message', message => {\n        this.pathGrabWorker.postMessage([message.data[message.data.length - 1], false]);\n        this.animatedfs(message.data, []);\n        this.pathGrabWorker.addEventListener('message', messageTwo => {//this.animatedfs(message.data, messageTwo.data)\n        });\n      });\n    }\n  } // bidirectional greedy first search\n\n\n  animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath) {\n    let len = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n    for (let i = 1; i <= len; i++) {\n      let nodeA = visitedNodesInOrderStart[i];\n      let nodeB = visitedNodesInOrderFinish[i];\n\n      if (i === visitedNodesInOrderStart.length) {\n        setTimeout(() => {\n          let visitedNodesInOrder = getVisitedNodesInOrder(visitedNodesInOrderStart, visitedNodesInOrderFinish);\n\n          if (isShortedPath) {\n            this.animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\n          } else {\n            this.setState({\n              visualizingAlgorithm: false\n            });\n          }\n        }, i * 10);\n        return;\n      }\n\n      setTimeout(() => {\n        //visited nodes\n        if (nodeA !== undefined) document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = \"node node-visited\";\n        if (nodeB !== undefined) document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = \"node node-visited\";\n      }, i * 10);\n    }\n  }\n\n  visualizeBidirectionalGreedySearch() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      visualizingAlgorithm: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const visitedNodesInOrder = bidirectionalGreedySearch(grid, startNode, finishNode);\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n      const isShortedPath = visitedNodesInOrder[2];\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1], visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]);\n      console.log('here');\n      this.animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath);\n    }, 10);\n  } //finish animations\n\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  } //generate mazes\n\n\n  generateRandomMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = randomMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateRecursiveDivisionMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateVerticalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = verticalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateHorizontalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = horizontalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(NavTop, {\n        state: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 829,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-container\",\n        children: /*#__PURE__*/_jsxDEV(Visualizer, {\n          state: this.state,\n          handleMouseDown: this.handleMouseDown,\n          handleMouseEnter: this.handleMouseEnter,\n          handleMouseUp: this.handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        state: this.state,\n        toggleNav: this.handleNav,\n        replayAnimation: this.replayAnimation,\n        resetGrid: this.resetGrid,\n        handleMazeTabs: this.handleMazeTabs,\n        genMaze: this.generateMaze,\n        play: this.playAnimation,\n        handleTabs: this.handleTabs,\n        handleItemChange: this.handleItemDescChange,\n        visualizeDijkstra: this.visualizeDijkstra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 838,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 827,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n  const grid = [];\n  var rowNum = _rowNum;\n  var colNum = _colNum;\n\n  for (let row = 0; row < rowNum; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < colNum; col++) {\n      var node = createNode(col, row, state);\n      node.className = 'node';\n      currentRow.push(node);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row, state) => {\n  const startNode = state.startNode;\n  const finishNode = state.finishNode;\n  const stopNode = state.prevStop;\n  return {\n    col,\n    row,\n    isStart: row === startNode[0] && col === startNode[1],\n    isFinish: row === finishNode[0] && col === finishNode[1],\n    isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n    isWall: false,\n    previousNode: null,\n    isVisited: false,\n    isVisitedSecond: false,\n    distance: Infinity,\n    distanceSecond: Infinity\n  };\n};\n\nconst getNewGridWithStart = (grid, row, col, prevStart) => {\n  const newGrid = grid.slice();\n  const newStart = newGrid[row][col];\n  const oldStart = newGrid[prevStart[0]][prevStart[1]];\n  const oldNode = { ...oldStart,\n    isStart: !oldStart.isStart\n  };\n  const newNode = { ...newStart,\n    isStart: !newStart.isStart\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStart[0]][prevStart[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinish = (grid, row, col, prevFinish) => {\n  const newGrid = grid.slice();\n  if (newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n  const newFinish = newGrid[row][col];\n  const oldFinish = newGrid[prevFinish[0]][prevFinish[1]];\n  const oldNode = { ...oldFinish,\n    isFinish: !oldFinish.isFinish\n  };\n  const newNode = { ...newFinish,\n    isFinish: !newFinish.isFinish\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevFinish[0]][prevFinish[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithWeightToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWeight: !node.isWeight\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n  const newGrid = grid.slice();\n  const newStop = newGrid[row][col];\n\n  if (prevStop.length === 0) {\n    const newNode = { ...newStop,\n      isStop: !newStop.isStop\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  const oldStop = newGrid[prevStop[0]][prevStop[1]];\n  const oldNode = { ...oldStop,\n    isStop: !oldStop.isStop\n  };\n  const newNode = { ...newStop,\n    isStop: !newStop.isStop\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStop[0]][prevStop[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = { ...node,\n      isWall: true\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n\n  return newGrid;\n};\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst getVisitedNodesInOrder = (visitedNodesInOrderStart, visitedNodesInOrderFinish) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n\n  return visitedNodesInOrder;\n};\n\nconst getGridWithoutPath = grid => {\n  let newGrid = grid.slice();\n\n  for (let row of grid) {\n    for (let node of row) {\n      let newNode = { ...node,\n        distance: Infinity,\n        distanceSecond: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isVisitedSecond: false,\n        isShortest: false,\n        previousNode: null,\n        isWall: false,\n        isWeight: false,\n        isStop: false\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","useState","useEffect","Visualizer","getNodesInShortestPathOrder","aStar","breadthFirstSearch","greedyBFS","depthFirstSearch","randomMaze","verticalMaze","horizontalMaze","recursiveDivisionMaze","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","Navbar","NavTop","itemData","algData","pathGrabWorker","_dijkstraWorker","aStarWorker","greedyBestFirstSearchWorker","breadthFirstSearchWorker","depthFirstSearchWorker","WebWorker","Message","MainContainer","constructor","props","handleWindowResize","console","log","handleMouseDown","row","col","newGrid","state","grid","isStart","setState","startIsMoving","isFinish","finishIsMoving","currItemDesc","getNewGridWithWallToggled","getNewGridWithWeightToggled","stopIsMoving","isThereStop","mouseIsPressed","handleMouseEnter","getNewGridWithStart","startNode","getNewGridWithFinish","finishNode","getNewGridWithStopToggled","prevStop","handleMouseUp","handleNav","showNav","handleItemDescChange","e","item","newItem","map","_item","id","currItemObj","handleTabs","val","currAlgTab","currAlgObj","handleMazeTabs","currMazeTab","handleSpeedTabs","generateMaze","currAlg","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","generateRandomMaze","resetGrid","clearGrid","visualizingAlgorithm","generatingMaze","rowNum","Math","floor","window","innerHeight","colNum","innerWidth","length","document","getElementById","className","getGridWithoutPath","replayAnimation","prevAlg","prevStart","prevFinish","prevAnimation","renderGrid","playAnimation","AlgObj","visualizeDijkstra","visualizeaStar","visualizbfs","visualizegbfs","visualizegdfs","visualizeBidirectionalGreedySearch","dijkstraWorker","subGridOne","START_NODE","FINISH_NODE","STOP_NODE","stopNode","nodesInShortestPathOrder","postMessage","addEventListener","message","animateTiming","data","messageTwo","animateTime","animateDijkstra","setTimeout","animateMaze","walls","i","getNewGridWithMaze","wall","node","isWall","lcurrMazeAlg","animationSpeed","componentDidMount","visitedNodesInOrder","isSecondAnimation","animationColor","animateShortestPath","animateaStar","animatebfs","animategbfs","animatedfs","animateBidirectionalAlgorithm","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","len","max","nodeA","nodeB","getVisitedNodesInOrder","undefined","_startNode","_finishNode","render","_rowNum","_colNum","currentRow","createNode","push","isStop","previousNode","isVisited","isVisitedSecond","distance","Infinity","distanceSecond","slice","newStart","oldStart","oldNode","newNode","newFinish","oldFinish","isWeight","newStop","oldStop","getInitialGrid","numRows","numColumns","n","totalDistance","isShortest"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"sourcesContent":["import React, {Component, useState, useEffect} from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport { getNodesInShortestPathOrder } from '../workers/dijkstraWorker';\nimport {aStar} from '../algorithims/aStar'\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport NavTop from './navComponents/topNav';\nimport itemData from '../data/item-data'\nimport algData from '../data/alg-data'\nimport pathGrabWorker from '../workers/pathGrabWorker';\nimport _dijkstraWorker from \"../workers/dijkstraWorker\";\nimport aStarWorker from '../workers/aStarWorker'\nimport greedyBestFirstSearchWorker from '../workers/greedyBestFirstSearchWorker';\nimport breadthFirstSearchWorker from '../workers/breadthFirstSearchWorker';\nimport depthFirstSearchWorker from '../workers/depthFirstSearchWorker';\nimport WebWorker from \"../workers/workerSetup\";\nimport './mainContainer.css'\nimport { Message } from '@material-ui/icons';\n\nexport default class MainContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start',\n            currItemObj: itemData[0],\n            currAlgObj: algData[0],\n            currAlgTab: 0,\n            lcurrMazeAlg: 'Recursive Division Maze',\n            currMazeTab: 0,\n            startNode: [Math.floor(Math.floor(window.innerHeight/25)/2), 1],\n            finishNode: [Math.floor(Math.floor(window.innerHeight/25)/2), Math.floor(Math.floor(window.innerWidth/25))-2],\n            startIsMoving: false,\n            finishIsMoving: false,\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            generatingMaze: false,\n            visualizingAlgorithm: false,\n            animationSpeed: 10,\n            prevStart: [],\n            prevFinish: [],\n            prevAlg: {}\n        }\n    }\n\n    handleWindowResize = () => {\n      console.log('changing')\n    }\n    //reminder!!\n    // row is width\n    // col is height\n    componentDidMount() {\n        window.addEventListener('resize', (e) => {\n          this.setState({\n            startNode: [Math.floor(Math.floor(window.innerHeight/25)/2), 1],\n            finishNode: [Math.floor(Math.floor(window.innerHeight/25)/2), Math.floor(Math.floor(window.innerWidth/25))-2],\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            prevStart: [],\n            prevFinish: [],\n            prevAlg: {}\n          })\n\n          this.clearGrid();\n          var rowNum = Math.floor((window.innerHeight / 25))\n          var colNum = Math.floor((window.innerWidth / 25))\n          const grid = renderGrid(this.state, rowNum, colNum, false)\n          this.setState({grid});\n      })\n\n      const grid = renderGrid(this.state, Math.floor((window.innerHeight / 25)), Math.floor((window.innerWidth / 25)))\n      this.setState({grid: grid});\n    }\n\n    handleMouseDown = (row, col) => {\n        var newGrid = this.state.grid\n        if(this.state.grid[row][col].isStart){\n          this.setState({startIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.grid[row][col].isFinish){\n          this.setState({finishIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Stop'){\n          this.setState({stopIsMoving: true, isThereStop: true})\n        }\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter = (row, col) => {\n        if (!this.state.mouseIsPressed) return;\n        var newGrid = this.state.grid;\n        if(this.state.startIsMoving){\n          newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode)\n          this.setState({startNode: [row, col]})\n        } \n        else if(this.state.finishIsMoving){\n          newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode)\n          this.setState({finishNode: [row, col]})\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        }  else if(this.state.currItemDesc === 'Stop'){\n          newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n          this.setState({prevStop: [row, col]})\n        }\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp = (row, col) => {\n        this.setState({mouseIsPressed: false, startIsMoving: false, finishIsMoving: false});\n    }\n\n    handleNav = () => {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    //navBar functions\n    handleItemDescChange = (e, item) => {\n      var newItem = `${item}`\n      itemData.map((_item) => {\n        if(item === _item.id){this.setState({currItemDesc: newItem, currItemObj: _item})}\n      })\n    }\n\n    handleTabs = (e, val) => {\n      this.setState({currAlgTab: val, currAlgObj: algData[val]})\n    }\n\n    handleMazeTabs = (e, val) => {\n      this.setState({currMazeTab: val})\n      console.log(val)\n    }\n\n    handleSpeedTabs = (e, val) => {\n      console.log(e, val)\n    }\n\n    generateMaze = (e) => {\n      var currAlg = this.state.currMazeTab\n \n      if(currAlg===0){\n        this.generateRecursiveDivisionMaze()\n      } else if(currAlg===1){\n        this.generateVerticalMaze()\n      } else if(currAlg===2){\n        this.generateHorizontalMaze()\n      } else if(currAlg===3){\n        this.generateRandomMaze()\n      }\n    }\n\n    resetGrid = (e) => {\n      this.clearGrid()\n    }\n\n    clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      var rowNum = Math.floor((window.innerHeight / 25))\n      var colNum = Math.floor((window.innerWidth / 25))\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n      });\n    }\n\n    replayAnimation = (e) => {\n      console.log(this.state)\n      if(this.state.prevAlg === {} || this.state.prevStart === [] || this.state.prevFinish === []){\n        console.log('not met')\n        return\n      }\n      this.clearGrid()\n      var prevAnimation = this.state\n      this.setState({\n        startNode: prevAnimation.prevStart,\n        finishNode: prevAnimation.prevFinish,\n        currAlgObj: prevAnimation.currAlgObj\n      })\n      const grid = renderGrid(this.state, Math.floor((window.innerHeight / 25)), Math.floor((window.innerWidth / 25)))\n      this.setState({grid})\n      this.playAnimation()\n    }\n\n    // play animation\n\n    playAnimation = (e) => {\n      var currAlg = this.state.currAlgObj.id\n      this.setState({\n        prevStart: this.state.startNode,\n        prevFinish: this.state.finishNode,\n        prevAlg: this.state.AlgObj\n      })\n      if(currAlg===0){\n        this.visualizeDijkstra()\n      } else if(currAlg===1){\n        this.visualizeaStar()\n      } else if(currAlg===4){\n        this.visualizbfs()\n      } else if(currAlg===2){\n        this.visualizegbfs()\n      } else if(currAlg===5){\n        this.visualizegdfs()\n      } else if(currAlg===3){\n        this.visualizeBidirectionalGreedySearch()\n      }\n      return\n    }\n\n    //animte dijkstra\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder, isSecondAnimation=false) {\n\n      var animationColor;\n      isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          //if(isSecondAnimation===false && this.state.isThereStop===true) return\n          setTimeout(this.animateShortestPath, 10*i, nodesInShortestPathOrder)\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            `node ${animationColor}`;\n          }, 10 * i);\n      }\n    }\n    \n    visualizeDijkstra = () => {\n\n      this.dijkstraWorker = new WebWorker(_dijkstraWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const subGridOne = grid\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.dijkstraWorker.addEventListener('message', (message) => {\n            \n            const animateTiming = async (message) => {\n                this.pathGrabWorker.postMessage([message.data, true])\n\n                this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                    const animateTime = (message, messageTwo) => {\n                      console.log(message.data)\n\n                      this.animateDijkstra(message.data[0], messageTwo)\n\n                      setTimeout(this.animateDijkstra, message.data[0].length * 10, message.data[1], messageTwo, true)\n                    }\n\n                    animateTime(message, messageTwo)\n                })\n            }\n            animateTiming(message)\n        })\n        return\n\n      } else if(!this.state.isThereStop){\n\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.dijkstraWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data[message.data.length-1], false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              this.animateDijkstra(message.data, messageTwo.data)\n\n            })\n        })\n      }\n    }\n\n    //animate aStar\n\n    animateaStar(visitedNodesInOrder, nodesInShortestPathOrder, isSecondAnimation=false) {\n\n      var animationColor;\n      isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(this.animateShortestPath, 10*i, nodesInShortestPathOrder)\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n          `node ${animationColor}`;\n          }, 10 * i);\n      }\n    }\n\n    visualizeaStar() {\n\n      this.aStarWorker = new WebWorker(aStarWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      if(this.state.isThereStop) {\n        this.aStarWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.aStarWorker.addEventListener('message', (message) => {\n            \n            const animateTiming = async (message) => {\n                this.pathGrabWorker.postMessage([message.data, true])\n\n                this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                    const animateTime = (message, messageTwo) => {\n                      console.log(message.data)\n\n                      this.animateaStar(message.data[0], messageTwo, false)\n\n                      setTimeout(this.animateaStar, message.data[0].length * 10, message.data[1], messageTwo, true)\n\n                    }\n\n                    animateTime(message, messageTwo)\n                })\n              }\n              animateTiming(message)\n            })\n          return\n          \n      } else if(!this.state.isThereStop){\n\n          this.aStarWorker.postMessage([grid, startNode, finishNode, false])\n\n          this.aStarWorker.addEventListener('message', (message) => {\n\n              this.pathGrabWorker.postMessage([message.data[message.data.length-1], false])\n\n              this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                this.animateaStar(message.data, messageTwo.data, false)\n\n              })\n          })\n      }\n    }\n\n    //animate breadth first search \n\n    animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          // setTimeout(() => {\n          //     this.animateShortestPath(nodesInShortestPathOrder);\n          // }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizbfs() {\n      \n      this.breadthFirstSearchWorker = new WebWorker(breadthFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      // const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n      // const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      // this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.breadthFirstSearchWorker.addEventListener('message', (message) => {\n            \n            const animateTiming = async (message) => {\n                this.pathGrabWorker.postMessage([message.data, true])\n\n                this.animatebfs(message.data[0], [])\n\n                setTimeout(this.animatebfs, message.data[1].length * 10, message.data[1], [])\n\n                this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                    const animateTime = (message, messageTwo) => {\n                      console.log(message.data)\n\n                      // this.animatebfs(message.data[0], [])\n\n                      // setTimeout(this.animatebfs, message.data[0].length * 10, message.data[1], [])\n                    }\n\n                    animateTime(message, messageTwo)\n                })\n            }\n            animateTiming(message)\n        })\n        return\n\n      } else if(!this.state.isThereStop){\n\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.breadthFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data[message.data.length-1], false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                this.animatebfs(message.data, messageTwo.data)\n            })\n        })\n      }\n    }\n\n    // greedy best first search\n\n    animategbfs(visitedNodesInOrder, nodesInShortestPathOrder, isSecondAnimation=false) {\n\n      var animationColor;\n      isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          //setTimeout(this.animateShortestPath, 10*i, nodesInShortestPathOrder)\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            `node ${animationColor}`;\n          }, 10 * i);\n      }\n    }\n\n    visualizegbfs() {\n      \n      this.greedyBestFirstSearchWorker = new WebWorker(greedyBestFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      console.log('here')\n      if(this.state.isThereStop) {\n\n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.greedyBestFirstSearchWorker.addEventListener('message', (message) => {\n            \n            const animateTiming = async (message) => {\n                this.pathGrabWorker.postMessage([message.data, true])\n\n                this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                    const animateTime = (message, messageTwo) => {\n                      console.log(message.data)\n\n                      this.animategbfs(message.data[0], messageTwo, false)\n\n                      setTimeout(this.animategbfs, message.data[0].length * 10, message.data[1], messageTwo, true)\n\n                    }\n\n                    animateTime(message, messageTwo)\n                })\n              }\n              animateTiming(message)\n            })\n      \n      } else if(!this.state.isThereStop) {\n        \n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.greedyBestFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data[message.data.length-1], false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n              console.log(message.data, messageTwo.data)\n\n              this.animategbfs(message.data, messageTwo.data, false)\n\n            })\n        })\n      }\n    }\n\n    // depth first search\n\n    animatedfs(visitedNodesInOrder, nodesInShortestPathOrder, isSecondAnimation=false) {\n      var animationColor;\n      isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          //setTimeout(this.animateShortestPath, 10*i, nodesInShortestPathOrder)\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            `node ${animationColor}`;\n          }, 10 * i);\n      }\n    }\n\n    visualizegdfs() {\n            \n      this.depthFirstSearchWorker = new WebWorker(depthFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      \n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.depthFirstSearchWorker.addEventListener('message', (message) => {\n            \n            const animateTiming = async (message) => {\n                this.pathGrabWorker.postMessage([message.data, true])\n\n                this.animatedfs(message.data[0], [])\n\n                setTimeout(this.animatedfs, message.data[0].length * 10, message.data[1], [], true)\n\n                this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                    const animateTime = (message, messageTwo) => {\n                      console.log(message.data)\n\n                      // this.animatedfs(message.data[0], [])\n\n                      // setTimeout(this.animatedfs, message.data[1].length * 10, message.data[1], [], true)\n                    }\n\n                    animateTime(message, messageTwo)\n                })\n            }\n            animateTiming(message)\n        })\n        return\n\n      } else if(!this.state.isThereStop){\n\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.depthFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data[message.data.length-1], false])\n            \n            this.animatedfs(message.data, [])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n             \n              //this.animatedfs(message.data, messageTwo.data)\n\n            })\n        })\n      }\n    }\n\n    // bidirectional greedy first search\n\n    animateBidirectionalAlgorithm(\n      visitedNodesInOrderStart,\n      visitedNodesInOrderFinish,\n      nodesInShortestPathOrder,\n      isShortedPath\n    ) {\n      let len = Math.max(\n        visitedNodesInOrderStart.length,\n        visitedNodesInOrderFinish.length\n      );\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n        if (i === visitedNodesInOrderStart.length) {\n          setTimeout(() => {\n            let visitedNodesInOrder = getVisitedNodesInOrder(\n              visitedNodesInOrderStart,\n              visitedNodesInOrderFinish\n            );\n            if (isShortedPath) {\n              this.animateShortestPath(\n                nodesInShortestPathOrder,\n                visitedNodesInOrder\n              );\n            } else {\n              this.setState({ visualizingAlgorithm: false });\n            }\n          }, i * 10);\n          return;\n        }\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined)\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\n              \"node node-visited\";\n          if (nodeB !== undefined)\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\n              \"node node-visited\";\n        }, i * 10);\n      }\n    }\n\n    visualizeBidirectionalGreedySearch() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ visualizingAlgorithm: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]];\n        const finishNode = grid[_finishNode[0]][_finishNode[1]];\n        const visitedNodesInOrder = bidirectionalGreedySearch(\n          grid,\n          startNode,\n          finishNode\n        );\n        const visitedNodesInOrderStart = visitedNodesInOrder[0];\n        const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n        const isShortedPath = visitedNodesInOrder[2];\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\n          visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n          visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n        );\n        console.log('here')\n        this.animateBidirectionalAlgorithm(\n          visitedNodesInOrderStart,\n          visitedNodesInOrderFinish,\n          nodesInShortestPathOrder,\n          isShortedPath\n        );\n      }, 10);\n    }\n\n    //finish animations\n\n    animateShortestPath(nodesInShortestPathOrder) {\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path';\n        }, 50 * i);\n      }\n    }\n\n    //generate mazes\n\n    animateMaze = (walls) => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({ grid: newGrid, generatingMaze: false });\n          }, i * 10);\n          return;\n        }\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    generateRandomMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = randomMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateRecursiveDivisionMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateVerticalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = verticalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateHorizontalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = horizontalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n\n    render(){ \n        return(\n            <div className=\"main-container\">\n                {/* <button onClick={this.handleNav}>show nav</button> */}\n                <NavTop state={this.state}/>\n                <div className=\"visualizer-container\">\n                    <Visualizer \n                        state={this.state} \n                        handleMouseDown={this.handleMouseDown} \n                        handleMouseEnter={this.handleMouseEnter} \n                        handleMouseUp={this.handleMouseUp}\n                    />\n                </div>\n                <Navbar state={this.state} toggleNav={this.handleNav} replayAnimation={this.replayAnimation} resetGrid={this.resetGrid} handleMazeTabs={this.handleMazeTabs} genMaze={this.generateMaze} play={this.playAnimation} handleTabs={this.handleTabs} handleItemChange={this.handleItemDescChange} visualizeDijkstra={this.visualizeDijkstra}/>\n            </div>\n        )\n    }\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n    const grid = [];\n    var rowNum = _rowNum\n    var colNum = _colNum\n    for (let row = 0; row < rowNum; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colNum; col++) {\n        var node = createNode(col, row, state)\n        node.className = 'node'\n        currentRow.push(node);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\n\n\nconst createNode = (col, row, state) => {\n    const startNode = state.startNode\n    const finishNode = state.finishNode\n    const stopNode = state.prevStop\n    return {\n      col,\n      row,\n      isStart: row === startNode[0] && col === startNode[1],\n      isFinish: row === finishNode[0] && col === finishNode[1],\n      isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n      isWall: false,\n      previousNode: null,\n      isVisited: false,\n      isVisitedSecond: false,\n      distance: Infinity,\n      distanceSecond: Infinity\n    };\n  };\n\n  const getNewGridWithStart = (grid, row, col, prevStart) => {\n    const newGrid = grid.slice();\n    const newStart = newGrid[row][col];\n    const oldStart = newGrid[prevStart[0]][prevStart[1]]\n    const oldNode = {\n      ...oldStart,\n      isStart: !oldStart.isStart\n    }\n    const newNode = {\n      ...newStart,\n      isStart: !newStart.isStart,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStart[0]][prevStart[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithFinish = (grid, row, col, prevFinish) => {\n    const newGrid = grid.slice();\n    if(newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n    const newFinish = newGrid[row][col];\n    const oldFinish = newGrid[prevFinish[0]][prevFinish[1]]\n    const oldNode = {\n      ...oldFinish,\n      isFinish: !oldFinish.isFinish\n    }\n    const newNode = {\n      ...newFinish,\n      isFinish: !newFinish.isFinish,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevFinish[0]][prevFinish[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithWeightToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWeight: !node.isWeight,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n    const newGrid = grid.slice();\n    const newStop = newGrid[row][col];\n    if(prevStop.length === 0){\n      const newNode = {\n        ...newStop,\n        isStop: !newStop.isStop,\n      };\n      newGrid[row][col] = newNode;\n      return newGrid;\n    }\n    const oldStop = newGrid[prevStop[0]][prevStop[1]]\n    const oldNode = {\n      ...oldStop,\n      isStop: !oldStop.isStop\n    }\n    const newNode = {\n      ...newStop,\n      isStop: !newStop.isStop,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStop[0]][prevStop[1]] = oldNode\n    return newGrid;\n  };\n\n  const getNewGridWithMaze = (grid, walls) => {\n    let newGrid = grid.slice();\n    for (let wall of walls) {\n      let node = grid[wall[0]][wall[1]];\n      let newNode = {\n        ...node,\n        isWall: true,\n      };\n      newGrid[wall[0]][wall[1]] = newNode;\n    }\n    return newGrid;\n  };\n\n  const getInitialGrid = (numRows, numColumns) => {\n    let grid = [];\n    for (let row = 0; row < numRows; row++) {\n      let currentRow = [];\n      for (let col = 0; col < numColumns; col++) {\n        currentRow.push(createNode(row, col));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const getVisitedNodesInOrder = (\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish\n  ) => {\n    let visitedNodesInOrder = [];\n    let n = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 0; i < n; i++) {\n      if (visitedNodesInOrderStart[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n      }\n      if (visitedNodesInOrderFinish[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n      }\n    }\n    return visitedNodesInOrder;\n  };\n\n  const getGridWithoutPath = (grid) => {\n    let newGrid = grid.slice();\n    for (let row of grid) {\n      for (let node of row) {\n        let newNode = {\n          ...node,\n          distance: Infinity,\n          distanceSecond: Infinity,\n          totalDistance: Infinity,\n          isVisited: false,\n          isVisitedSecond: false,\n          isShortest: false,\n          previousNode: null,\n          isWall: false,\n          isWeight: false,\n          isStop: false\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    return newGrid;\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module"}