{"ast":null,"code":"// export function dijkstra(grid, startNode, finishNode, stopNode){\n//   const visitedNodesInOrder = [[],[]];\n//   const unvisitedNodes = getAllNodes(grid)\n//   const _stopNode = stopNode[0] ? stopNode[1] : [];\n//   var pos = 0\n//   while(pos < 2){\n//     console.log('here')\n//     var endBool = pos===0 && stopNode[0]\n//     var beginNode = pos===0 ? startNode : _stopNode\n//     if(pos===0){\n//       beginNode = startNode\n//     } else if(pos===1 && stopNode[0]){\n//       beginNode = _stopNode\n//     }\n//     var endNode = endBool ? _stopNode : finishNode\n//     if(pos===0 && stopNode[0]){\n//       endNode = _stopNode\n//     } else if(!stopNode[1]){\n//       endNode = finishNode\n//     }\n//     console.log(unvisitedNodes)\n//     unvisitedNodes.forEach((node) => {\n//       if(node === beginNode){\n//         node.distance = 0\n//       } else {\n//         node.distance = Infinity\n//       }\n//     })\n//     unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n//     console.log(unvisitedNodes, pos)\n//     while(!!unvisitedNodes){\n//         sortNodesByDistance(unvisitedNodes, endNode)\n//         const closestNode = unvisitedNodes.shift();\n//         if(closestNode.isWall) continue;\n//         console.log('hh', pos)\n//         if(closestNode.distance === Infinity) return visitedNodesInOrder;\n//         closestNode.isVisited = true;\n//         if(pos === 0){\n//           visitedNodesInOrder[0].push(closestNode)\n//         } else if(pos === 1){\n//           visitedNodesInOrder[1].push(closestNode)\n//         }\n//         console.log('jj', pos)\n//         if(closestNode === endNode && stopNode[0]){\n//           break;\n//         } else if(closestNode === endNode && !stopNode[0]){\n//           return visitedNodesInOrder\n//         }\n//         updateUnvisitedNeighbors(closestNode, grid);\n//     }\n//     pos++\n//   }\n// }\nvar cout = 0;\nexport function dijkstra(grid, startNode, finishNode, isStop = false) {\n  console.log(isStop);\n  const visitedNodesInOrder = [];\n  var unvisitedNodes = getAllNodes(grid);\n  console.log(grid, unvisitedNodes); //testing to see if visitation is removed\n\n  cout++;\n  console.log(cout);\n  var boolCout = []; //!\n\n  unvisitedNodes.forEach(node => {\n    if (node === startNode) {\n      //node.distance = 0\n      isStop ? node.distanceSecond = 0 : node.distance = 0;\n      console.log(node.distance, node.distanceSecond);\n    } else {\n      isStop ? node.distanceSecond = Infinity : node.distance = Infinity;\n      boolCout.push([[node.isVisited, node.distance], [node.isVisitedSecond, node.distanceSecond]]);\n    }\n  });\n  console.log(boolCout, cout);\n\n  while (!!unvisitedNodes) {\n    sortNodesByDistance(unvisitedNodes, isStop);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue; //function is returning below when taking in the subgrid why?\n\n    console.log('1');\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    isStop ? closestNode.isVisitedSecond = true : closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid, isStop);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes, isStop) {\n  console.log(isStop);\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    if (isStop) {\n      return nodeA.distanceSecond - nodeB.distanceSecond;\n    } else {\n      return nodeA.distance - nodeB.distance;\n    }\n  });\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isStop) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n\n  for (const neighbor of unvisitedNeighbors) {\n    //neighbor.distance = node.distance + 1;\n    isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid, isStop) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode, stop = false) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  if (stop != false) {\n    while (true) {\n      if (currentNode.isStop != null) {\n        break;\n      }\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  } else if (stop == false) {\n    while (currentNode !== null) {\n      // if(currentNode.isStart===true) break;\n      if (currentNode.isStart == true) break; //console.log(currentNode, currentNode !== null)\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  }\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/dijkstra.js"],"names":["cout","dijkstra","grid","startNode","finishNode","isStop","console","log","visitedNodesInOrder","unvisitedNodes","getAllNodes","boolCout","forEach","node","distanceSecond","distance","Infinity","push","isVisited","isVisitedSecond","sortNodesByDistance","closestNode","shift","isWall","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","length","filter","nodes","getNodesInShortestPathOrder","stop","nodesInShortestPathOrder","currentNode","unshift","isStart"],"mappings":"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","sourcesContent":["\n// export function dijkstra(grid, startNode, finishNode, stopNode){\n//   const visitedNodesInOrder = [[],[]];\n//   const unvisitedNodes = getAllNodes(grid)\n//   const _stopNode = stopNode[0] ? stopNode[1] : [];\n//   var pos = 0\n//   while(pos < 2){\n//     console.log('here')\n//     var endBool = pos===0 && stopNode[0]\n//     var beginNode = pos===0 ? startNode : _stopNode\n//     if(pos===0){\n//       beginNode = startNode\n//     } else if(pos===1 && stopNode[0]){\n//       beginNode = _stopNode\n//     }\n//     var endNode = endBool ? _stopNode : finishNode\n//     if(pos===0 && stopNode[0]){\n//       endNode = _stopNode\n//     } else if(!stopNode[1]){\n//       endNode = finishNode\n//     }\n//     console.log(unvisitedNodes)\n//     unvisitedNodes.forEach((node) => {\n//       if(node === beginNode){\n//         node.distance = 0\n//       } else {\n//         node.distance = Infinity\n//       }\n//     })\n//     unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n\n//     console.log(unvisitedNodes, pos)\n//     while(!!unvisitedNodes){\n  \n//         sortNodesByDistance(unvisitedNodes, endNode)\n//         const closestNode = unvisitedNodes.shift();\n\n//         if(closestNode.isWall) continue;\n//         console.log('hh', pos)\n//         if(closestNode.distance === Infinity) return visitedNodesInOrder;\n    \n//         closestNode.isVisited = true;\n//         if(pos === 0){\n//           visitedNodesInOrder[0].push(closestNode)\n//         } else if(pos === 1){\n//           visitedNodesInOrder[1].push(closestNode)\n//         }\n//         console.log('jj', pos)\n//         if(closestNode === endNode && stopNode[0]){\n//           break;\n//         } else if(closestNode === endNode && !stopNode[0]){\n//           return visitedNodesInOrder\n//         }\n//         updateUnvisitedNeighbors(closestNode, grid);\n//     }\n//     pos++\n//   }\n// }\nvar cout = 0\nexport function dijkstra(grid, startNode, finishNode, isStop=false){\n  console.log(isStop)\n  const visitedNodesInOrder = [];\n  var unvisitedNodes = getAllNodes(grid)\n  console.log(grid, unvisitedNodes)\n  //testing to see if visitation is removed\n  cout++\n  console.log(cout)\n  var boolCout = []\n  //!\n  unvisitedNodes.forEach((node) => {\n    if(node === startNode){\n      //node.distance = 0\n      isStop ? node.distanceSecond = 0 : node.distance = 0\n      console.log(node.distance, node.distanceSecond)\n    } else {\n      isStop ? node.distanceSecond = Infinity : node.distance = Infinity\n      boolCout.push([[node.isVisited, node.distance], [node.isVisitedSecond, node.distanceSecond]])\n    }\n  })\n  console.log(boolCout, cout)\n  while(!!unvisitedNodes){\n      sortNodesByDistance(unvisitedNodes, isStop)\n      const closestNode = unvisitedNodes.shift();\n\n      if(closestNode.isWall) continue;\n      //function is returning below when taking in the subgrid why?\n      console.log('1')\n      if(closestNode.distance === Infinity) return visitedNodesInOrder;\n      isStop ? closestNode.isVisitedSecond = true : closestNode.isVisited = true\n      visitedNodesInOrder.push(closestNode);\n\n      if(closestNode === finishNode) return visitedNodesInOrder;\n\n      updateUnvisitedNeighbors(closestNode, grid, isStop);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes, isStop) {\n    console.log(isStop)\n    unvisitedNodes.sort((nodeA, nodeB) => {\n      if(isStop){\n        return nodeA.distanceSecond - nodeB.distanceSecond\n      } else {\n        return nodeA.distance - nodeB.distance\n      }\n    });\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isStop) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n    for (const neighbor of unvisitedNeighbors) {\n      //neighbor.distance = node.distance + 1;\n      isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid, isStop) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode, stop=false) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    if(stop!=false){\n      while (true){\n\n        if(currentNode.isStop!=null){\n          break\n        }\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n      }\n      return nodesInShortestPathOrder;\n    }else if(stop==false){\n      while (currentNode !== null) {\n        // if(currentNode.isStart===true) break;\n        if(currentNode.isStart==true) break;\n        //console.log(currentNode, currentNode !== null)\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n      }\n      return nodesInShortestPathOrder;\n    }\n}"]},"metadata":{},"sourceType":"module"}