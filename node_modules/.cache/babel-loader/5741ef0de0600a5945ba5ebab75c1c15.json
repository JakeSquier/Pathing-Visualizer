{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\";\nimport React, { Component, useState, useEffect } from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithims/dijkstra';\nimport { aStar } from '../algorithims/aStar';\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data';\nimport algData from '../data/alg-data';\nimport './mainContainer.css';\nimport DijkstraWorker from '../workers/dijkstra.worker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MainContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleWindowResize = () => {\n      console.log('changing');\n    };\n\n    this.handleMouseDown = (row, col) => {\n      var newGrid = this.state.grid;\n\n      if (this.state.grid[row][col].isStart) {\n        this.setState({\n          startIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.grid[row][col].isFinish) {\n        this.setState({\n          finishIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Weight') {\n        newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        this.setState({\n          stopIsMoving: true,\n          isThereStop: true\n        });\n      }\n\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n\n    this.handleMouseEnter = (row, col) => {\n      if (!this.state.mouseIsPressed) return;\n      var newGrid = this.state.grid;\n\n      if (this.state.startIsMoving) {\n        newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode);\n        this.setState({\n          startNode: [row, col]\n        });\n      } else if (this.state.finishIsMoving) {\n        newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode);\n        this.setState({\n          finishNode: [row, col]\n        });\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n      } else if (this.state.currItemDesc === 'Weight') {\n        newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n        this.setState({\n          prevStop: [row, col]\n        });\n      }\n\n      this.setState({\n        grid: newGrid\n      });\n    };\n\n    this.handleMouseUp = (row, col) => {\n      this.setState({\n        mouseIsPressed: false,\n        startIsMoving: false,\n        finishIsMoving: false\n      });\n    };\n\n    this.handleNav = () => {\n      this.setState({\n        showNav: !this.state.showNav\n      });\n    };\n\n    this.handleItemDescChange = (e, item) => {\n      var newItem = `${item}`;\n      itemData.map(_item => {\n        if (item === _item.id) {\n          this.setState({\n            currItemDesc: newItem,\n            currItemObj: _item\n          });\n        }\n      });\n    };\n\n    this.handleTabs = (e, val) => {\n      this.setState({\n        currAlgTab: val,\n        currAlgObj: algData[val]\n      });\n    };\n\n    this.handleMazeTabs = (e, val) => {\n      this.setState({\n        currMazeTab: val\n      });\n      console.log(val);\n    };\n\n    this.generateMaze = e => {\n      var currAlg = this.state.currMazeTab;\n\n      if (currAlg === 0) {\n        this.generateRecursiveDivisionMaze();\n      } else if (currAlg === 1) {\n        this.generateVerticalMaze();\n      } else if (currAlg === 2) {\n        this.generateHorizontalMaze();\n      } else if (currAlg === 3) {\n        this.generateRandomMaze();\n      }\n    };\n\n    this.resetGrid = e => {\n      this.clearGrid();\n    };\n\n    this.clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = this.state.grid;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if (row === startNode[0] && col === startNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if (row === finishNode[0] && col === finishNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false\n      });\n    };\n\n    this.replayAnimation = e => {\n      console.log(this.state);\n\n      if (this.state.prevAlg === {} || this.state.prevStart === [] || this.state.prevFinish === []) {\n        console.log('not met');\n        return;\n      }\n\n      this.clearGrid();\n      var prevAnimation = this.state;\n      this.setState({\n        startNode: prevAnimation.prevStart,\n        finishNode: prevAnimation.prevFinish,\n        currAlgObj: prevAnimation.currAlgObj\n      });\n      const grid = renderGrid(this.state, Math.floor(window.innerHeight / 25), Math.floor(window.innerWidth / 25));\n      this.setState({\n        grid\n      });\n      this.playAnimation();\n    };\n\n    this.playAnimation = e => {\n      var currAlg = this.state.currAlgObj.id;\n      this.setState({\n        prevStart: this.state.startNode,\n        prevFinish: this.state.finishNode,\n        prevAlg: this.state.AlgObj\n      });\n\n      if (currAlg === 0) {\n        dijkstraWorker.postMessa;\n        this.visualizeDijkstra();\n      } else if (currAlg === 1) {\n        this.visualizeaStar();\n      } else if (currAlg === 6) {\n        this.visualizbfs();\n      } else if (currAlg === 2) {\n        this.visualizegbfs();\n      } else if (currAlg === 7) {\n        this.visualizegdfs();\n      } else if (currAlg === 3) {\n        this.visualizeBidirectionalGreedySearch();\n      }\n\n      return;\n    };\n\n    this.visualizeDijkstra = () => {\n      var grid = this.state.grid;\n      const subGridOne = grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n      var visitedNodesInOrder = [];\n      var visitedNodesInOrderSecond = [];\n\n      if (this.state.isThereStop) {\n        visitedNodesInOrder = dijkstra(grid, startNode, stopNode);\n        console.log(visitedNodesInOrder);\n        visitedNodesInOrderSecond = dijkstra(grid, stopNode, finishNode, true);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n        setTimeout(() => this.animateDijkstra(visitedNodesInOrderSecond, nodesInShortestPathOrder, true), 10000);\n      } else if (!this.state.isThereStop) {\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode, false);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n      }\n    };\n\n    this.animateMaze = walls => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({\n              grid: newGrid,\n              generatingMaze: false\n            });\n          }, i * 10);\n          return;\n        }\n\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true;\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      showNav: false,\n      currItemDesc: 'Start',\n      currItemObj: itemData[0],\n      currAlgObj: algData[0],\n      currAlgTab: 0,\n      currMazeAlg: 'Recursive Division Maze',\n      currMazeTab: 0,\n      startNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), 1],\n      finishNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), Math.floor(Math.floor(window.innerWidth / 25)) - 2],\n      startIsMoving: false,\n      finishIsMoving: false,\n      isThereStop: false,\n      stopIsMoving: false,\n      prevStop: [],\n      generatingMaze: false,\n      visualizingAlgorithm: false,\n      prevStart: [],\n      prevFinish: [],\n      prevAlg: {}\n    };\n  }\n\n  //reminder!!\n  // row is width\n  // col is height\n  componentDidMount() {\n    window.addEventListener('resize', e => {\n      this.setState({\n        startNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), 1],\n        finishNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), Math.floor(Math.floor(window.innerWidth / 25)) - 2],\n        isThereStop: false,\n        stopIsMoving: false,\n        prevStop: [],\n        prevStart: [],\n        prevFinish: [],\n        prevAlg: {}\n      });\n      let dijkstraWorker;\n\n      async function algsWrapper() {\n        dijkstraWorker = new DijkstraWorker();\n        dijkstraWorker.addEventListener('message', e => {\n          const {\n            hash\n          } = e.data;\n          console.log(hash);\n        });\n        dijkstraWorker.addEventListener('error', e => {\n          console.error(e);\n          console.log('😵 Something went wrong');\n        });\n      }\n\n      algsWrapper();\n      this.clearGrid();\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = renderGrid(this.state, rowNum, colNum, false);\n      this.setState({\n        grid\n      });\n      return () => {\n        if (dijkstraWorker) {\n          dijkstraWorker.terminate();\n        }\n      };\n    });\n    const grid = renderGrid(this.state, Math.floor(window.innerHeight / 25), Math.floor(window.innerWidth / 25));\n    this.setState({\n      grid: grid\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', () => {});\n  }\n\n  //animte dijkstra\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    let isSecondAnimation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var animationColor = '';\n    var stop = this.state.isThereStop;\n\n    if (isSecondAnimation) {\n      animationColor = 'node-target-visited';\n    } else if (!isSecondAnimation) {\n      animationColor = 'node-visited';\n    }\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        if (stop === true && isSecondAnimation === false) return;\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n      }, 10 * i);\n    }\n  }\n\n  //animate aStar\n  animateaStar(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizeaStar() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n  } //animate breadth first search \n\n\n  animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizbfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // greedy best first search\n\n\n  animategbfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizegbfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // depth first search\n\n\n  animatedfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizegdfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // bidirectional greedy first search\n\n\n  animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath) {\n    let len = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n    for (let i = 1; i <= len; i++) {\n      let nodeA = visitedNodesInOrderStart[i];\n      let nodeB = visitedNodesInOrderFinish[i];\n\n      if (i === visitedNodesInOrderStart.length) {\n        setTimeout(() => {\n          let visitedNodesInOrder = getVisitedNodesInOrder(visitedNodesInOrderStart, visitedNodesInOrderFinish);\n\n          if (isShortedPath) {\n            this.animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\n          } else {\n            this.setState({\n              visualizingAlgorithm: false\n            });\n          }\n        }, i * 10);\n        return;\n      }\n\n      setTimeout(() => {\n        //visited nodes\n        if (nodeA !== undefined) document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = \"node node-visited\";\n        if (nodeB !== undefined) document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = \"node node-visited\";\n      }, i * 10);\n    }\n  }\n\n  visualizeBidirectionalGreedySearch() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      visualizingAlgorithm: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const visitedNodesInOrder = bidirectionalGreedySearch(grid, startNode, finishNode);\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n      const isShortedPath = visitedNodesInOrder[2];\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1], visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]);\n      console.log('here');\n      this.animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath);\n    }, 10);\n  } //finish animations\n\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  } //generate mazes\n\n\n  generateRandomMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = randomMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateRecursiveDivisionMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateVerticalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = verticalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateHorizontalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = horizontalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-container\",\n        children: /*#__PURE__*/_jsxDEV(Visualizer, {\n          state: this.state,\n          handleMouseDown: this.handleMouseDown,\n          handleMouseEnter: this.handleMouseEnter,\n          handleMouseUp: this.handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        state: this.state,\n        toggleNav: this.handleNav,\n        replayAnimation: this.replayAnimation,\n        resetGrid: this.resetGrid,\n        handleMazeTabs: this.handleMazeTabs,\n        genMaze: this.generateMaze,\n        play: this.playAnimation,\n        handleTabs: this.handleTabs,\n        handleItemChange: this.handleItemDescChange,\n        visualizeDijkstra: this.visualizeDijkstra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n  const grid = [];\n  var rowNum = _rowNum;\n  var colNum = _colNum;\n\n  for (let row = 0; row < rowNum; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < colNum; col++) {\n      var node = createNode(col, row, state);\n      node.className = 'node';\n      currentRow.push(node);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row, state) => {\n  const startNode = state.startNode;\n  const finishNode = state.finishNode;\n  const stopNode = state.prevStop;\n  return {\n    col,\n    row,\n    isStart: row === startNode[0] && col === startNode[1],\n    isFinish: row === finishNode[0] && col === finishNode[1],\n    isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n    isWall: false,\n    previousNode: null,\n    isVisited: false,\n    isVisitedSecond: false,\n    distance: Infinity,\n    distanceSecond: Infinity\n  };\n};\n\nconst getNewGridWithStart = (grid, row, col, prevStart) => {\n  const newGrid = grid.slice();\n  const newStart = newGrid[row][col];\n  const oldStart = newGrid[prevStart[0]][prevStart[1]];\n  const oldNode = { ...oldStart,\n    isStart: !oldStart.isStart\n  };\n  const newNode = { ...newStart,\n    isStart: !newStart.isStart\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStart[0]][prevStart[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinish = (grid, row, col, prevFinish) => {\n  const newGrid = grid.slice();\n  if (newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n  const newFinish = newGrid[row][col];\n  const oldFinish = newGrid[prevFinish[0]][prevFinish[1]];\n  const oldNode = { ...oldFinish,\n    isFinish: !oldFinish.isFinish\n  };\n  const newNode = { ...newFinish,\n    isFinish: !newFinish.isFinish\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevFinish[0]][prevFinish[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithWeightToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWeight: !node.isWeight\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n  const newGrid = grid.slice();\n  const newStop = newGrid[row][col];\n\n  if (prevStop.length === 0) {\n    const newNode = { ...newStop,\n      isStop: !newStop.isStop\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  const oldStop = newGrid[prevStop[0]][prevStop[1]];\n  const oldNode = { ...oldStop,\n    isStop: !oldStop.isStop\n  };\n  const newNode = { ...newStop,\n    isStop: !newStop.isStop\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStop[0]][prevStop[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = { ...node,\n      isWall: true\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n\n  return newGrid;\n};\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst getVisitedNodesInOrder = (visitedNodesInOrderStart, visitedNodesInOrderFinish) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n\n  return visitedNodesInOrder;\n};\n\nconst getGridWithoutPath = grid => {\n  let newGrid = grid.slice();\n\n  for (let row of grid) {\n    for (let node of row) {\n      let newNode = { ...node,\n        distance: Infinity,\n        distanceSecond: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isVisitedSecond: false,\n        isShortest: false,\n        previousNode: null,\n        isWall: false,\n        isWeight: false,\n        isStop: false\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","useState","useEffect","Visualizer","dijkstra","getNodesInShortestPathOrder","aStar","breadthFirstSearch","greedyBFS","depthFirstSearch","randomMaze","verticalMaze","horizontalMaze","recursiveDivisionMaze","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","Navbar","itemData","algData","DijkstraWorker","MainContainer","constructor","props","handleWindowResize","console","log","handleMouseDown","row","col","newGrid","state","grid","isStart","setState","startIsMoving","isFinish","finishIsMoving","currItemDesc","getNewGridWithWallToggled","getNewGridWithWeightToggled","stopIsMoving","isThereStop","mouseIsPressed","handleMouseEnter","getNewGridWithStart","startNode","getNewGridWithFinish","finishNode","getNewGridWithStopToggled","prevStop","handleMouseUp","handleNav","showNav","handleItemDescChange","e","item","newItem","map","_item","id","currItemObj","handleTabs","val","currAlgTab","currAlgObj","handleMazeTabs","currMazeTab","generateMaze","currAlg","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","generateRandomMaze","resetGrid","clearGrid","visualizingAlgorithm","generatingMaze","rowNum","Math","floor","window","innerHeight","colNum","innerWidth","length","document","getElementById","className","getGridWithoutPath","replayAnimation","prevAlg","prevStart","prevFinish","prevAnimation","renderGrid","playAnimation","AlgObj","dijkstraWorker","postMessa","visualizeDijkstra","visualizeaStar","visualizbfs","visualizegbfs","visualizegdfs","visualizeBidirectionalGreedySearch","subGridOne","START_NODE","FINISH_NODE","STOP_NODE","stopNode","visitedNodesInOrder","visitedNodesInOrderSecond","nodesInShortestPathOrder","animateDijkstra","setTimeout","animateMaze","walls","i","getNewGridWithMaze","wall","node","isWall","currMazeAlg","componentDidMount","addEventListener","algsWrapper","hash","data","error","terminate","componentWillUnmount","removeEventListener","isSecondAnimation","animationColor","stop","animateShortestPath","animateaStar","_startNode","_finishNode","animatebfs","animategbfs","animatedfs","animateBidirectionalAlgorithm","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","len","max","nodeA","nodeB","getVisitedNodesInOrder","undefined","render","_rowNum","_colNum","currentRow","createNode","push","isStop","previousNode","isVisited","isVisitedSecond","distance","Infinity","distanceSecond","slice","newStart","oldStart","oldNode","newNode","newFinish","oldFinish","isWeight","newStop","oldStop","getInitialGrid","numRows","numColumns","n","totalDistance","isShortest"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"sourcesContent":["import React, {Component, useState, useEffect} from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithims/dijkstra';\nimport {aStar} from '../algorithims/aStar'\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data'\nimport algData from '../data/alg-data'\nimport './mainContainer.css'\nimport DijkstraWorker from '../workers/dijkstra.worker';\n\nexport default class MainContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start',\n            currItemObj: itemData[0],\n            currAlgObj: algData[0],\n            currAlgTab: 0,\n            currMazeAlg: 'Recursive Division Maze',\n            currMazeTab: 0,\n            startNode: [Math.floor(Math.floor(window.innerHeight/25)/2), 1],\n            finishNode: [Math.floor(Math.floor(window.innerHeight/25)/2), Math.floor(Math.floor(window.innerWidth/25))-2],\n            startIsMoving: false,\n            finishIsMoving: false,\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            generatingMaze: false,\n            visualizingAlgorithm: false,\n            prevStart: [],\n            prevFinish: [],\n            prevAlg: {}\n        }\n    }\n\n    handleWindowResize = () => {\n      console.log('changing')\n    }\n    //reminder!!\n    // row is width\n    // col is height\n    componentDidMount() {\n        window.addEventListener('resize', (e) => {\n          this.setState({\n            startNode: [Math.floor(Math.floor(window.innerHeight/25)/2), 1],\n            finishNode: [Math.floor(Math.floor(window.innerHeight/25)/2), Math.floor(Math.floor(window.innerWidth/25))-2],\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            prevStart: [],\n            prevFinish: [],\n            prevAlg: {}\n          })\n          let dijkstraWorker\n          async function algsWrapper(){\n            dijkstraWorker = new DijkstraWorker();\n\n            dijkstraWorker.addEventListener('message', (e) => {\n              const { hash } = e.data;\n              console.log(hash);\n            });\n\n            dijkstraWorker.addEventListener('error', e => {\n              console.error(e);\n              console.log('😵 Something went wrong')\n            });\n          }\n          algsWrapper()\n\n          this.clearGrid();\n          var rowNum = Math.floor((window.innerHeight / 25))\n          var colNum = Math.floor((window.innerWidth / 25))\n          const grid = renderGrid(this.state, rowNum, colNum, false)\n          this.setState({grid});\n\n          return () => {\n            if(dijkstraWorker) {\n              dijkstraWorker.terminate()\n            }\n          }\n      })\n      const grid = renderGrid(this.state, Math.floor((window.innerHeight / 25)), Math.floor((window.innerWidth / 25)))\n      this.setState({grid: grid});\n    }\n\n    componentWillUnmount(){\n      window.removeEventListener('resize', ()=>{})\n    }\n\n    handleMouseDown = (row, col) => {\n        var newGrid = this.state.grid\n        if(this.state.grid[row][col].isStart){\n          this.setState({startIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.grid[row][col].isFinish){\n          this.setState({finishIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Stop'){\n          this.setState({stopIsMoving: true, isThereStop: true})\n        }\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter = (row, col) => {\n        if (!this.state.mouseIsPressed) return;\n        var newGrid = this.state.grid;\n        if(this.state.startIsMoving){\n          newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode)\n          this.setState({startNode: [row, col]})\n        } \n        else if(this.state.finishIsMoving){\n          newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode)\n          this.setState({finishNode: [row, col]})\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        }  else if(this.state.currItemDesc === 'Stop'){\n          newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n          this.setState({prevStop: [row, col]})\n        }\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp = (row, col) => {\n        this.setState({mouseIsPressed: false, startIsMoving: false, finishIsMoving: false});\n    }\n\n    handleNav = () => {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    //navBar functions\n    handleItemDescChange = (e, item) => {\n      var newItem = `${item}`\n      itemData.map((_item) => {\n        if(item === _item.id){this.setState({currItemDesc: newItem, currItemObj: _item})}\n      })\n    }\n\n    handleTabs = (e, val) => {\n      this.setState({currAlgTab: val, currAlgObj: algData[val]})\n    }\n\n    handleMazeTabs = (e, val) => {\n      this.setState({currMazeTab: val})\n      console.log(val)\n    }\n\n    generateMaze = (e) => {\n      var currAlg = this.state.currMazeTab\n \n      if(currAlg===0){\n        this.generateRecursiveDivisionMaze()\n      } else if(currAlg===1){\n        this.generateVerticalMaze()\n      } else if(currAlg===2){\n        this.generateHorizontalMaze()\n      } else if(currAlg===3){\n        this.generateRandomMaze()\n      }\n    }\n\n    resetGrid = (e) => {\n      this.clearGrid()\n    }\n\n    clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      var rowNum = Math.floor((window.innerHeight / 25))\n      var colNum = Math.floor((window.innerWidth / 25))\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n      });\n    }\n\n    replayAnimation = (e) => {\n      console.log(this.state)\n      if(this.state.prevAlg === {} || this.state.prevStart === [] || this.state.prevFinish === []){\n        console.log('not met')\n        return\n      }\n      this.clearGrid()\n      var prevAnimation = this.state\n      this.setState({\n        startNode: prevAnimation.prevStart,\n        finishNode: prevAnimation.prevFinish,\n        currAlgObj: prevAnimation.currAlgObj\n      })\n      const grid = renderGrid(this.state, Math.floor((window.innerHeight / 25)), Math.floor((window.innerWidth / 25)))\n      this.setState({grid})\n      this.playAnimation()\n    }\n\n    // play animation\n\n    playAnimation = (e) => {\n      var currAlg = this.state.currAlgObj.id\n      this.setState({\n        prevStart: this.state.startNode,\n        prevFinish: this.state.finishNode,\n        prevAlg: this.state.AlgObj\n      })\n      if(currAlg===0){\n        dijkstraWorker.postMessa\n        this.visualizeDijkstra()\n      } else if(currAlg===1){\n        this.visualizeaStar()\n      } else if(currAlg===6){\n        this.visualizbfs()\n      } else if(currAlg===2){\n        this.visualizegbfs()\n      } else if(currAlg===7){\n        this.visualizegdfs()\n      } else if(currAlg===3){\n        this.visualizeBidirectionalGreedySearch()\n      }\n      return\n    }\n\n    //animte dijkstra\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder, isSecondAnimation=false) {\n      var animationColor = ''\n      var stop = this.state.isThereStop\n      if(isSecondAnimation){\n        animationColor = 'node-target-visited'\n      }else if(!isSecondAnimation){\n        animationColor = 'node-visited'\n      }\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if(stop===true && isSecondAnimation===false) return\n          setTimeout(() => {\n            this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            `node ${animationColor}`;\n          }, 10 * i);\n      }\n    }\n    \n    visualizeDijkstra = () => {\n      var grid = this.state.grid;\n      const subGridOne = grid\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      var visitedNodesInOrder = []\n      var visitedNodesInOrderSecond = []\n      if(this.state.isThereStop){\n\n        visitedNodesInOrder = dijkstra(grid, startNode, stopNode)\n\n        console.log(visitedNodesInOrder)\n        visitedNodesInOrderSecond = dijkstra(grid, stopNode, finishNode, true)\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder)\n        setTimeout(\n          () => this.animateDijkstra(visitedNodesInOrderSecond, nodesInShortestPathOrder, true),\n          10000\n        )\n      } else if(!this.state.isThereStop){\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode, false);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder)\n      }\n    }\n\n    //animate aStar\n\n    animateaStar(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizeaStar() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    //animate breadth first search \n\n    animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizbfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    // greedy best first search\n\n    animategbfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizegbfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    // depth first search\n\n    animatedfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizegdfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    // bidirectional greedy first search\n\n    animateBidirectionalAlgorithm(\n      visitedNodesInOrderStart,\n      visitedNodesInOrderFinish,\n      nodesInShortestPathOrder,\n      isShortedPath\n    ) {\n      let len = Math.max(\n        visitedNodesInOrderStart.length,\n        visitedNodesInOrderFinish.length\n      );\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n        if (i === visitedNodesInOrderStart.length) {\n          setTimeout(() => {\n            let visitedNodesInOrder = getVisitedNodesInOrder(\n              visitedNodesInOrderStart,\n              visitedNodesInOrderFinish\n            );\n            if (isShortedPath) {\n              this.animateShortestPath(\n                nodesInShortestPathOrder,\n                visitedNodesInOrder\n              );\n            } else {\n              this.setState({ visualizingAlgorithm: false });\n            }\n          }, i * 10);\n          return;\n        }\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined)\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\n              \"node node-visited\";\n          if (nodeB !== undefined)\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\n              \"node node-visited\";\n        }, i * 10);\n      }\n    }\n\n    visualizeBidirectionalGreedySearch() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ visualizingAlgorithm: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]];\n        const finishNode = grid[_finishNode[0]][_finishNode[1]];\n        const visitedNodesInOrder = bidirectionalGreedySearch(\n          grid,\n          startNode,\n          finishNode\n        );\n        const visitedNodesInOrderStart = visitedNodesInOrder[0];\n        const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n        const isShortedPath = visitedNodesInOrder[2];\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\n          visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n          visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n        );\n        console.log('here')\n        this.animateBidirectionalAlgorithm(\n          visitedNodesInOrderStart,\n          visitedNodesInOrderFinish,\n          nodesInShortestPathOrder,\n          isShortedPath\n        );\n      }, 10);\n    }\n\n    //finish animations\n\n    animateShortestPath(nodesInShortestPathOrder) {\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path';\n        }, 50 * i);\n      }\n    }\n\n    //generate mazes\n\n    animateMaze = (walls) => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({ grid: newGrid, generatingMaze: false });\n          }, i * 10);\n          return;\n        }\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    generateRandomMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = randomMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateRecursiveDivisionMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateVerticalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = verticalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateHorizontalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = horizontalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n\n    render(){ \n        return(\n            <div className=\"main-container\">\n                {/* <button onClick={this.handleNav}>show nav</button> */}\n                <div className=\"visualizer-container\">\n                    <Visualizer \n                        state={this.state} \n                        handleMouseDown={this.handleMouseDown} \n                        handleMouseEnter={this.handleMouseEnter} \n                        handleMouseUp={this.handleMouseUp}\n                    />\n                </div>\n                <Navbar state={this.state} toggleNav={this.handleNav} replayAnimation={this.replayAnimation} resetGrid={this.resetGrid} handleMazeTabs={this.handleMazeTabs} genMaze={this.generateMaze} play={this.playAnimation} handleTabs={this.handleTabs} handleItemChange={this.handleItemDescChange} visualizeDijkstra={this.visualizeDijkstra}/>\n            </div>\n        )\n    }\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n    const grid = [];\n    var rowNum = _rowNum\n    var colNum = _colNum\n    for (let row = 0; row < rowNum; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colNum; col++) {\n        var node = createNode(col, row, state)\n        node.className = 'node'\n        currentRow.push(node);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\n\n\nconst createNode = (col, row, state) => {\n    const startNode = state.startNode\n    const finishNode = state.finishNode\n    const stopNode = state.prevStop\n    return {\n      col,\n      row,\n      isStart: row === startNode[0] && col === startNode[1],\n      isFinish: row === finishNode[0] && col === finishNode[1],\n      isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n      isWall: false,\n      previousNode: null,\n      isVisited: false,\n      isVisitedSecond: false,\n      distance: Infinity,\n      distanceSecond: Infinity\n    };\n  };\n\n  const getNewGridWithStart = (grid, row, col, prevStart) => {\n    const newGrid = grid.slice();\n    const newStart = newGrid[row][col];\n    const oldStart = newGrid[prevStart[0]][prevStart[1]]\n    const oldNode = {\n      ...oldStart,\n      isStart: !oldStart.isStart\n    }\n    const newNode = {\n      ...newStart,\n      isStart: !newStart.isStart,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStart[0]][prevStart[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithFinish = (grid, row, col, prevFinish) => {\n    const newGrid = grid.slice();\n    if(newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n    const newFinish = newGrid[row][col];\n    const oldFinish = newGrid[prevFinish[0]][prevFinish[1]]\n    const oldNode = {\n      ...oldFinish,\n      isFinish: !oldFinish.isFinish\n    }\n    const newNode = {\n      ...newFinish,\n      isFinish: !newFinish.isFinish,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevFinish[0]][prevFinish[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithWeightToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWeight: !node.isWeight,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n    const newGrid = grid.slice();\n    const newStop = newGrid[row][col];\n    if(prevStop.length === 0){\n      const newNode = {\n        ...newStop,\n        isStop: !newStop.isStop,\n      };\n      newGrid[row][col] = newNode;\n      return newGrid;\n    }\n    const oldStop = newGrid[prevStop[0]][prevStop[1]]\n    const oldNode = {\n      ...oldStop,\n      isStop: !oldStop.isStop\n    }\n    const newNode = {\n      ...newStop,\n      isStop: !newStop.isStop,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStop[0]][prevStop[1]] = oldNode\n    return newGrid;\n  };\n\n  const getNewGridWithMaze = (grid, walls) => {\n    let newGrid = grid.slice();\n    for (let wall of walls) {\n      let node = grid[wall[0]][wall[1]];\n      let newNode = {\n        ...node,\n        isWall: true,\n      };\n      newGrid[wall[0]][wall[1]] = newNode;\n    }\n    return newGrid;\n  };\n\n  const getInitialGrid = (numRows, numColumns) => {\n    let grid = [];\n    for (let row = 0; row < numRows; row++) {\n      let currentRow = [];\n      for (let col = 0; col < numColumns; col++) {\n        currentRow.push(createNode(row, col));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const getVisitedNodesInOrder = (\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish\n  ) => {\n    let visitedNodesInOrder = [];\n    let n = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 0; i < n; i++) {\n      if (visitedNodesInOrderStart[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n      }\n      if (visitedNodesInOrderFinish[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n      }\n    }\n    return visitedNodesInOrder;\n  };\n\n  const getGridWithoutPath = (grid) => {\n    let newGrid = grid.slice();\n    for (let row of grid) {\n      for (let node of row) {\n        let newNode = {\n          ...node,\n          distance: Infinity,\n          distanceSecond: Infinity,\n          totalDistance: Infinity,\n          isVisited: false,\n          isVisitedSecond: false,\n          isShortest: false,\n          previousNode: null,\n          isWall: false,\n          isWeight: false,\n          isStop: false\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    return newGrid;\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module"}