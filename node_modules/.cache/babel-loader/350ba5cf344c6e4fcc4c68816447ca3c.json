{"ast":null,"code":"export function breadthFirstSearch(grid, startNode, endNode) {\n  const visitedNodesInOrder = [];\n  const openList = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  openList.push(startNode);\n  startNode.isVisited = true;\n\n  while (openList.length) {\n    var node = openList.shift();\n    node.isVisited = true;\n    visitedNodesInOrder.push(node);\n\n    if (node === endNode) {\n      return visitedNodesInOrder;\n    }\n\n    var neighbors = getUnvisitedNeighbors(node, grid);\n\n    for (let i = 0; i < neighbors.lenght; i++) {\n      var neighbor = neighbors[i];\n      if (neighbor.isWall) continue;\n    }\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    return nodeA.distance - nodeB.distance;\n  });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/breadthFirstSearch.js"],"names":["breadthFirstSearch","grid","startNode","endNode","visitedNodesInOrder","openList","distance","unvisitedNodes","getAllNodes","push","isVisited","length","node","shift","neighbors","getUnvisitedNeighbors","i","lenght","neighbor","isWall","sortNodesByDistance","finishNode","sort","nodeA","nodeB","updateUnvisitedNeighbors","unvisitedNeighbors","previousNode","col","row","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["export function breadthFirstSearch(grid, startNode, endNode){\n    const visitedNodesInOrder = [];\n    const openList = []\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid)\n    openList.push(startNode)\n    startNode.isVisited = true\n\n    while(openList.length){\n\n      var node = openList.shift();\n      node.isVisited = true;\n      visitedNodesInOrder.push(node)\n\n      if(node === endNode){\n        return visitedNodesInOrder\n      }\n\n      var neighbors = getUnvisitedNeighbors(node, grid)\n      for(let i = 0; i < neighbors.lenght; i++){\n        var neighbor = neighbors[i]\n\n        if(neighbor.isWall) continue;\n\n        \n      }\n    }\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n    unvisitedNodes.sort((nodeA, nodeB) => {\n        return (nodeA.distance) - (nodeB.distance)\n    });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"]},"metadata":{},"sourceType":"module"}