{"ast":null,"code":"export function breadthFirstSearch(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  visitedNodesInOrder.push(startNode);\n  startNode.isVisited = true;\n}\n\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    return nodeA.distance - nodeB.distance;\n  });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/breadthFirstSearch.js"],"names":["breadthFirstSearch","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","push","isVisited","sortNodesByDistance","sort","nodeA","nodeB","updateUnvisitedNeighbors","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","length","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"AAAA,OAAO,SAASA,kBAAT,CAA4BC,IAA5B,EAAkCC,SAAlC,EAA6CC,UAA7C,EAAwD;AAC3D,QAAMC,mBAAmB,GAAG,EAA5B;AACAF,EAAAA,SAAS,CAACG,QAAV,GAAqB,CAArB;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACN,IAAD,CAAlC;AACAG,EAAAA,mBAAmB,CAACI,IAApB,CAAyBN,SAAzB;AACAA,EAAAA,SAAS,CAACO,SAAV,GAAsB,IAAtB;AAEH;;AAED,SAASC,mBAAT,CAA6BJ,cAA7B,EAA6CH,UAA7C,EAAyD;AACrDG,EAAAA,cAAc,CAACK,IAAf,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClC,WAAQD,KAAK,CAACP,QAAP,GAAoBQ,KAAK,CAACR,QAAjC;AACH,GAFD;AAGH;;AAED,SAASS,wBAAT,CAAkCC,IAAlC,EAAwCd,IAAxC,EAA8C;AAC1C,QAAMe,kBAAkB,GAAGC,qBAAqB,CAACF,IAAD,EAAOd,IAAP,CAAhD;;AACA,OAAK,MAAMiB,QAAX,IAAuBF,kBAAvB,EAA2C;AACzCE,IAAAA,QAAQ,CAACb,QAAT,GAAoBU,IAAI,CAACV,QAAL,GAAgB,CAApC;AACAa,IAAAA,QAAQ,CAACC,YAAT,GAAwBJ,IAAxB;AACD;AACJ;;AAED,SAASE,qBAAT,CAA+BF,IAA/B,EAAqCd,IAArC,EAA2C;AACvC,QAAMmB,SAAS,GAAG,EAAlB;AACA,QAAM;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAaP,IAAnB;AACA,MAAIO,GAAG,GAAG,CAAV,EAAaF,SAAS,CAACZ,IAAV,CAAeP,IAAI,CAACqB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AACb,MAAIC,GAAG,GAAGrB,IAAI,CAACsB,MAAL,GAAc,CAAxB,EAA2BH,SAAS,CAACZ,IAAV,CAAeP,IAAI,CAACqB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAaD,SAAS,CAACZ,IAAV,CAAeP,IAAI,CAACqB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAGpB,IAAI,CAAC,CAAD,CAAJ,CAAQsB,MAAR,GAAiB,CAA3B,EAA8BH,SAAS,CAACZ,IAAV,CAAeP,IAAI,CAACqB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOD,SAAS,CAACI,MAAV,CAAiBN,QAAQ,IAAI,CAACA,QAAQ,CAACT,SAAvC,CAAP;AACH;;AAED,SAASF,WAAT,CAAqBN,IAArB,EAA2B;AACvB,QAAMwB,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMH,GAAX,IAAkBrB,IAAlB,EAAwB;AACtB,SAAK,MAAMc,IAAX,IAAmBO,GAAnB,EAAwB;AACtBG,MAAAA,KAAK,CAACjB,IAAN,CAAWO,IAAX;AACD;AACF;;AACD,SAAOU,KAAP;AACH;;AAED,OAAO,SAASC,2BAAT,CAAqCvB,UAArC,EAAiD;AACpD,QAAMwB,wBAAwB,GAAG,EAAjC;AACA,MAAIC,WAAW,GAAGzB,UAAlB;;AACA,SAAOyB,WAAW,KAAK,IAAvB,EAA6B;AAC3BD,IAAAA,wBAAwB,CAACE,OAAzB,CAAiCD,WAAjC;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACT,YAA1B;AACD;;AACD,SAAOQ,wBAAP;AACH","sourcesContent":["export function breadthFirstSearch(grid, startNode, finishNode){\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid)\n    visitedNodesInOrder.push(startNode)\n    startNode.isVisited = true\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n    unvisitedNodes.sort((nodeA, nodeB) => {\n        return (nodeA.distance) - (nodeB.distance)\n    });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"]},"metadata":{},"sourceType":"module"}