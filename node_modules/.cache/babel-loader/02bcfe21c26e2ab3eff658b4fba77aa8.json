{"ast":null,"code":"export function breadthFirstSearch(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid); // while(!!unvisitedNodes){\n  //     sortNodesByDistance(unvisitedNodes, finishNode)\n  //     const closestNode = unvisitedNodes.shift();\n  //     if(closestNode.isWall) continue;\n  //     if(closestNode.distance === Infinity) return visitedNodesInOrder;\n  //     closestNode.isVisited = true;\n  //     visitedNodesInOrder.push(closestNode);\n  //     if(closestNode === finishNode) return visitedNodesInOrder;\n  //     updateUnvisitedNeighbors(closestNode, grid);\n  // }\n\n  const queue = [];\n  const parentForCell = {};\n  queue.push(startNode);\n\n  while (queue.size() > 0) {\n    const {\n      row,\n      col\n    } = queue.shift();\n    const neighbors = [{\n      row: row - 1,\n      col\n    }, {\n      row,\n      col: col + 1\n    }, {\n      row: row + 1,\n      col\n    }, {\n      row,\n      col: col - 1\n    }];\n\n    for (let i = 0; i < neighbors.length; ++i) {\n      const nRow = neighbors[i].row;\n      const nCol = neighbors[i].col;\n      const key = `${nRow}x${nCol}`;\n      if (key in parentForCell) continue;\n    }\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    return nodeA.distance - nodeB.distance;\n  });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/breadthFirstSearch.js"],"names":["breadthFirstSearch","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","queue","parentForCell","push","size","row","col","shift","neighbors","i","length","nRow","nCol","key","sortNodesByDistance","sort","nodeA","nodeB","updateUnvisitedNeighbors","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","filter","isVisited","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["export function breadthFirstSearch(grid, startNode, finishNode){\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid)\n    // while(!!unvisitedNodes){\n    //     sortNodesByDistance(unvisitedNodes, finishNode)\n    //     const closestNode = unvisitedNodes.shift();\n\n    //     if(closestNode.isWall) continue;\n\n    //     if(closestNode.distance === Infinity) return visitedNodesInOrder;\n    //     closestNode.isVisited = true;\n    //     visitedNodesInOrder.push(closestNode);\n\n    //     if(closestNode === finishNode) return visitedNodesInOrder;\n\n    //     updateUnvisitedNeighbors(closestNode, grid);\n    // }\n    const queue = []\n    const parentForCell = {}\n\n    queue.push(startNode)\n\n    while(queue.size() > 0){\n        const {row, col} = queue.shift()\n\n        const neighbors = [\n            {row: row-1, col},\n            {row, col: col+1},\n            {row: row+1, col},\n            {row, col: col-1}\n        ]\n\n        for(let i = 0; i < neighbors.length; ++i){\n            const nRow = neighbors[i].row\n            const nCol = neighbors[i].col\n\n            const key = `${nRow}x${nCol}`\n\n            if(key in parentForCell) continue\n\n        }\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n    unvisitedNodes.sort((nodeA, nodeB) => {\n        return (nodeA.distance) - (nodeB.distance)\n    });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"]},"metadata":{},"sourceType":"module"}