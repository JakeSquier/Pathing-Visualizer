{"ast":null,"code":"// export function dijkstra(grid, startNode, finishNode, stopNode){\n//   const visitedNodesInOrder = [[],[]];\n//   const unvisitedNodes = getAllNodes(grid)\n//   const _stopNode = stopNode[0] ? stopNode[1] : [];\n//   var pos = 0\n//   while(pos < 2){\n//     console.log('here')\n//     var endBool = pos===0 && stopNode[0]\n//     var beginNode = pos===0 ? startNode : _stopNode\n//     if(pos===0){\n//       beginNode = startNode\n//     } else if(pos===1 && stopNode[0]){\n//       beginNode = _stopNode\n//     }\n//     var endNode = endBool ? _stopNode : finishNode\n//     if(pos===0 && stopNode[0]){\n//       endNode = _stopNode\n//     } else if(!stopNode[1]){\n//       endNode = finishNode\n//     }\n//     console.log(unvisitedNodes)\n//     unvisitedNodes.forEach((node) => {\n//       if(node === beginNode){\n//         node.distance = 0\n//       } else {\n//         node.distance = Infinity\n//       }\n//     })\n//     unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n//     console.log(unvisitedNodes, pos)\n//     while(!!unvisitedNodes){\n//         sortNodesByDistance(unvisitedNodes, endNode)\n//         const closestNode = unvisitedNodes.shift();\n//         if(closestNode.isWall) continue;\n//         console.log('hh', pos)\n//         if(closestNode.distance === Infinity) return visitedNodesInOrder;\n//         closestNode.isVisited = true;\n//         if(pos === 0){\n//           visitedNodesInOrder[0].push(closestNode)\n//         } else if(pos === 1){\n//           visitedNodesInOrder[1].push(closestNode)\n//         }\n//         console.log('jj', pos)\n//         if(closestNode === endNode && stopNode[0]){\n//           break;\n//         } else if(closestNode === endNode && !stopNode[0]){\n//           return visitedNodesInOrder\n//         }\n//         updateUnvisitedNeighbors(closestNode, grid);\n//     }\n//     pos++\n//   }\n// }\nvar cout = 0;\nexport function dijkstra(grid, startNode, finishNode, isStop = false) {\n  cout++;\n  const visitedNodesInOrder = [];\n  var unvisitedNodes = getAllNodes(grid); //testing to see if visitation is removed\n\n  unvisitedNodes.forEach(node => {\n    if (node === startNode) {\n      //node.distance = 0\n      isStop ? node.distanceSecond = 0 : node.distance = 0;\n      console.log(node, node.distance, node.distanceSecond, cout, isStop);\n    } else {\n      isStop ? node.distanceSecond = Infinity : node.distance = Infinity;\n    }\n  });\n  console.log(isStop, cout);\n  var cout2 = 0;\n\n  while (!!unvisitedNodes) {\n    //if(cout === 1) break\n    sortNodesByDistance(unvisitedNodes, isStop);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n\n    if (closestNode.distance === Infinity && isStop === false) {\n      console.log(unvisitedNodes, cout);\n      return visitedNodesInOrder;\n    } else if (closestNode.distanceSecond === Infinity && cout === 2) {\n      return visitedNodesInOrder;\n    } else if (cout === 2) {\n      console.log('infinite', isStop, cout, visitedNodesInOrder, unvisitedNodes);\n      return visitedNodesInOrder;\n    }\n\n    isStop ? closestNode.isVisitedSecond = true : closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid, isStop);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes, isStop) {\n  //it is not calculating second distace correctly stays at infinity\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    if (isStop === true) {\n      //console.log(cout, nodeA.distanceSecond - nodeB.distanceSecond)\n      return nodeA.distanceSecond - nodeB.distanceSecond;\n    } else if (isStop === false) {\n      //console.log(cout, nodeA.distance - nodeB.distance)\n      return nodeA.distance - nodeB.distance;\n    }\n  });\n  var distanceCheck = [];\n\n  if (cout == 2) {\n    unvisitedNodes.forEach(node => {\n      if (node.distanceSecond != Infinity) distanceCheck.push(node);\n    });\n    console.log(distanceCheck);\n  } //console.log(unvisitedNodes, cout)\n\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isStop) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n\n  for (const neighbor of unvisitedNeighbors) {\n    //neighbor.distance = node.distance + 1;\n    isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid, isStop) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => {\n    //isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited\n    if (isStop === true) {\n      return !neighbor.isVisitedSecond;\n    } else if (isStop === false) {\n      return !neighbor;\n    }\n  });\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode, stop = false) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  if (stop != false) {\n    while (true) {\n      if (currentNode.isStop != null) {\n        break;\n      }\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  } else if (stop == false) {\n    while (currentNode !== null) {\n      // if(currentNode.isStart===true) break;\n      if (currentNode.isStart == true) break; //console.log(currentNode, currentNode !== null)\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  }\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/dijkstra.js"],"names":["cout","dijkstra","grid","startNode","finishNode","isStop","visitedNodesInOrder","unvisitedNodes","getAllNodes","forEach","node","distanceSecond","distance","console","log","Infinity","cout2","sortNodesByDistance","closestNode","shift","isWall","isVisitedSecond","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","distanceCheck","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","length","filter","nodes","getNodesInShortestPathOrder","stop","nodesInShortestPathOrder","currentNode","unshift","isStart"],"mappings":"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","sourcesContent":["\n// export function dijkstra(grid, startNode, finishNode, stopNode){\n//   const visitedNodesInOrder = [[],[]];\n//   const unvisitedNodes = getAllNodes(grid)\n//   const _stopNode = stopNode[0] ? stopNode[1] : [];\n//   var pos = 0\n//   while(pos < 2){\n//     console.log('here')\n//     var endBool = pos===0 && stopNode[0]\n//     var beginNode = pos===0 ? startNode : _stopNode\n//     if(pos===0){\n//       beginNode = startNode\n//     } else if(pos===1 && stopNode[0]){\n//       beginNode = _stopNode\n//     }\n//     var endNode = endBool ? _stopNode : finishNode\n//     if(pos===0 && stopNode[0]){\n//       endNode = _stopNode\n//     } else if(!stopNode[1]){\n//       endNode = finishNode\n//     }\n//     console.log(unvisitedNodes)\n//     unvisitedNodes.forEach((node) => {\n//       if(node === beginNode){\n//         node.distance = 0\n//       } else {\n//         node.distance = Infinity\n//       }\n//     })\n//     unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n\n//     console.log(unvisitedNodes, pos)\n//     while(!!unvisitedNodes){\n  \n//         sortNodesByDistance(unvisitedNodes, endNode)\n//         const closestNode = unvisitedNodes.shift();\n\n//         if(closestNode.isWall) continue;\n//         console.log('hh', pos)\n//         if(closestNode.distance === Infinity) return visitedNodesInOrder;\n    \n//         closestNode.isVisited = true;\n//         if(pos === 0){\n//           visitedNodesInOrder[0].push(closestNode)\n//         } else if(pos === 1){\n//           visitedNodesInOrder[1].push(closestNode)\n//         }\n//         console.log('jj', pos)\n//         if(closestNode === endNode && stopNode[0]){\n//           break;\n//         } else if(closestNode === endNode && !stopNode[0]){\n//           return visitedNodesInOrder\n//         }\n//         updateUnvisitedNeighbors(closestNode, grid);\n//     }\n//     pos++\n//   }\n// }\nvar cout = 0\nexport function dijkstra(grid, startNode, finishNode, isStop=false){\n  cout++\n  const visitedNodesInOrder = [];\n  var unvisitedNodes = getAllNodes(grid)\n  //testing to see if visitation is removed\n\n  unvisitedNodes.forEach((node) => {\n    if(node === startNode){\n      //node.distance = 0\n      isStop ? node.distanceSecond = 0 : node.distance = 0\n      console.log(node, node.distance, node.distanceSecond, cout, isStop)\n    } else {\n      isStop ? node.distanceSecond = Infinity : node.distance = Infinity\n    }\n  })\n  console.log(isStop, cout)\n  var cout2 =0\n  while(!!unvisitedNodes){\n      //if(cout === 1) break\n      sortNodesByDistance(unvisitedNodes, isStop)\n      const closestNode = unvisitedNodes.shift();\n\n      if(closestNode.isWall) continue;\n\n      if(closestNode.distance === Infinity && isStop === false) {\n        console.log(unvisitedNodes, cout)\n        return visitedNodesInOrder;\n      } else if(closestNode.distanceSecond === Infinity && cout===2) {\n        return visitedNodesInOrder\n      } else if (cout===2){\n        console.log('infinite', isStop, cout, visitedNodesInOrder, unvisitedNodes)\n        return visitedNodesInOrder\n      }\n\n      isStop ? closestNode.isVisitedSecond = true : closestNode.isVisited = true\n      visitedNodesInOrder.push(closestNode);\n\n      if(closestNode === finishNode) return visitedNodesInOrder;\n\n      updateUnvisitedNeighbors(closestNode, grid, isStop);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes, isStop) {\n    //it is not calculating second distace correctly stays at infinity\n    unvisitedNodes.sort((nodeA, nodeB) => {\n      if(isStop===true) {\n        //console.log(cout, nodeA.distanceSecond - nodeB.distanceSecond)\n        return nodeA.distanceSecond - nodeB.distanceSecond\n      } else if(isStop===false) {\n        //console.log(cout, nodeA.distance - nodeB.distance)\n        return nodeA.distance - nodeB.distance\n      }\n    });\n    var distanceCheck = []\n    if(cout == 2){\n      unvisitedNodes.forEach((node) => {\n        if(node.distanceSecond != Infinity) distanceCheck.push(node)\n      })\n      console.log(distanceCheck)\n    }\n    //console.log(unvisitedNodes, cout)\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isStop) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n    for (const neighbor of unvisitedNeighbors) {\n      //neighbor.distance = node.distance + 1;\n      isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid, isStop) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter((neighbor) => {\n      //isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited\n      if(isStop===true){\n        return !neighbor.isVisitedSecond\n      } else if(isStop===false){\n        return !neighbor\n      }\n    });\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode, stop=false) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    if(stop!=false){\n      while (true){\n\n        if(currentNode.isStop!=null){\n          break\n        }\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n      }\n      return nodesInShortestPathOrder;\n    }else if(stop==false){\n      while (currentNode !== null) {\n        // if(currentNode.isStart===true) break;\n        if(currentNode.isStart==true) break;\n        //console.log(currentNode, currentNode !== null)\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n      }\n      return nodesInShortestPathOrder;\n    }\n}"]},"metadata":{},"sourceType":"module"}