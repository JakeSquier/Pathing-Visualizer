{"ast":null,"code":"export function breadthFirstSearch(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  const openList = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  openList.push(startNode);\n  startNode.isVisited = true;\n\n  while (openList.length) {}\n}\n\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    return nodeA.distance - nodeB.distance;\n  });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/breadthFirstSearch.js"],"names":["breadthFirstSearch","grid","startNode","finishNode","visitedNodesInOrder","openList","distance","unvisitedNodes","getAllNodes","push","isVisited","length","sortNodesByDistance","sort","nodeA","nodeB","updateUnvisitedNeighbors","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"AAAA,OAAO,SAASA,kBAAT,CAA4BC,IAA5B,EAAkCC,SAAlC,EAA6CC,UAA7C,EAAwD;AAC3D,QAAMC,mBAAmB,GAAG,EAA5B;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACAH,EAAAA,SAAS,CAACI,QAAV,GAAqB,CAArB;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACP,IAAD,CAAlC;AACAI,EAAAA,QAAQ,CAACI,IAAT,CAAcP,SAAd;AACAA,EAAAA,SAAS,CAACQ,SAAV,GAAsB,IAAtB;;AAEA,SAAML,QAAQ,CAACM,MAAf,EAAsB,CAGrB;AAEJ;;AAED,SAASC,mBAAT,CAA6BL,cAA7B,EAA6CJ,UAA7C,EAAyD;AACrDI,EAAAA,cAAc,CAACM,IAAf,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClC,WAAQD,KAAK,CAACR,QAAP,GAAoBS,KAAK,CAACT,QAAjC;AACH,GAFD;AAGH;;AAED,SAASU,wBAAT,CAAkCC,IAAlC,EAAwChB,IAAxC,EAA8C;AAC1C,QAAMiB,kBAAkB,GAAGC,qBAAqB,CAACF,IAAD,EAAOhB,IAAP,CAAhD;;AACA,OAAK,MAAMmB,QAAX,IAAuBF,kBAAvB,EAA2C;AACzCE,IAAAA,QAAQ,CAACd,QAAT,GAAoBW,IAAI,CAACX,QAAL,GAAgB,CAApC;AACAc,IAAAA,QAAQ,CAACC,YAAT,GAAwBJ,IAAxB;AACD;AACJ;;AAED,SAASE,qBAAT,CAA+BF,IAA/B,EAAqChB,IAArC,EAA2C;AACvC,QAAMqB,SAAS,GAAG,EAAlB;AACA,QAAM;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAaP,IAAnB;AACA,MAAIO,GAAG,GAAG,CAAV,EAAaF,SAAS,CAACb,IAAV,CAAeR,IAAI,CAACuB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AACb,MAAIC,GAAG,GAAGvB,IAAI,CAACU,MAAL,GAAc,CAAxB,EAA2BW,SAAS,CAACb,IAAV,CAAeR,IAAI,CAACuB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAaD,SAAS,CAACb,IAAV,CAAeR,IAAI,CAACuB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAGtB,IAAI,CAAC,CAAD,CAAJ,CAAQU,MAAR,GAAiB,CAA3B,EAA8BW,SAAS,CAACb,IAAV,CAAeR,IAAI,CAACuB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOD,SAAS,CAACG,MAAV,CAAiBL,QAAQ,IAAI,CAACA,QAAQ,CAACV,SAAvC,CAAP;AACH;;AAED,SAASF,WAAT,CAAqBP,IAArB,EAA2B;AACvB,QAAMyB,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMF,GAAX,IAAkBvB,IAAlB,EAAwB;AACtB,SAAK,MAAMgB,IAAX,IAAmBO,GAAnB,EAAwB;AACtBE,MAAAA,KAAK,CAACjB,IAAN,CAAWQ,IAAX;AACD;AACF;;AACD,SAAOS,KAAP;AACH;;AAED,OAAO,SAASC,2BAAT,CAAqCxB,UAArC,EAAiD;AACpD,QAAMyB,wBAAwB,GAAG,EAAjC;AACA,MAAIC,WAAW,GAAG1B,UAAlB;;AACA,SAAO0B,WAAW,KAAK,IAAvB,EAA6B;AAC3BD,IAAAA,wBAAwB,CAACE,OAAzB,CAAiCD,WAAjC;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACR,YAA1B;AACD;;AACD,SAAOO,wBAAP;AACH","sourcesContent":["export function breadthFirstSearch(grid, startNode, finishNode){\n    const visitedNodesInOrder = [];\n    const openList = []\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid)\n    openList.push(startNode)\n    startNode.isVisited = true\n\n    while(openList.length){\n\n      \n    }\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n    unvisitedNodes.sort((nodeA, nodeB) => {\n        return (nodeA.distance) - (nodeB.distance)\n    });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"]},"metadata":{},"sourceType":"module"}