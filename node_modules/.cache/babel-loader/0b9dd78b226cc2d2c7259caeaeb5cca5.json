{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n\n    function bidirectionalGreedySearch(grid, startNode, finishNode) {\n      if (!startNode || !finishNode || startNode === finishNode) {\n        return false;\n      }\n\n      isStop = false; //if(isStop) {\n      // let unvisitedNodesStart = [];\n      // let visitedNodesInOrderStart = [];\n      // let unvisitedNodesStopFirst = [];\n      // let visitedNodesInOrderStopFirst = [];\n      // let unvisitedNodesStop = [];\n      // let visitedNodesInOrderStop = [];\n      // let unvisitedNodesFinish = [];\n      // let visitedNodesInOrderFinish = [];\n      // startNode.distance = 0\n      // stopNode.distance = 0\n      // stopNode.distanceSecond = 0\n      // finishNode.distanceSecond = 0\n      // unvisitedNodesStart.push(startNode)\n      // unvisitedNodesStopFirst.push(stopNode)\n      // unvisitedNodesStop.push(stopNode)\n      // unvisitedNodesFinish.push(finishNode)\n      // while (\n      //     unvisitedNodesStart.length !== 0 &&\n      //     unvisitedNodesStopFirst.length !== 0\n      // ) {\n      //     unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance)\n      //     unvisitedNodesStopFirst.sort((a, b) => a.totalDistance - b.totalDistance)\n      //     let closestNodeStart = unvisitedNodesStart.shift()\n      //     let closestNodeStop = unvisitedNodesStopFirst.shift()\n      //     closestNodeStart.isVisited = true\n      //     closestNodeStop.isVisited = true\n      //     visitedNodesInOrderStart.push(closestNodeStart)\n      //     visitedNodesInOrderStopFirst.push(closestNodeStop)\n      //     if (isNeighbour(closestNodeStart, closestNodeStop)) {\n      //         return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true]\n      //     }\n      //     //start side search\n      //     let neighbours = getNeighbours(closestNodeStart, grid)\n      //     for(let neighbour of neighbours) {\n      //         if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStopFirst)) {\n      //             visitedNodesInOrderStart.push(closestNodeStart);\n      //             visitedNodesInOrderStopFirst.push(neighbour);\n      //             return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true]\n      //         }\n      //         let distance = closestNodeStart.distance + 1\n      //         if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n      //             unvisitedNodesStart.unshift(neighbour)\n      //             neighbour.distance = distance\n      //             neighbour.totalDistance = manhattenDistance(neighbour, stopNode)\n      //             neighbour.previousNode = closestNodeStart\n      //         } else if (distance < neighbour.distance) {\n      //             neighbour.distance = distance;\n      //             neighbour.totalDistance = manhattenDistance(neighbour, stopNode);\n      //             neighbour.previousNode = closestNodeStart;\n      //         }\n      //     }\n      //     //stop side search\n      //     neighbours = getNeighbours(closestNodeStop, grid);\n      //     for (let neighbour of neighbours) {\n      //         if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n      //             visitedNodesInOrderStopFirst.push(closestNodeStop);\n      //             visitedNodesInOrderStart.push(neighbour);\n      //             return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true];\n      //         }\n      //         let distance = closestNodeStop.distance + 1;\n      //         //f(n) = h(n)\n      //         if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStopFirst)) {\n      //             unvisitedNodesStopFirst.unshift(neighbour);\n      //             neighbour.distance = distance;\n      //             neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n      //             neighbour.previousNode = closestNodeStop;\n      //         } else if (distance < neighbour.distance) {\n      //             neighbour.distance = distance;\n      //             neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n      //             neighbour.previousNode = closestNodeStop;\n      //         }\n      //     }\n      // }\n      // while (\n      //     unvisitedNodesStop.length !== 0 &&\n      //     unvisitedNodesFinish.length !== 0\n      // ) {\n      //     unvisitedNodesStop.sort((a, b) => a.totalDistanceSecond - b.totalDistanceSecond)\n      //     unvisitedNodesFinish.sort((a, b) => a.totalDistanceSecond - b.totalDistanceSecond)\n      //     let closestNodeStop = unvisitedNodesStop.shift()\n      //     let closestNodeFinish = unvisitedNodesFinish.shift()\n      //     closestNodeStop.isVisitedSecond = true\n      //     closestNodeFinish.isVisitedSecond = true\n      //     visitedNodesInOrderStop.push(closestNodeStop)\n      //     visitedNodesInOrderFinish.push(closestNodeFinish)\n      //     if (isNeighbour(closestNodeStop, closestNodeFinish)) {\n      //         return [visitedNodesInOrderStop, visitedNodesInOrderFinish, true, '1']\n      //     }\n      //     let neighbours = getNeighbours(closestNodeStop, grid, true)\n      //     for(let neighbour of neighbours) {\n      //         if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n      //             visitedNodesInOrderStop.push(closestNodeStop);\n      //             visitedNodesInOrderFinish.push(neighbour);\n      //             console.log(visitedNodesInOrderStop, visitedNodesInOrderFinish, neighbour)\n      //             return [visitedNodesInOrderStop, visitedNodesInOrderFinish, true, '2']\n      //         }\n      //         let distance = closestNodeStop.distanceSecond + 1\n      //         if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStop)) {\n      //             unvisitedNodesStop.unshift(neighbour)\n      //             neighbour.distanceSecond = distance\n      //             neighbour.totalDistanceSecond = manhattenDistance(neighbour, finishNode)\n      //             neighbour.previousNodeSecond = closestNodeStop\n      //         } else if (distance < neighbour.distanceSecond) {\n      //             neighbour.distanceSecond = distance;\n      //             neighbour.totalDistanceSecond = manhattenDistance(neighbour, finishNode);\n      //             neighbour.previousNodeSecond = closestNodeStop;\n      //         }\n      //     }\n      //     neighbours = getNeighbours(closestNodeFinish, grid, true);\n      //     for (let neighbour of neighbours) {\n      //         if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStop)) {\n      //             visitedNodesInOrderFinish.push(closestNodeFinish);\n      //             visitedNodesInOrderStop.push(neighbour);\n      //             return [visitedNodesInOrderStop, visitedNodesInOrderFinish, true];\n      //         }\n      //         let distance = closestNodeFinish.distanceSecond + 1;\n      //         //f(n) = h(n)\n      //         if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n      //             unvisitedNodesFinish.unshift(neighbour);\n      //             neighbour.distanceSecond = distance;\n      //             neighbour.totalDistanceSecond = manhattenDistance(neighbour, stopNode);\n      //             neighbour.previousNodeSecond = closestNodeFinish;\n      //         } else if (distance < neighbour.distanceSecond) {\n      //             neighbour.distanceSecond = distance;\n      //             neighbour.totalDistanceSecond = manhattenDistance(neighbour, stopNode);\n      //             neighbour.previousNodeSecond = closestNodeFinish;\n      //         }\n      //     }\n      // }\n      // return [visitedNodesInOrderStart, visitedNodesInOrderStart, false]\n      // } else {\n      //     let unvisitedNodesStart = []\n      //     let visitedNodesInOrderStart = []\n      //     let unvisitedNodesFinish = []\n      //     let visitedNodesInOrderFinish = []\n      //     startNode.distance = 0\n      //     finishNode.distance = 0\n      //     unvisitedNodesStart.push(startNode)\n      //     unvisitedNodesFinish.push(finishNode)\n      //     while (\n      //         unvisitedNodesStart.length !== 0 &&\n      //         unvisitedNodesFinish.length !== 0\n      //     ) {\n      //         unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance)\n      //         unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance)\n      //         let closestNodeStart = unvisitedNodesStart.shift()\n      //         let closestNodeFinish = unvisitedNodesFinish.shift()\n      //         closestNodeStart.isVisited = true;\n      //         closestNodeFinish.isVisited = true;\n      //         visitedNodesInOrderStart.push(closestNodeStart);\n      //         visitedNodesInOrderFinish.push(closestNodeFinish);\n      //         if (isNeighbour(closestNodeStart, closestNodeFinish)) {\n      //             return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n      //         }\n      //         //Start side search\n      //         let neighbours = getNeighbours(closestNodeStart, grid);\n      //         for (let neighbour of neighbours) {\n      //             if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n      //                 visitedNodesInOrderStart.push(closestNodeStart);\n      //                 visitedNodesInOrderFinish.push(neighbour);\n      //                 return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n      //             }\n      //             let distance = closestNodeStart.distance + 1;\n      //             //f(n) = h(n)\n      //             if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n      //                 unvisitedNodesStart.unshift(neighbour);\n      //                 neighbour.distance = distance;\n      //                 neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n      //                 neighbour.previousNode = closestNodeStart;\n      //             } else if (distance < neighbour.distance) {\n      //                 neighbour.distance = distance;\n      //                 neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n      //                 neighbour.previousNode = closestNodeStart;\n      //             }\n      //         }\n      //         //Finish side search\n      //         neighbours = getNeighbours(closestNodeFinish, grid);\n      //         for (let neighbour of neighbours) {\n      //             if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n      //                 visitedNodesInOrderFinish.push(closestNodeFinish);\n      //                 visitedNodesInOrderStart.push(neighbour);\n      //                 return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n      //             }\n      //             let distance = closestNodeFinish.distance + 1;\n      //             //f(n) = h(n)\n      //             if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n      //                 unvisitedNodesFinish.unshift(neighbour);\n      //                 neighbour.distance = distance;\n      //                 neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n      //             neighbour.previousNode = closestNodeFinish;\n      //             } else if (distance < neighbour.distance) {\n      //                 neighbour.distance = distance;\n      //                 neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n      //                 neighbour.previousNode = closestNodeFinish;\n      //             }\n      //         }\n      //     }\n      //     return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false]\n      // }\n    }\n\n    function bidirectionalGreedySearchSecond(grid, stopNode, finishNode) {\n      let unvisitedNodesStop = [];\n      let visitedNodesInOrderStop = [];\n      let unvisitedNodesFinish = [];\n      let visitedNodesInOrderFinish = [];\n      stopNode.distanceSecond = 0;\n      finishNode.distanceSecond = 0;\n      unvisitedNodesStop.push(stopNode);\n      unvisitedNodesFinish.push(finishNode);\n\n      while (unvisitedNodesStop.length !== 0 && unvisitedNodesFinish.length !== 0) {\n        unvisitedNodesStop.sort((a, b) => a.totalDistanceSecond - b.totalDistanceSecond);\n        unvisitedNodesFinish.sort((a, b) => a.totalDistanceSecond - b.totalDistanceSecond);\n        let closestNodeStop = unvisitedNodesStop.shift();\n        let closestNodeFinish = unvisitedNodesFinish.shift();\n        closestNodeStop.isVisitedSecond = true;\n        closestNodeFinish.isVisitedSecond = true;\n        visitedNodesInOrderStop.push(closestNodeStop);\n        visitedNodesInOrderFinish.push(closestNodeFinish);\n\n        if (isNeighbour(closestNodeStop, closestNodeFinish)) {\n          return [visitedNodesInOrderStop, visitedNodesInOrderFinish, true, '1'];\n        }\n\n        let neighbours = getNeighbours(closestNodeStop, grid, true);\n\n        for (let neighbour of neighbours) {\n          if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n            visitedNodesInOrderStop.push(closestNodeStop);\n            visitedNodesInOrderFinish.push(neighbour);\n            console.log(visitedNodesInOrderStop, visitedNodesInOrderFinish, neighbour);\n            return [visitedNodesInOrderStop, visitedNodesInOrderFinish, true, '2'];\n          }\n\n          let distance = closestNodeStop.distanceSecond + 1;\n\n          if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStop)) {\n            unvisitedNodesStop.unshift(neighbour);\n            neighbour.distanceSecond = distance;\n            neighbour.totalDistanceSecond = manhattenDistance(neighbour, finishNode);\n            neighbour.previousNodeSecond = closestNodeStop;\n          } else if (distance < neighbour.distanceSecond) {\n            neighbour.distanceSecond = distance;\n            neighbour.totalDistanceSecond = manhattenDistance(neighbour, finishNode);\n            neighbour.previousNodeSecond = closestNodeStop;\n          }\n        }\n\n        neighbours = getNeighbours(closestNodeFinish, grid, true);\n\n        for (let neighbour of neighbours) {\n          if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStop)) {\n            visitedNodesInOrderFinish.push(closestNodeFinish);\n            visitedNodesInOrderStop.push(neighbour);\n            return [visitedNodesInOrderStop, visitedNodesInOrderFinish, true];\n          }\n\n          let distance = closestNodeFinish.distanceSecond + 1; //f(n) = h(n)\n\n          if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n            unvisitedNodesFinish.unshift(neighbour);\n            neighbour.distanceSecond = distance;\n            neighbour.totalDistanceSecond = manhattenDistance(neighbour, stopNode);\n            neighbour.previousNodeSecond = closestNodeFinish;\n          } else if (distance < neighbour.distanceSecond) {\n            neighbour.distanceSecond = distance;\n            neighbour.totalDistanceSecond = manhattenDistance(neighbour, stopNode);\n            neighbour.previousNodeSecond = closestNodeFinish;\n          }\n        }\n      }\n    }\n\n    function isNeighbour(closestNodeStart, closestNodeFinish) {\n      let rowStart = closestNodeStart.row;\n      let colStart = closestNodeStart.col;\n      let rowFinish = closestNodeFinish.row;\n      let colFinish = closestNodeFinish.col;\n      if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\n      if (rowFinish === rowStart && colFinish === colStart + 1) return true;\n      if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\n      if (rowFinish === rowStart && colFinish === colStart - 1) return true;\n      return false;\n    }\n\n    function getNeighbours(node, grid) {\n      let isStop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      let neighbours = [];\n      let {\n        row,\n        col\n      } = node;\n      if (row !== 0) neighbours.push(grid[row - 1][col]);\n      if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n      if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n      if (col !== 0) neighbours.push(grid[row][col - 1]);\n\n      if (isStop) {\n        console.log('true');\n        return neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisitedSecond);\n      } else {\n        console.log('else');\n        return neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisited);\n      }\n    }\n\n    function manhattenDistance(nodeA, nodeB) {\n      let x = Math.abs(nodeA.row - nodeB.row);\n      let y = Math.abs(nodeA.col - nodeB.col);\n      return x + y;\n    }\n\n    function neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n      for (let node of unvisitedNodes) {\n        if (node.row === neighbour.row && node.col === neighbour.col) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    const grid = message.data[0];\n    const startNode = message.data[1];\n    const finishNode = message.data[2];\n    const stopNode = message.data[3];\n    const isStop = message.data[4];\n    const visitedNodesInorderFirstSearch = isStop ? bidirectionalGreedySearch(grid, startNode, stopNode) : bidirectionalGreedySearch(grid, startNode, finishNode);\n    postMessage(visitedNodesInorderFirstSearch);\n  });\n});\nexport function getNodesInShortestPathOrderBidirectionalGreedySearch(nodeA, nodeB) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = nodeB;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.push(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  currentNode = nodeA;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["self","addEventListener","message","bidirectionalGreedySearch","grid","startNode","finishNode","isStop","bidirectionalGreedySearchSecond","stopNode","unvisitedNodesStop","visitedNodesInOrderStop","unvisitedNodesFinish","visitedNodesInOrderFinish","distanceSecond","push","length","sort","a","b","totalDistanceSecond","closestNodeStop","shift","closestNodeFinish","isVisitedSecond","isNeighbour","neighbours","getNeighbours","neighbour","neighbourNotInUnvisitedNodes","console","log","distance","unshift","manhattenDistance","previousNodeSecond","closestNodeStart","rowStart","row","colStart","col","rowFinish","colFinish","node","filter","isWall","isVisited","nodeA","nodeB","x","Math","abs","y","unvisitedNodes","data","visitedNodesInorderFirstSearch","postMessage","getNodesInShortestPathOrderBidirectionalGreedySearch","nodesInShortestPathOrder","currentNode","previousNode"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/bidirectionalGreedySearchWorker.js"],"sourcesContent":["// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n        if (!message) return;\n        function bidirectionalGreedySearch(grid, startNode, finishNode) {\n            if (!startNode || !finishNode || startNode === finishNode) {\n            return false;\n            }\n            isStop=false\n\n                //if(isStop) {\n\n                // let unvisitedNodesStart = [];\n                // let visitedNodesInOrderStart = [];\n                // let unvisitedNodesStopFirst = [];\n                // let visitedNodesInOrderStopFirst = [];\n                // let unvisitedNodesStop = [];\n                // let visitedNodesInOrderStop = [];\n                // let unvisitedNodesFinish = [];\n                // let visitedNodesInOrderFinish = [];\n                // startNode.distance = 0\n                // stopNode.distance = 0\n                // stopNode.distanceSecond = 0\n                // finishNode.distanceSecond = 0\n                // unvisitedNodesStart.push(startNode)\n                // unvisitedNodesStopFirst.push(stopNode)\n                // unvisitedNodesStop.push(stopNode)\n                // unvisitedNodesFinish.push(finishNode)\n\n                // while (\n                //     unvisitedNodesStart.length !== 0 &&\n                //     unvisitedNodesStopFirst.length !== 0\n                // ) {\n                //     unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance)\n                //     unvisitedNodesStopFirst.sort((a, b) => a.totalDistance - b.totalDistance)\n                //     let closestNodeStart = unvisitedNodesStart.shift()\n                //     let closestNodeStop = unvisitedNodesStopFirst.shift()\n\n                //     closestNodeStart.isVisited = true\n                //     closestNodeStop.isVisited = true\n                //     visitedNodesInOrderStart.push(closestNodeStart)\n                //     visitedNodesInOrderStopFirst.push(closestNodeStop)\n                //     if (isNeighbour(closestNodeStart, closestNodeStop)) {\n                //         return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true]\n                //     }\n\n                //     //start side search\n                //     let neighbours = getNeighbours(closestNodeStart, grid)\n                //     for(let neighbour of neighbours) {\n                //         if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStopFirst)) {\n                //             visitedNodesInOrderStart.push(closestNodeStart);\n                //             visitedNodesInOrderStopFirst.push(neighbour);\n                //             return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true]\n                //         }\n                //         let distance = closestNodeStart.distance + 1\n\n                //         if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n                //             unvisitedNodesStart.unshift(neighbour)\n                //             neighbour.distance = distance\n                //             neighbour.totalDistance = manhattenDistance(neighbour, stopNode)\n                //             neighbour.previousNode = closestNodeStart\n                //         } else if (distance < neighbour.distance) {\n                //             neighbour.distance = distance;\n                //             neighbour.totalDistance = manhattenDistance(neighbour, stopNode);\n                //             neighbour.previousNode = closestNodeStart;\n                //         }\n                //     }\n\n                //     //stop side search\n                //     neighbours = getNeighbours(closestNodeStop, grid);\n                //     for (let neighbour of neighbours) {\n                //         if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n                //             visitedNodesInOrderStopFirst.push(closestNodeStop);\n                //             visitedNodesInOrderStart.push(neighbour);\n                //             return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true];\n                //         }\n                //         let distance = closestNodeStop.distance + 1;\n                //         //f(n) = h(n)\n                //         if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStopFirst)) {\n                //             unvisitedNodesStopFirst.unshift(neighbour);\n                //             neighbour.distance = distance;\n                //             neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n                //             neighbour.previousNode = closestNodeStop;\n                //         } else if (distance < neighbour.distance) {\n                //             neighbour.distance = distance;\n                //             neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n                //             neighbour.previousNode = closestNodeStop;\n                //         }\n                //     }\n                // }\n\n                // while (\n                //     unvisitedNodesStop.length !== 0 &&\n                //     unvisitedNodesFinish.length !== 0\n                // ) {\n                //     unvisitedNodesStop.sort((a, b) => a.totalDistanceSecond - b.totalDistanceSecond)\n                //     unvisitedNodesFinish.sort((a, b) => a.totalDistanceSecond - b.totalDistanceSecond)\n                //     let closestNodeStop = unvisitedNodesStop.shift()\n                //     let closestNodeFinish = unvisitedNodesFinish.shift()\n\n                //     closestNodeStop.isVisitedSecond = true\n                //     closestNodeFinish.isVisitedSecond = true\n                //     visitedNodesInOrderStop.push(closestNodeStop)\n                //     visitedNodesInOrderFinish.push(closestNodeFinish)\n                //     if (isNeighbour(closestNodeStop, closestNodeFinish)) {\n                //         return [visitedNodesInOrderStop, visitedNodesInOrderFinish, true, '1']\n                //     }\n\n                //     let neighbours = getNeighbours(closestNodeStop, grid, true)\n                //     for(let neighbour of neighbours) {\n                //         if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n                //             visitedNodesInOrderStop.push(closestNodeStop);\n                //             visitedNodesInOrderFinish.push(neighbour);\n                //             console.log(visitedNodesInOrderStop, visitedNodesInOrderFinish, neighbour)\n                //             return [visitedNodesInOrderStop, visitedNodesInOrderFinish, true, '2']\n                //         }\n                //         let distance = closestNodeStop.distanceSecond + 1\n                        \n                //         if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStop)) {\n                //             unvisitedNodesStop.unshift(neighbour)\n                //             neighbour.distanceSecond = distance\n                //             neighbour.totalDistanceSecond = manhattenDistance(neighbour, finishNode)\n                //             neighbour.previousNodeSecond = closestNodeStop\n                //         } else if (distance < neighbour.distanceSecond) {\n                //             neighbour.distanceSecond = distance;\n                //             neighbour.totalDistanceSecond = manhattenDistance(neighbour, finishNode);\n                //             neighbour.previousNodeSecond = closestNodeStop;\n                //         }\n                //     }\n\n                //     neighbours = getNeighbours(closestNodeFinish, grid, true);\n                //     for (let neighbour of neighbours) {\n                //         if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStop)) {\n                //             visitedNodesInOrderFinish.push(closestNodeFinish);\n                //             visitedNodesInOrderStop.push(neighbour);\n                //             return [visitedNodesInOrderStop, visitedNodesInOrderFinish, true];\n                //         }\n                //         let distance = closestNodeFinish.distanceSecond + 1;\n                //         //f(n) = h(n)\n                //         if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n                //             unvisitedNodesFinish.unshift(neighbour);\n                //             neighbour.distanceSecond = distance;\n                //             neighbour.totalDistanceSecond = manhattenDistance(neighbour, stopNode);\n                //             neighbour.previousNodeSecond = closestNodeFinish;\n                //         } else if (distance < neighbour.distanceSecond) {\n                //             neighbour.distanceSecond = distance;\n                //             neighbour.totalDistanceSecond = manhattenDistance(neighbour, stopNode);\n                //             neighbour.previousNodeSecond = closestNodeFinish;\n                //         }\n                //     }\n                // }\n                // return [visitedNodesInOrderStart, visitedNodesInOrderStart, false]\n\n                // } else {\n\n                //     let unvisitedNodesStart = []\n                //     let visitedNodesInOrderStart = []\n                //     let unvisitedNodesFinish = []\n                //     let visitedNodesInOrderFinish = []\n                //     startNode.distance = 0\n                //     finishNode.distance = 0\n                //     unvisitedNodesStart.push(startNode)\n                //     unvisitedNodesFinish.push(finishNode)\n                \n                //     while (\n                //         unvisitedNodesStart.length !== 0 &&\n                //         unvisitedNodesFinish.length !== 0\n                //     ) {\n                //         unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance)\n                //         unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance)\n                //         let closestNodeStart = unvisitedNodesStart.shift()\n                //         let closestNodeFinish = unvisitedNodesFinish.shift()\n                \n                //         closestNodeStart.isVisited = true;\n                //         closestNodeFinish.isVisited = true;\n                //         visitedNodesInOrderStart.push(closestNodeStart);\n                //         visitedNodesInOrderFinish.push(closestNodeFinish);\n                //         if (isNeighbour(closestNodeStart, closestNodeFinish)) {\n                //             return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n                //         }\n                    \n                //         //Start side search\n                //         let neighbours = getNeighbours(closestNodeStart, grid);\n                //         for (let neighbour of neighbours) {\n                //             if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n                //                 visitedNodesInOrderStart.push(closestNodeStart);\n                //                 visitedNodesInOrderFinish.push(neighbour);\n                //                 return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n                //             }\n                //             let distance = closestNodeStart.distance + 1;\n                //             //f(n) = h(n)\n                //             if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n                //                 unvisitedNodesStart.unshift(neighbour);\n                //                 neighbour.distance = distance;\n                //                 neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n                //                 neighbour.previousNode = closestNodeStart;\n                //             } else if (distance < neighbour.distance) {\n                //                 neighbour.distance = distance;\n                //                 neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n                //                 neighbour.previousNode = closestNodeStart;\n                //             }\n                //         }\n                    \n                //         //Finish side search\n                //         neighbours = getNeighbours(closestNodeFinish, grid);\n                //         for (let neighbour of neighbours) {\n                //             if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n                //                 visitedNodesInOrderFinish.push(closestNodeFinish);\n                //                 visitedNodesInOrderStart.push(neighbour);\n                //                 return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n                //             }\n                //             let distance = closestNodeFinish.distance + 1;\n                //             //f(n) = h(n)\n                //             if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n                //                 unvisitedNodesFinish.unshift(neighbour);\n                //                 neighbour.distance = distance;\n                //                 neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n                //             neighbour.previousNode = closestNodeFinish;\n                //             } else if (distance < neighbour.distance) {\n                //                 neighbour.distance = distance;\n                //                 neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n                //                 neighbour.previousNode = closestNodeFinish;\n                //             }\n                //         }\n                //     }\n                //     return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false]\n                // }\n            \n            \n        }\n\n        function bidirectionalGreedySearchSecond(grid, stopNode, finishNode) {\n\n            let unvisitedNodesStop = [];\n            let visitedNodesInOrderStop = [];\n            let unvisitedNodesFinish = [];\n            let visitedNodesInOrderFinish = [];\n            stopNode.distanceSecond = 0\n            finishNode.distanceSecond = 0\n            unvisitedNodesStop.push(stopNode)\n            unvisitedNodesFinish.push(finishNode)\n\n            while (\n                unvisitedNodesStop.length !== 0 &&\n                unvisitedNodesFinish.length !== 0\n            ) {\n                unvisitedNodesStop.sort((a, b) => a.totalDistanceSecond - b.totalDistanceSecond)\n                unvisitedNodesFinish.sort((a, b) => a.totalDistanceSecond - b.totalDistanceSecond)\n                let closestNodeStop = unvisitedNodesStop.shift()\n                let closestNodeFinish = unvisitedNodesFinish.shift()\n\n                closestNodeStop.isVisitedSecond = true\n                closestNodeFinish.isVisitedSecond = true\n                visitedNodesInOrderStop.push(closestNodeStop)\n                visitedNodesInOrderFinish.push(closestNodeFinish)\n                if (isNeighbour(closestNodeStop, closestNodeFinish)) {\n                    return [visitedNodesInOrderStop, visitedNodesInOrderFinish, true, '1']\n                }\n\n                let neighbours = getNeighbours(closestNodeStop, grid, true)\n                for(let neighbour of neighbours) {\n                    if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n                        visitedNodesInOrderStop.push(closestNodeStop);\n                        visitedNodesInOrderFinish.push(neighbour);\n                        console.log(visitedNodesInOrderStop, visitedNodesInOrderFinish, neighbour)\n                        return [visitedNodesInOrderStop, visitedNodesInOrderFinish, true, '2']\n                    }\n                    let distance = closestNodeStop.distanceSecond + 1\n                    \n                    if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStop)) {\n                        unvisitedNodesStop.unshift(neighbour)\n                        neighbour.distanceSecond = distance\n                        neighbour.totalDistanceSecond = manhattenDistance(neighbour, finishNode)\n                        neighbour.previousNodeSecond = closestNodeStop\n                    } else if (distance < neighbour.distanceSecond) {\n                        neighbour.distanceSecond = distance;\n                        neighbour.totalDistanceSecond = manhattenDistance(neighbour, finishNode);\n                        neighbour.previousNodeSecond = closestNodeStop;\n                    }\n                }\n\n                neighbours = getNeighbours(closestNodeFinish, grid, true);\n                for (let neighbour of neighbours) {\n                    if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStop)) {\n                        visitedNodesInOrderFinish.push(closestNodeFinish);\n                        visitedNodesInOrderStop.push(neighbour);\n                        return [visitedNodesInOrderStop, visitedNodesInOrderFinish, true];\n                    }\n                    let distance = closestNodeFinish.distanceSecond + 1;\n                    //f(n) = h(n)\n                    if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n                        unvisitedNodesFinish.unshift(neighbour);\n                        neighbour.distanceSecond = distance;\n                        neighbour.totalDistanceSecond = manhattenDistance(neighbour, stopNode);\n                        neighbour.previousNodeSecond = closestNodeFinish;\n                    } else if (distance < neighbour.distanceSecond) {\n                        neighbour.distanceSecond = distance;\n                        neighbour.totalDistanceSecond = manhattenDistance(neighbour, stopNode);\n                        neighbour.previousNodeSecond = closestNodeFinish;\n                    }\n                }\n            }\n        }\n        \n        function isNeighbour(closestNodeStart, closestNodeFinish) {\n            let rowStart = closestNodeStart.row;\n            let colStart = closestNodeStart.col;\n            let rowFinish = closestNodeFinish.row;\n            let colFinish = closestNodeFinish.col;\n            if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\n            if (rowFinish === rowStart && colFinish === colStart + 1) return true;\n            if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\n            if (rowFinish === rowStart && colFinish === colStart - 1) return true;\n            return false;\n        }\n        \n        function getNeighbours(node, grid, isStop=false) {\n            let neighbours = [];\n            let { row, col } = node;\n            if (row !== 0) neighbours.push(grid[row - 1][col]);\n            if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n            if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n            if (col !== 0) neighbours.push(grid[row][col - 1]);\n            \n            if(isStop) {\n                console.log('true')\n                return neighbours.filter(\n                    (neighbour) => !neighbour.isWall && !neighbour.isVisitedSecond\n                );\n            } else {\n                console.log('else')\n                return neighbours.filter(\n                    (neighbour) => !neighbour.isWall && !neighbour.isVisited\n                );\n            }\n        }\n        \n        function manhattenDistance(nodeA, nodeB) {\n            let x = Math.abs(nodeA.row - nodeB.row);\n            let y = Math.abs(nodeA.col - nodeB.col);\n            return x + y;\n        }\n        \n        function neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n            for (let node of unvisitedNodes) {\n                if (node.row === neighbour.row && node.col === neighbour.col) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        const grid = message.data[0]\n        const startNode = message.data[1]\n        const finishNode = message.data[2]\n        const stopNode = message.data[3]\n        const isStop = message.data[4]\n        const visitedNodesInorderFirstSearch = isStop ? bidirectionalGreedySearch(grid, startNode, stopNode) : bidirectionalGreedySearch(grid, startNode, finishNode)\n\n        postMessage(visitedNodesInorderFirstSearch);\n    })\n}\n\nexport function getNodesInShortestPathOrderBidirectionalGreedySearch(\n    nodeA,\n    nodeB\n  ) {\n    let nodesInShortestPathOrder = [];\n    let currentNode = nodeB;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.push(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    currentNode = nodeA;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}