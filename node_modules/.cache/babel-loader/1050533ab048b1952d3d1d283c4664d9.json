{"ast":null,"code":"// export function dijkstra(grid, startNode, finishNode, stopNode){\n//   const visitedNodesInOrder = [[],[]];\n//   const unvisitedNodes = getAllNodes(grid)\n//   const _stopNode = stopNode[0] ? stopNode[1] : [];\n//   var pos = 0\n//   while(pos < 2){\n//     console.log('here')\n//     var endBool = pos===0 && stopNode[0]\n//     var beginNode = pos===0 ? startNode : _stopNode\n//     if(pos===0){\n//       beginNode = startNode\n//     } else if(pos===1 && stopNode[0]){\n//       beginNode = _stopNode\n//     }\n//     var endNode = endBool ? _stopNode : finishNode\n//     if(pos===0 && stopNode[0]){\n//       endNode = _stopNode\n//     } else if(!stopNode[1]){\n//       endNode = finishNode\n//     }\n//     console.log(unvisitedNodes)\n//     unvisitedNodes.forEach((node) => {\n//       if(node === beginNode){\n//         node.distance = 0\n//       } else {\n//         node.distance = Infinity\n//       }\n//     })\n//     unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n//     console.log(unvisitedNodes, pos)\n//     while(!!unvisitedNodes){\n//         sortNodesByDistance(unvisitedNodes, endNode)\n//         const closestNode = unvisitedNodes.shift();\n//         if(closestNode.isWall) continue;\n//         console.log('hh', pos)\n//         if(closestNode.distance === Infinity) return visitedNodesInOrder;\n//         closestNode.isVisited = true;\n//         if(pos === 0){\n//           visitedNodesInOrder[0].push(closestNode)\n//         } else if(pos === 1){\n//           visitedNodesInOrder[1].push(closestNode)\n//         }\n//         console.log('jj', pos)\n//         if(closestNode === endNode && stopNode[0]){\n//           break;\n//         } else if(closestNode === endNode && !stopNode[0]){\n//           return visitedNodesInOrder\n//         }\n//         updateUnvisitedNeighbors(closestNode, grid);\n//     }\n//     pos++\n//   }\n// }\nexport function dijkstra(grid, startNode, finishNode, secondRun = false) {\n  var _secondRun = secondRun;\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  unvisitedNodes.forEach(node => {\n    if (node === startNode) {\n      node.distance = 0;\n    } else {\n      node.distance = Infinity;\n    }\n  });\n\n  while (!!unvisitedNodes) {\n    sortNodesByDistance(unvisitedNodes, finishNode);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n    if (secondRun) {\n      closestNode.isVisitedSecond = true;\n    } else if (!secondRun) {\n      closestNode.isVisited = true;\n    }\n\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid, _secondRun);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    if (nodeA.isWeight) {\n      nodeA.distance += 1;\n    } else if (nodeB.isWeight) {\n      nodeB.distance += 2;\n    }\n\n    return nodeA.distance - nodeB.distance;\n  });\n}\n\nfunction updateUnvisitedNeighbors(node, grid, secondRun) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, secondRun);\n  console.log('made it');\n  return;\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid, secondRun) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => secondRun ? !neighbor.isVisitedSecond : !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode, isStop = false) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    if (currentNode.isTarget === true) break; //console.log(currentNode, currentNode !== null)\n\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","secondRun","_secondRun","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","forEach","node","Infinity","sortNodesByDistance","closestNode","shift","isWall","isVisitedSecond","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","isWeight","unvisitedNeighbors","getUnvisitedNeighbors","console","log","neighbor","previousNode","neighbors","col","row","length","filter","nodes","getNodesInShortestPathOrder","isStop","nodesInShortestPathOrder","currentNode","isTarget","unshift"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,UAAnC,EAA+CC,SAAS,GAAC,KAAzD,EAA+D;AACpE,MAAIC,UAAU,GAAGD,SAAjB;AACA,QAAME,mBAAmB,GAAG,EAA5B;AACAJ,EAAAA,SAAS,CAACK,QAAV,GAAqB,CAArB;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACR,IAAD,CAAlC;AACAO,EAAAA,cAAc,CAACE,OAAf,CAAwBC,IAAD,IAAU;AAC/B,QAAGA,IAAI,KAAKT,SAAZ,EAAsB;AACpBS,MAAAA,IAAI,CAACJ,QAAL,GAAgB,CAAhB;AACD,KAFD,MAEO;AACLI,MAAAA,IAAI,CAACJ,QAAL,GAAgBK,QAAhB;AACD;AACF,GAND;;AAOA,SAAM,CAAC,CAACJ,cAAR,EAAuB;AACnBK,IAAAA,mBAAmB,CAACL,cAAD,EAAiBL,UAAjB,CAAnB;AACA,UAAMW,WAAW,GAAGN,cAAc,CAACO,KAAf,EAApB;AAEA,QAAGD,WAAW,CAACE,MAAf,EAAuB;AAEvB,QAAGF,WAAW,CAACP,QAAZ,KAAyBK,QAA5B,EAAsC,OAAON,mBAAP;;AACtC,QAAGF,SAAH,EAAa;AACXU,MAAAA,WAAW,CAACG,eAAZ,GAA8B,IAA9B;AACD,KAFD,MAEO,IAAG,CAACb,SAAJ,EAAc;AACnBU,MAAAA,WAAW,CAACI,SAAZ,GAAwB,IAAxB;AACD;;AACDZ,IAAAA,mBAAmB,CAACa,IAApB,CAAyBL,WAAzB;AAEA,QAAGA,WAAW,KAAKX,UAAnB,EAA+B,OAAOG,mBAAP;AAC/Bc,IAAAA,wBAAwB,CAACN,WAAD,EAAcb,IAAd,EAAoBI,UAApB,CAAxB;AACH;AACF;;AAED,SAASQ,mBAAT,CAA6BL,cAA7B,EAA6C;AACzCA,EAAAA,cAAc,CAACa,IAAf,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACpC,QAAGD,KAAK,CAACE,QAAT,EAAkB;AAChBF,MAAAA,KAAK,CAACf,QAAN,IAAkB,CAAlB;AACD,KAFD,MAEO,IAAGgB,KAAK,CAACC,QAAT,EAAkB;AACvBD,MAAAA,KAAK,CAAChB,QAAN,IAAkB,CAAlB;AACD;;AACD,WAAOe,KAAK,CAACf,QAAN,GAAiBgB,KAAK,CAAChB,QAA9B;AACD,GAPD;AAQH;;AAED,SAASa,wBAAT,CAAkCT,IAAlC,EAAwCV,IAAxC,EAA8CG,SAA9C,EAAyD;AACrD,QAAMqB,kBAAkB,GAAGC,qBAAqB,CAACf,IAAD,EAAOV,IAAP,EAAaG,SAAb,CAAhD;AACAuB,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA;;AACA,OAAK,MAAMC,QAAX,IAAuBJ,kBAAvB,EAA2C;AACzCI,IAAAA,QAAQ,CAACtB,QAAT,GAAoBI,IAAI,CAACJ,QAAL,GAAgB,CAApC;AACAsB,IAAAA,QAAQ,CAACC,YAAT,GAAwBnB,IAAxB;AACD;AACJ;;AAED,SAASe,qBAAT,CAA+Bf,IAA/B,EAAqCV,IAArC,EAA2CG,SAA3C,EAAsD;AAClD,QAAM2B,SAAS,GAAG,EAAlB;AACA,QAAM;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAatB,IAAnB;AACA,MAAIsB,GAAG,GAAG,CAAV,EAAaF,SAAS,CAACZ,IAAV,CAAelB,IAAI,CAACgC,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AACb,MAAIC,GAAG,GAAGhC,IAAI,CAACiC,MAAL,GAAc,CAAxB,EAA2BH,SAAS,CAACZ,IAAV,CAAelB,IAAI,CAACgC,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAaD,SAAS,CAACZ,IAAV,CAAelB,IAAI,CAACgC,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAG/B,IAAI,CAAC,CAAD,CAAJ,CAAQiC,MAAR,GAAiB,CAA3B,EAA8BH,SAAS,CAACZ,IAAV,CAAelB,IAAI,CAACgC,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOD,SAAS,CAACI,MAAV,CAAiBN,QAAQ,IAAIzB,SAAS,GAAG,CAACyB,QAAQ,CAACZ,eAAb,GAA+B,CAACY,QAAQ,CAACX,SAA/E,CAAP;AACH;;AAED,SAAST,WAAT,CAAqBR,IAArB,EAA2B;AACvB,QAAMmC,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMH,GAAX,IAAkBhC,IAAlB,EAAwB;AACtB,SAAK,MAAMU,IAAX,IAAmBsB,GAAnB,EAAwB;AACtBG,MAAAA,KAAK,CAACjB,IAAN,CAAWR,IAAX;AACD;AACF;;AACD,SAAOyB,KAAP;AACH,C,CAED;AACA;;;AACA,OAAO,SAASC,2BAAT,CAAqClC,UAArC,EAAiDmC,MAAM,GAAC,KAAxD,EAA+D;AAClE,QAAMC,wBAAwB,GAAG,EAAjC;AACA,MAAIC,WAAW,GAAGrC,UAAlB;;AACA,SAAOqC,WAAW,KAAK,IAAvB,EAA6B;AAC3B,QAAGA,WAAW,CAACC,QAAZ,KAAuB,IAA1B,EAAgC,MADL,CAE3B;;AACAF,IAAAA,wBAAwB,CAACG,OAAzB,CAAiCF,WAAjC;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACV,YAA1B;AACD;;AACD,SAAOS,wBAAP;AACH","sourcesContent":["\n// export function dijkstra(grid, startNode, finishNode, stopNode){\n//   const visitedNodesInOrder = [[],[]];\n//   const unvisitedNodes = getAllNodes(grid)\n//   const _stopNode = stopNode[0] ? stopNode[1] : [];\n//   var pos = 0\n//   while(pos < 2){\n//     console.log('here')\n//     var endBool = pos===0 && stopNode[0]\n//     var beginNode = pos===0 ? startNode : _stopNode\n//     if(pos===0){\n//       beginNode = startNode\n//     } else if(pos===1 && stopNode[0]){\n//       beginNode = _stopNode\n//     }\n//     var endNode = endBool ? _stopNode : finishNode\n//     if(pos===0 && stopNode[0]){\n//       endNode = _stopNode\n//     } else if(!stopNode[1]){\n//       endNode = finishNode\n//     }\n//     console.log(unvisitedNodes)\n//     unvisitedNodes.forEach((node) => {\n//       if(node === beginNode){\n//         node.distance = 0\n//       } else {\n//         node.distance = Infinity\n//       }\n//     })\n//     unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n\n//     console.log(unvisitedNodes, pos)\n//     while(!!unvisitedNodes){\n  \n//         sortNodesByDistance(unvisitedNodes, endNode)\n//         const closestNode = unvisitedNodes.shift();\n\n//         if(closestNode.isWall) continue;\n//         console.log('hh', pos)\n//         if(closestNode.distance === Infinity) return visitedNodesInOrder;\n    \n//         closestNode.isVisited = true;\n//         if(pos === 0){\n//           visitedNodesInOrder[0].push(closestNode)\n//         } else if(pos === 1){\n//           visitedNodesInOrder[1].push(closestNode)\n//         }\n//         console.log('jj', pos)\n//         if(closestNode === endNode && stopNode[0]){\n//           break;\n//         } else if(closestNode === endNode && !stopNode[0]){\n//           return visitedNodesInOrder\n//         }\n//         updateUnvisitedNeighbors(closestNode, grid);\n//     }\n//     pos++\n//   }\n// }\n\nexport function dijkstra(grid, startNode, finishNode, secondRun=false){\n  var _secondRun = secondRun\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid)\n  unvisitedNodes.forEach((node) => {\n    if(node === startNode){\n      node.distance = 0\n    } else {\n      node.distance = Infinity\n    }\n  })\n  while(!!unvisitedNodes){\n      sortNodesByDistance(unvisitedNodes, finishNode)\n      const closestNode = unvisitedNodes.shift();\n\n      if(closestNode.isWall) continue;\n\n      if(closestNode.distance === Infinity) return visitedNodesInOrder;\n      if(secondRun){\n        closestNode.isVisitedSecond = true;\n      } else if(!secondRun){\n        closestNode.isVisited = true;\n      }\n      visitedNodesInOrder.push(closestNode);\n\n      if(closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid, _secondRun);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => {\n      if(nodeA.isWeight){\n        nodeA.distance += 1\n      } else if(nodeB.isWeight){\n        nodeB.distance += 2\n      }\n      return nodeA.distance - nodeB.distance\n    });\n}\n\nfunction updateUnvisitedNeighbors(node, grid, secondRun) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, secondRun);\n    console.log('made it')\n    return;\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid, secondRun) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => secondRun ? !neighbor.isVisitedSecond : !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode, isStop=false) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      if(currentNode.isTarget===true) break;\n      //console.log(currentNode, currentNode !== null)\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"]},"metadata":{},"sourceType":"module"}