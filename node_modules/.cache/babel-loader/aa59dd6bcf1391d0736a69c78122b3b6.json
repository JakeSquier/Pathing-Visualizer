{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\";\nimport React, { Component, useState, useEffect } from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithims/dijkstra';\nimport { aStar } from '../algorithims/aStar';\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data';\nimport algData from '../data/alg-data';\nimport './mainContainer.css';\nimport { ContactlessOutlined } from '@material-ui/icons'; // const START_NODE_ROW = 10;\n// const START_NODE_COL = 5;\n// const FINISH_NODE_ROW = 10;\n// const FINISH_NODE_COL = 45;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MainContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMouseDown = (row, col) => {\n      var newGrid = this.state.grid;\n\n      if (this.state.grid[row][col].isStart) {\n        this.setState({\n          startIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.grid[row][col].isFinish) {\n        this.setState({\n          finishIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Weight') {\n        newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        this.setState({\n          stopIsMoving: true,\n          isThereStop: true\n        });\n      }\n\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n\n    this.handleItemDescChange = (e, item) => {\n      var newItem = `${item}`;\n      itemData.map(_item => {\n        if (item === _item.id) {\n          this.setState({\n            currItemDesc: newItem,\n            currItemObj: _item\n          });\n        }\n      });\n    };\n\n    this.handleTabs = (e, val) => {\n      this.setState({\n        currAlgTab: val,\n        currAlgObj: algData[val]\n      });\n    };\n\n    this.handleMazeTabs = (e, val) => {\n      this.setState({\n        currMazeTab: val\n      });\n      console.log(val);\n    };\n\n    this.generateMaze = e => {\n      var currAlg = this.state.currMazeTab;\n\n      if (currAlg === 0) {\n        this.generateRecursiveDivisionMaze();\n        console.log('hi');\n      } else if (currAlg === 1) {\n        this.generateVerticalMaze();\n      } else if (currAlg === 2) {\n        this.generateHorizontalMaze();\n      } else if (currAlg === 3) {\n        this.generateRandomMaze();\n      }\n    };\n\n    this.resetGrid = e => {\n      this.clearGrid();\n    };\n\n    this.playAnimation = e => {\n      var currAlg = this.state.currAlgObj.id;\n\n      if (currAlg === 0) {\n        this.visualizeDijkstra();\n      } else if (currAlg === 1) {\n        this.visualizeaStar();\n      } else if (currAlg === 6) {\n        this.visualizbfs();\n      } else if (currAlg === 2) {\n        this.visualizegbfs();\n      } else if (currAlg === 7) {\n        this.visualizegdfs();\n      } else if (currAlg === 3) {\n        this.visualizeBidirectionalGreedySearch();\n        console.log('here');\n      }\n\n      return;\n    };\n\n    this.visualizeDijkstra = () => {\n      const grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n      var visitedNodesInOrder = [];\n      var visitedNodesInOrderSecond = [];\n\n      if (this.state.isThereStop) {\n        visitedNodesInOrder = dijkstra(grid, startNode, stopNode);\n        visitedNodesInOrderSecond = dijkstra(this.state.grid, stopNode, finishNode, true);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode, stopNode);\n        var waitTime = visitedNodesInOrder.length * 10;\n        console.log(visitedNodesInOrder, visitedNodesInOrderSecond);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n        setTimeout(() => this.animateDijkstra(visitedNodesInOrderSecond, nodesInShortestPathOrder, true), waitTime);\n      } else if (!this.state.isThereStop) {\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n      }\n    };\n\n    this.animateMaze = walls => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({\n              grid: newGrid,\n              generatingMaze: false\n            });\n          }, i * 10);\n          return;\n        }\n\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true;\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      showNav: false,\n      currItemDesc: 'Start',\n      currItemObj: itemData[0],\n      currAlgObj: algData[0],\n      currAlgTab: 0,\n      currMazeAlg: 'Recursive Division Maze',\n      currMazeTab: 0,\n      startNode: [10, 5],\n      finishNode: [10, 45],\n      startIsMoving: false,\n      finishIsMoving: false,\n      isThereStop: false,\n      stopIsMoving: false,\n      prevStop: [],\n      generatingMaze: false,\n      visualizingAlgorithm: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = renderGrid(this.state);\n    this.setState({\n      grid\n    });\n  }\n\n  componentWillUnmount() {}\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    var newGrid = this.state.grid;\n\n    if (this.state.startIsMoving) {\n      newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode);\n      this.setState({\n        startNode: [row, col]\n      });\n    } else if (this.state.finishIsMoving) {\n      newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode);\n      this.setState({\n        finishNode: [row, col]\n      });\n    } else if (this.state.currItemDesc === 'Wall') {\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n    } else if (this.state.currItemDesc === 'Weight') {\n      newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n    } else if (this.state.currItemDesc === 'Stop') {\n      newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n      this.setState({\n        prevStop: [row, col]\n      });\n    }\n\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp(row, col) {\n    this.setState({\n      mouseIsPressed: false,\n      startIsMoving: false,\n      finishIsMoving: false\n    });\n  }\n\n  handleNav() {\n    this.setState({\n      showNav: !this.state.showNav\n    });\n  }\n\n  clearGrid() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n\n    for (let row = 0; row < this.state.grid.length; row++) {\n      for (let col = 0; col < this.state.grid[0].length; col++) {\n        if (!(row === startNode[0] && col === startNode[1] || row === finishNode[0] && col === finishNode[1])) {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n\n    var rowNum = (window.innerHeight - 25) / 25 - 2;\n    var colNum = (window.innerWidth - 20) / 25;\n    const newGrid = getInitialGrid(rowNum, colNum);\n    this.setState({\n      grid: newGrid,\n      visualizingAlgorithm: false,\n      generatingMaze: false\n    });\n  } //navBar functions\n\n\n  clearGrid() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    var rowNum = (window.innerHeight - 25) / 25 - 2;\n    var colNum = (window.innerWidth - 20) / 25;\n    const grid = this.state.grid;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n\n    for (let row = 0; row < this.state.grid.length; row++) {\n      for (let col = 0; col < this.state.grid[0].length; col++) {\n        if (row === startNode[0] && col === startNode[1]) {\n          console.log('isStartNode');\n          document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n        } else if (row === finishNode[0] && col === finishNode[1]) {\n          console.log('isfinishnode');\n          document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n        } else {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n\n    const newGrid = getGridWithoutPath(this.state.grid);\n    this.setState({\n      grid: newGrid,\n      visualizingAlgorithm: false,\n      generatingMaze: false\n    });\n  } // play animation\n\n\n  //animte dijkstra\n  async animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder, isSecondAnimation = false) {\n    var animationColor = '';\n\n    if (isSecondAnimation) {\n      animationColor = 'node-target-visited';\n    } else if (!isSecondAnimation) {\n      animationColor = 'node-visited';\n    }\n\n    var isFinishClass = '';\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        if (isSecondAnimation == false && this.state.isThereStop) {\n          console.log('here');\n          return;\n        }\n\n        setTimeout(() => this.animateShortestPath(nodesInShortestPathOrder), i * 10);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if (node.isFinish && this.state.isThereStop) {\n          isFinishClass = 'node-finish';\n        } else if (!node.isFinish) {\n          isFinishClass = '';\n        }\n\n        document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor} ${isFinishClass}`;\n      }, 10 * i);\n    }\n  }\n\n  //animate aStar\n  animateaStar(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizeaStar() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n  } //animate breadth first search \n\n\n  animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizbfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // greedy best first search\n\n\n  animategbfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizegbfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // depth first search\n\n\n  animatedfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizegdfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // bidirectional greedy first search\n\n\n  animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath) {\n    let len = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n    for (let i = 1; i <= len; i++) {\n      let nodeA = visitedNodesInOrderStart[i];\n      let nodeB = visitedNodesInOrderFinish[i];\n\n      if (i === visitedNodesInOrderStart.length) {\n        setTimeout(() => {\n          let visitedNodesInOrder = getVisitedNodesInOrder(visitedNodesInOrderStart, visitedNodesInOrderFinish);\n\n          if (isShortedPath) {\n            this.animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\n          } else {\n            this.setState({\n              visualizingAlgorithm: false\n            });\n          }\n        }, i * 10);\n        return;\n      }\n\n      setTimeout(() => {\n        //visited nodes\n        if (nodeA !== undefined) document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = \"node node-visited\";\n        if (nodeB !== undefined) document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = \"node node-visited\";\n      }, i * 10);\n    }\n  }\n\n  visualizeBidirectionalGreedySearch() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      visualizingAlgorithm: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const visitedNodesInOrder = bidirectionalGreedySearch(grid, startNode, finishNode);\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n      const isShortedPath = visitedNodesInOrder[2];\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1], visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]);\n      console.log('here');\n      this.animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath);\n    }, 10);\n  } //finish animations\n\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  } //generate mazes\n\n\n  generateRandomMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = randomMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateRecursiveDivisionMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateVerticalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = verticalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateHorizontalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = horizontalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-container\",\n        children: /*#__PURE__*/_jsxDEV(Visualizer, {\n          state: this.state,\n          handleMouseDown: this.handleMouseDown,\n          handleMouseEnter: this.handleMouseEnter,\n          handleMouseUp: this.handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        state: this.state,\n        toggleNav: this.handleNav,\n        resetGrid: this.resetGrid,\n        handleMazeTabs: this.handleMazeTabs,\n        genMaze: this.generateMaze,\n        play: this.playAnimation,\n        handleTabs: this.handleTabs,\n        handleItemChange: this.handleItemDescChange,\n        visualizeDijkstra: this.visualizeDijkstra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = state => {\n  const grid = [];\n  var rowNum = window.innerHeight / 25 + 3;\n  var colNum = window.innerWidth / 25 + 2;\n\n  for (let row = 0; row < rowNum; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < colNum; col++) {\n      var node = createNode(col, row, state);\n      node.className = 'node';\n      currentRow.push(node);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row, state) => {\n  const startNode = state.startNode;\n  const finishNode = state.finishNode;\n  const stopNode = state.prevStop;\n  return {\n    col,\n    row,\n    isStart: row === startNode[0] && col === startNode[1],\n    isFinish: row === finishNode[0] && col === finishNode[1],\n    isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n    distance: Infinity,\n    isVisited: false,\n    isVisitedSecond: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst rerenderGrid = state => {\n  const grid = state.grid;\n  const startNode = grid[state.startNode[0]][state.startNode[1]];\n  const finishNode = grid[state.finishNode[0]][state.finishNode[1]];\n\n  for (let row = 0; row < grid.length; row++) {\n    var colNum = grid[row];\n\n    for (let col = 0; col < colNum.length; col++) {\n      var node = grid[row][col];\n\n      if (node.isWall || node.isWeight || node.isStop) {\n        node.isWall = false;\n        node.isWeight = false;\n        node.isStop = false;\n        node.isVisited = false;\n      }\n\n      if (node === startNode) {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-start\";\n      } else if (node === finishNode) {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-finish\";\n      } else {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node\";\n      }\n    }\n  }\n\n  return grid;\n};\n\nconst getNewGridWithStart = (grid, row, col, prevStart) => {\n  const newGrid = grid.slice();\n  const newStart = newGrid[row][col];\n  const oldStart = newGrid[prevStart[0]][prevStart[1]];\n  const oldNode = { ...oldStart,\n    isStart: !oldStart.isStart\n  };\n  const newNode = { ...newStart,\n    isStart: !newStart.isStart\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStart[0]][prevStart[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinish = (grid, row, col, prevFinish) => {\n  const newGrid = grid.slice();\n  if (newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n  const newFinish = newGrid[row][col];\n  const oldFinish = newGrid[prevFinish[0]][prevFinish[1]];\n  const oldNode = { ...oldFinish,\n    isFinish: !oldFinish.isFinish\n  };\n  const newNode = { ...newFinish,\n    isFinish: !newFinish.isFinish\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevFinish[0]][prevFinish[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithWeightToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWeight: !node.isWeight\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n  const newGrid = grid.slice();\n  const newStop = newGrid[row][col];\n\n  if (prevStop.length === 0) {\n    const newNode = { ...newStop,\n      isStop: !newStop.isStop\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  const oldStop = newGrid[prevStop[0]][prevStop[1]];\n  const oldNode = { ...oldStop,\n    isStop: !oldStop.isStop\n  };\n  const newNode = { ...newStop,\n    isStop: !newStop.isStop\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStop[0]][prevStop[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = { ...node,\n      isWall: true\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n\n  return newGrid;\n};\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst getVisitedNodesInOrder = (visitedNodesInOrderStart, visitedNodesInOrderFinish) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n\n  return visitedNodesInOrder;\n};\n\nconst getGridWithoutPath = grid => {\n  let newGrid = grid.slice();\n\n  for (let row of grid) {\n    for (let node of row) {\n      let newNode = { ...node,\n        distance: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isVisitedSecond: false,\n        isShortest: false,\n        previousNode: null,\n        isWall: false,\n        isWeight: false,\n        isStop: false\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"names":["React","Component","useState","useEffect","Visualizer","dijkstra","getNodesInShortestPathOrder","aStar","breadthFirstSearch","greedyBFS","depthFirstSearch","randomMaze","verticalMaze","horizontalMaze","recursiveDivisionMaze","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","Navbar","itemData","algData","ContactlessOutlined","MainContainer","constructor","props","handleMouseDown","row","col","newGrid","state","grid","isStart","setState","startIsMoving","isFinish","finishIsMoving","currItemDesc","getNewGridWithWallToggled","getNewGridWithWeightToggled","stopIsMoving","isThereStop","mouseIsPressed","handleItemDescChange","e","item","newItem","map","_item","id","currItemObj","handleTabs","val","currAlgTab","currAlgObj","handleMazeTabs","currMazeTab","console","log","generateMaze","currAlg","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","generateRandomMaze","resetGrid","clearGrid","playAnimation","visualizeDijkstra","visualizeaStar","visualizbfs","visualizegbfs","visualizegdfs","visualizeBidirectionalGreedySearch","START_NODE","startNode","FINISH_NODE","finishNode","STOP_NODE","prevStop","stopNode","visitedNodesInOrder","visitedNodesInOrderSecond","nodesInShortestPathOrder","waitTime","length","animateDijkstra","setTimeout","animateMaze","walls","i","getNewGridWithMaze","generatingMaze","wall","node","isWall","document","getElementById","className","showNav","currMazeAlg","visualizingAlgorithm","componentDidMount","renderGrid","componentWillUnmount","handleMouseEnter","getNewGridWithStart","getNewGridWithFinish","getNewGridWithStopToggled","handleMouseUp","handleNav","rowNum","window","innerHeight","colNum","innerWidth","getInitialGrid","getGridWithoutPath","isSecondAnimation","animationColor","isFinishClass","animateShortestPath","animateaStar","_startNode","_finishNode","animatebfs","animategbfs","animatedfs","animateBidirectionalAlgorithm","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","len","Math","max","nodeA","nodeB","getVisitedNodesInOrder","undefined","render","currentRow","createNode","push","isStop","distance","Infinity","isVisited","isVisitedSecond","previousNode","rerenderGrid","isWeight","prevStart","slice","newStart","oldStart","oldNode","newNode","prevFinish","newFinish","oldFinish","newStop","oldStop","numRows","numColumns","n","totalDistance","isShortest"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect} from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithims/dijkstra';\nimport {aStar} from '../algorithims/aStar'\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data'\nimport algData from '../data/alg-data'\nimport './mainContainer.css'\nimport { ContactlessOutlined } from '@material-ui/icons';\n\n// const START_NODE_ROW = 10;\n// const START_NODE_COL = 5;\n// const FINISH_NODE_ROW = 10;\n// const FINISH_NODE_COL = 45;\n\nexport default class MainContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start',\n            currItemObj: itemData[0],\n            currAlgObj: algData[0],\n            currAlgTab: 0,\n            currMazeAlg: 'Recursive Division Maze',\n            currMazeTab: 0,\n            startNode: [10, 5],\n            finishNode: [10, 45],\n            startIsMoving: false,\n            finishIsMoving: false,\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            generatingMaze: false,\n            visualizingAlgorithm: false\n        }\n    }\n\n    componentDidMount() {\n        const grid = renderGrid(this.state);\n        this.setState({grid});\n    }\n\n    componentWillUnmount(){\n\n    }\n\n    handleMouseDown = (row, col) => {\n        var newGrid = this.state.grid\n        if(this.state.grid[row][col].isStart){\n          this.setState({startIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.grid[row][col].isFinish){\n          this.setState({finishIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Stop'){\n          this.setState({stopIsMoving: true, isThereStop: true})\n        }\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter(row, col){\n        if (!this.state.mouseIsPressed) return;\n        var newGrid = this.state.grid;\n        if(this.state.startIsMoving){\n          newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode)\n          this.setState({startNode: [row, col]})\n        } \n        else if(this.state.finishIsMoving){\n          newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode)\n          this.setState({finishNode: [row, col]})\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        }  else if(this.state.currItemDesc === 'Stop'){\n          newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n          this.setState({prevStop: [row, col]})\n        }\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp(row, col) {\n        this.setState({mouseIsPressed: false, startIsMoving: false, finishIsMoving: false});\n    }\n\n    handleNav() {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    clearGrid() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if (\n            !(\n              (row === startNode[0] && col === startNode[1]) ||\n              (row === finishNode[0] && col === finishNode[1])\n            )\n          ) {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      var rowNum = ((window.innerHeight-25) / 25)-2\n      var colNum = (window.innerWidth-20) / 25\n      const newGrid = getInitialGrid(rowNum, colNum);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n      });\n    }\n\n    //navBar functions\n    handleItemDescChange = (e, item) => {\n      var newItem = `${item}`\n      itemData.map((_item) => {\n        if(item === _item.id){this.setState({currItemDesc: newItem, currItemObj: _item})}\n      })\n    }\n\n    handleTabs = (e, val) => {\n      this.setState({currAlgTab: val, currAlgObj: algData[val]})\n    }\n\n    handleMazeTabs = (e, val) => {\n      this.setState({currMazeTab: val})\n      console.log(val)\n    }\n\n    generateMaze = (e) => {\n      var currAlg = this.state.currMazeTab\n      \n      if(currAlg===0){\n        this.generateRecursiveDivisionMaze()\n        console.log('hi')\n      } else if(currAlg===1){\n        this.generateVerticalMaze()\n      } else if(currAlg===2){\n        this.generateHorizontalMaze()\n      } else if(currAlg===3){\n        this.generateRandomMaze()\n      }\n    }\n\n    resetGrid = (e) => {\n      this.clearGrid()\n    }\n\n    clearGrid() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      var rowNum = ((window.innerHeight-25) / 25)-2\n      var colNum = (window.innerWidth-20) / 25\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            console.log('isStartNode')\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            console.log('isfinishnode')\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n      });\n    }\n\n    // play animation\n\n    playAnimation = (e) => {\n      var currAlg = this.state.currAlgObj.id\n      if(currAlg===0){\n        this.visualizeDijkstra()\n      } else if(currAlg===1){\n        this.visualizeaStar()\n      } else if(currAlg===6){\n        this.visualizbfs()\n      } else if(currAlg===2){\n        this.visualizegbfs()\n      } else if(currAlg===7){\n        this.visualizegdfs()\n      } else if(currAlg===3){\n        this.visualizeBidirectionalGreedySearch()\n        console.log('here')\n      }\n      return\n    }\n\n    //animte dijkstra\n\n    async animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder, isSecondAnimation=false) {\n      var animationColor = ''\n      if(isSecondAnimation){\n        animationColor = 'node-target-visited'\n      }else if(!isSecondAnimation){\n        animationColor = 'node-visited'\n      }\n      var isFinishClass = ''\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if(isSecondAnimation==false && this.state.isThereStop){\n            console.log('here')\n            return\n          }\n          setTimeout(\n            () => this.animateShortestPath(nodesInShortestPathOrder),\n            i * 10\n          )\n          return;\n        }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          if(node.isFinish && this.state.isThereStop){\n            isFinishClass = 'node-finish'\n          }else if(!node.isFinish){\n            isFinishClass = ''\n          }\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            `node ${animationColor} ${isFinishClass}`;\n        }, 10 * i);\n      }\n    }\n    \n    visualizeDijkstra = () => {\n      const grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      var visitedNodesInOrder = []\n      var visitedNodesInOrderSecond = []\n      if(this.state.isThereStop){\n        visitedNodesInOrder = dijkstra(grid, startNode, stopNode)\n        visitedNodesInOrderSecond = dijkstra(this.state.grid, stopNode, finishNode, true)\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode, stopNode);\n        var waitTime = visitedNodesInOrder.length * 10\n        console.log(visitedNodesInOrder, visitedNodesInOrderSecond)\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder)\n        setTimeout(\n          () => this.animateDijkstra(visitedNodesInOrderSecond, nodesInShortestPathOrder, true),\n          waitTime\n        )\n      } else if(!this.state.isThereStop){\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder)\n      }\n    }\n\n    //animate aStar\n\n    animateaStar(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizeaStar() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    //animate breadth first search \n\n    animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizbfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    // greedy best first search\n\n    animategbfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizegbfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    // depth first search\n\n    animatedfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizegdfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    // bidirectional greedy first search\n\n    animateBidirectionalAlgorithm(\n      visitedNodesInOrderStart,\n      visitedNodesInOrderFinish,\n      nodesInShortestPathOrder,\n      isShortedPath\n    ) {\n      let len = Math.max(\n        visitedNodesInOrderStart.length,\n        visitedNodesInOrderFinish.length\n      );\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n        if (i === visitedNodesInOrderStart.length) {\n          setTimeout(() => {\n            let visitedNodesInOrder = getVisitedNodesInOrder(\n              visitedNodesInOrderStart,\n              visitedNodesInOrderFinish\n            );\n            if (isShortedPath) {\n              this.animateShortestPath(\n                nodesInShortestPathOrder,\n                visitedNodesInOrder\n              );\n            } else {\n              this.setState({ visualizingAlgorithm: false });\n            }\n          }, i * 10);\n          return;\n        }\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined)\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\n              \"node node-visited\";\n          if (nodeB !== undefined)\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\n              \"node node-visited\";\n        }, i * 10);\n      }\n    }\n\n    visualizeBidirectionalGreedySearch() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ visualizingAlgorithm: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]];\n        const finishNode = grid[_finishNode[0]][_finishNode[1]];\n        const visitedNodesInOrder = bidirectionalGreedySearch(\n          grid,\n          startNode,\n          finishNode\n        );\n        const visitedNodesInOrderStart = visitedNodesInOrder[0];\n        const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n        const isShortedPath = visitedNodesInOrder[2];\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\n          visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n          visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n        );\n        console.log('here')\n        this.animateBidirectionalAlgorithm(\n          visitedNodesInOrderStart,\n          visitedNodesInOrderFinish,\n          nodesInShortestPathOrder,\n          isShortedPath\n        );\n      }, 10);\n    }\n\n    //finish animations\n\n    animateShortestPath(nodesInShortestPathOrder) {\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path';\n        }, 50 * i);\n      }\n    }\n\n    //generate mazes\n\n    animateMaze = (walls) => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({ grid: newGrid, generatingMaze: false });\n          }, i * 10);\n          return;\n        }\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    generateRandomMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = randomMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateRecursiveDivisionMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateVerticalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = verticalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateHorizontalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = horizontalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n\n    render(){ \n        return(\n            <div className=\"main-container\">\n                {/* <button onClick={this.handleNav}>show nav</button> */}\n                <div className=\"visualizer-container\">\n                    <Visualizer \n                        state={this.state} \n                        handleMouseDown={this.handleMouseDown} \n                        handleMouseEnter={this.handleMouseEnter} \n                        handleMouseUp={this.handleMouseUp}\n                    />\n                </div>\n                <Navbar state={this.state} toggleNav={this.handleNav} resetGrid={this.resetGrid} handleMazeTabs={this.handleMazeTabs} genMaze={this.generateMaze} play={this.playAnimation} handleTabs={this.handleTabs} handleItemChange={this.handleItemDescChange} visualizeDijkstra={this.visualizeDijkstra}/>\n            </div>\n        )\n    }\n}\n\nconst renderGrid = (state) => {\n    const grid = [];\n    var rowNum = ((window.innerHeight) / 25) + 3\n    var colNum = ((window.innerWidth) / 25) + 2\n    for (let row = 0; row < rowNum; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colNum; col++) {\n        var node = createNode(col, row, state)\n        node.className = 'node'\n        currentRow.push(node);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\n\n\nconst createNode = (col, row, state) => {\n    const startNode = state.startNode\n    const finishNode = state.finishNode\n    const stopNode = state.prevStop\n    return {\n      col,\n      row,\n      isStart: row === startNode[0] && col === startNode[1],\n      isFinish: row === finishNode[0] && col === finishNode[1],\n      isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n      distance: Infinity,\n      isVisited: false,\n      isVisitedSecond: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n\n  const rerenderGrid = (state) => {\n    const grid = state.grid\n    const startNode = grid[state.startNode[0]][state.startNode[1]]\n    const finishNode = grid[state.finishNode[0]][state.finishNode[1]]\n    for(let row = 0; row < grid.length; row++){\n      var colNum = grid[row]\n      for(let col = 0; col < colNum.length; col++){\n        var node = grid[row][col]\n        if(node.isWall || node.isWeight || node.isStop){\n          node.isWall = false\n          node.isWeight = false\n          node.isStop = false\n          node.isVisited = false\n        }\n        if(node === startNode){\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-start\";\n        } else if(node === finishNode){\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-finish\";\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node\";\n        }\n      }\n    }\n    return grid\n\n  }\n\n  const getNewGridWithStart = (grid, row, col, prevStart) => {\n    const newGrid = grid.slice();\n    const newStart = newGrid[row][col];\n    const oldStart = newGrid[prevStart[0]][prevStart[1]]\n    const oldNode = {\n      ...oldStart,\n      isStart: !oldStart.isStart\n    }\n    const newNode = {\n      ...newStart,\n      isStart: !newStart.isStart,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStart[0]][prevStart[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithFinish = (grid, row, col, prevFinish) => {\n    const newGrid = grid.slice();\n    if(newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n    const newFinish = newGrid[row][col];\n    const oldFinish = newGrid[prevFinish[0]][prevFinish[1]]\n    const oldNode = {\n      ...oldFinish,\n      isFinish: !oldFinish.isFinish\n    }\n    const newNode = {\n      ...newFinish,\n      isFinish: !newFinish.isFinish,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevFinish[0]][prevFinish[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithWeightToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWeight: !node.isWeight,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n    const newGrid = grid.slice();\n    const newStop = newGrid[row][col];\n    if(prevStop.length === 0){\n      const newNode = {\n        ...newStop,\n        isStop: !newStop.isStop,\n      };\n      newGrid[row][col] = newNode;\n      return newGrid;\n    }\n    const oldStop = newGrid[prevStop[0]][prevStop[1]]\n    const oldNode = {\n      ...oldStop,\n      isStop: !oldStop.isStop\n    }\n    const newNode = {\n      ...newStop,\n      isStop: !newStop.isStop,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStop[0]][prevStop[1]] = oldNode\n    return newGrid;\n  };\n\n  const getNewGridWithMaze = (grid, walls) => {\n    let newGrid = grid.slice();\n    for (let wall of walls) {\n      let node = grid[wall[0]][wall[1]];\n      let newNode = {\n        ...node,\n        isWall: true,\n      };\n      newGrid[wall[0]][wall[1]] = newNode;\n    }\n    return newGrid;\n  };\n\n  const getInitialGrid = (numRows, numColumns) => {\n    let grid = [];\n    for (let row = 0; row < numRows; row++) {\n      let currentRow = [];\n      for (let col = 0; col < numColumns; col++) {\n        currentRow.push(createNode(row, col));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const getVisitedNodesInOrder = (\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish\n  ) => {\n    let visitedNodesInOrder = [];\n    let n = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 0; i < n; i++) {\n      if (visitedNodesInOrderStart[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n      }\n      if (visitedNodesInOrderFinish[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n      }\n    }\n    return visitedNodesInOrder;\n  };\n\n  const getGridWithoutPath = (grid) => {\n    let newGrid = grid.slice();\n    for (let row of grid) {\n      for (let node of row) {\n        let newNode = {\n          ...node,\n          distance: Infinity,\n          totalDistance: Infinity,\n          isVisited: false,\n          isVisitedSecond: false,\n          isShortest: false,\n          previousNode: null,\n          isWall: false,\n          isWeight: false,\n          isStop: false\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    return newGrid;\n  };"]},"metadata":{},"sourceType":"module"}