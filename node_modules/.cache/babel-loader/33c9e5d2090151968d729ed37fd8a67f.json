{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\";\nimport React, { Component } from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithims/dijkstra';\nimport Navbar from './navComponents/Navbar';\nimport './mainContainer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 5;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 45;\nexport default class MainContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMouseDown = (row, col) => {\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n\n    this.handleMouseEnter = (row, col) => {\n      if (!this.state.mouseIsPressed) return;\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    };\n\n    this.handleMouseUp = () => {\n      this.setState({\n        mouseIsPressed: false\n      });\n    };\n\n    this.handleNav = () => {\n      this.setState({\n        showNav: !this.state.showNav\n      });\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      showNav: false,\n      currItemDesc: 'Start node'\n    };\n  }\n\n  componentDidMount() {\n    const grid = renderGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  //nav\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra(),\n        children: \"click\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleNav,\n        children: \"show nav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-container\",\n        children: /*#__PURE__*/_jsxDEV(Visualizer, {\n          state: this.state,\n          handleMouseDown: this.handleMouseDown,\n          handleMouseEnter: this.handleMouseEnter,\n          handleMouseUp: this.handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        state: this.state,\n        visualizeDijkstra: this.visualizeDijkstra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"names":["React","Component","Visualizer","dijkstra","getNodesInShortestPathOrder","Navbar","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","MainContainer","constructor","props","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","state","grid","setState","mouseIsPressed","handleMouseEnter","handleMouseUp","handleNav","showNav","currItemDesc","componentDidMount","renderGrid","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","render","currentRow","push","createNode","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithims/dijkstra';\nimport Navbar from './navComponents/Navbar';\nimport './mainContainer.css'\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 5;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 45;\n\nexport default class MainContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start node'\n        }\n    }\n\n    componentDidMount() {\n        const grid = renderGrid();\n        this.setState({grid});\n    }\n\n    handleMouseDown = (row, col) => {\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter = (row, col) => {\n        if (!this.state.mouseIsPressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp = () => {\n        this.setState({mouseIsPressed: false});\n    }\n\n    handleNav = () => {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    //nav\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n          if (i === visitedNodesInOrder.length) {\n            setTimeout(() => {\n                this.animateShortestPath(nodesInShortestPathOrder);\n            }, 10 * i);\n            return;\n            }\n          setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n          setTimeout(() => {\n            const node = nodesInShortestPathOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node-shortest-path';\n          }, 50 * i);\n        }\n    }\n    \n    visualizeDijkstra() {\n        const {grid} = this.state;\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n\n    render(){ \n        return(\n            <div className=\"main-container\">\n                <button onClick={() => this.visualizeDijkstra()}>click</button>\n                <button onClick={this.handleNav}>show nav</button>\n                <div className=\"visualizer-container\">\n                    <Visualizer \n                        state={this.state} \n                        handleMouseDown={this.handleMouseDown} \n                        handleMouseEnter={this.handleMouseEnter} \n                        handleMouseUp={this.handleMouseUp}\n                    />\n                </div>\n                <Navbar state={this.state} visualizeDijkstra={this.visualizeDijkstra}/>\n            </div>\n        )\n    }\n}\n\nconst renderGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\nconst createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };"]},"metadata":{},"sourceType":"module"}