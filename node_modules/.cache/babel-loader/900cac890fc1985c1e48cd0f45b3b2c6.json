{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n    const grid = message.data[0];\n    const startNode = message.data[1];\n    const finishNode = message.data[2];\n    const stopNode = message.data[3];\n    console.log(message);\n    const visitedNodesInorder = dijkstra(grid, startNode, finishNode, stopNode);\n    postMessage(visitedNodesInorder);\n  });\n}); // var cout = 0\n// export function dijkstra(grid, startNode, finishNode, isStop=false, waitTime=0){\n//   cout++\n//   const visitedNodesInOrder = [];\n//   var unvisitedNodes = getAllNodes(grid)\n//   //testing to see if visitation is removed\n//   unvisitedNodes.forEach((node) => {\n//     if(node === startNode){\n//       //node.distance = 0\n//       isStop ? node.distanceSecond = 0 : node.distance = 0\n//       console.log(node, node.distance, node.distanceSecond, cout, isStop)\n//     } else {\n//       isStop ? node.distanceSecond = Infinity : node.distance = Infinity\n//     }\n//   })\n//   console.log(isStop, cout)\n//   var cout2 =0\n//   while(!!unvisitedNodes){\n//       sortNodesByDistance(unvisitedNodes, isStop)\n//       const closestNode = unvisitedNodes.shift();\n//       if(closestNode.isWall) continue;\n//       if(closestNode.distance === Infinity && isStop === false) {\n//         return visitedNodesInOrder;\n//       } else if(closestNode.distanceSecond === Infinity && cout===2) {\n//         return visitedNodesInOrder\n//       }\n//       isStop ? closestNode.isVisitedSecond = true : closestNode.isVisited = true\n//       visitedNodesInOrder.push(closestNode);\n//       if(closestNode === finishNode) return visitedNodesInOrder;\n//       updateUnvisitedNeighbors(closestNode, grid, isStop);\n//   }\n// }\n\nfunction sortNodesByDistance(unvisitedNodes, isStop) {\n  //it is not calculating second distace correctly stays at infinity\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    if (isStop === true) {\n      //console.log(cout, nodeA.distanceSecond - nodeB.distanceSecond)\n      return nodeA.distanceSecond - nodeB.distanceSecond;\n    } else if (isStop === false) {\n      //console.log(cout, nodeA.distance - nodeB.distance)\n      return nodeA.distance - nodeB.distance;\n    }\n  });\n  var distanceCheck = [];\n\n  if (isStop) {\n    unvisitedNodes.forEach(node => {\n      if (node.distanceSecond != Infinity) distanceCheck.push(node);\n    }); //console.log(distanceCheck)\n  } //console.log(unvisitedNodes, cout)\n\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isStop) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n\n  for (const neighbor of unvisitedNeighbors) {\n    //neighbor.distance = node.distance + 1;\n    isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid, isStop) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => {\n    //isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited\n    if (isStop === true) {\n      return !neighbor.isVisitedSecond;\n    } else if (isStop === false) {\n      return !neighbor.isVisited;\n    }\n  });\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  let stop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  if (stop != false) {\n    while (true) {\n      if (currentNode.isStop != null) {\n        break;\n      }\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  } else if (stop == false) {\n    while (currentNode !== null) {\n      // if(currentNode.isStart===true) break;\n      if (currentNode.isStart == true) break; //console.log(currentNode, currentNode !== null)\n\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  }\n}","map":{"version":3,"names":["self","addEventListener","message","grid","data","startNode","finishNode","stopNode","console","log","visitedNodesInorder","dijkstra","postMessage","sortNodesByDistance","unvisitedNodes","isStop","sort","nodeA","nodeB","distanceSecond","distance","distanceCheck","forEach","node","Infinity","push","updateUnvisitedNeighbors","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","length","filter","isVisitedSecond","isVisited","getAllNodes","nodes","getNodesInShortestPathOrder","stop","nodesInShortestPathOrder","currentNode","unshift","isStart"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/dijkstraWorker.js"],"sourcesContent":["\n// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n      if (!message) return;\n        \n      \n\n\n\n        const grid = message.data[0]\n        const startNode = message.data[1]\n        const finishNode = message.data[2]\n        const stopNode = message.data[3]\n        console.log(message)\n        const visitedNodesInorder = dijkstra(grid, startNode, finishNode, stopNode)\n  \n      postMessage(visitedNodesInorder);\n    });\n};\n  // var cout = 0\n  // export function dijkstra(grid, startNode, finishNode, isStop=false, waitTime=0){\n  //   cout++\n  //   const visitedNodesInOrder = [];\n  //   var unvisitedNodes = getAllNodes(grid)\n  //   //testing to see if visitation is removed\n  \n  //   unvisitedNodes.forEach((node) => {\n  //     if(node === startNode){\n  //       //node.distance = 0\n  //       isStop ? node.distanceSecond = 0 : node.distance = 0\n  //       console.log(node, node.distance, node.distanceSecond, cout, isStop)\n  //     } else {\n  //       isStop ? node.distanceSecond = Infinity : node.distance = Infinity\n  //     }\n  //   })\n  //   console.log(isStop, cout)\n  //   var cout2 =0\n  //   while(!!unvisitedNodes){\n  //       sortNodesByDistance(unvisitedNodes, isStop)\n  //       const closestNode = unvisitedNodes.shift();\n  \n  //       if(closestNode.isWall) continue;\n  \n  //       if(closestNode.distance === Infinity && isStop === false) {\n  //         return visitedNodesInOrder;\n  //       } else if(closestNode.distanceSecond === Infinity && cout===2) {\n  //         return visitedNodesInOrder\n  //       }\n  \n  //       isStop ? closestNode.isVisitedSecond = true : closestNode.isVisited = true\n  //       visitedNodesInOrder.push(closestNode);\n  \n  //       if(closestNode === finishNode) return visitedNodesInOrder;\n  \n  //       updateUnvisitedNeighbors(closestNode, grid, isStop);\n  //   }\n  // }\n  \n  function sortNodesByDistance(unvisitedNodes, isStop) {\n      //it is not calculating second distace correctly stays at infinity\n      unvisitedNodes.sort((nodeA, nodeB) => {\n        if(isStop===true) {\n          //console.log(cout, nodeA.distanceSecond - nodeB.distanceSecond)\n          return nodeA.distanceSecond - nodeB.distanceSecond\n        } else if(isStop===false) {\n          //console.log(cout, nodeA.distance - nodeB.distance)\n          return nodeA.distance - nodeB.distance\n        }\n      });\n      var distanceCheck = []\n      if(isStop){\n        unvisitedNodes.forEach((node) => {\n          if(node.distanceSecond != Infinity) distanceCheck.push(node)\n        })\n        //console.log(distanceCheck)\n      }\n      //console.log(unvisitedNodes, cout)\n  }\n  \n  function updateUnvisitedNeighbors(node, grid, isStop) {\n      const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n      for (const neighbor of unvisitedNeighbors) {\n        //neighbor.distance = node.distance + 1;\n        isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n  \n        neighbor.previousNode = node;\n      }\n  }\n    \n  function getUnvisitedNeighbors(node, grid, isStop) {\n      const neighbors = [];\n      const {col, row} = node;\n      if (row > 0) neighbors.push(grid[row - 1][col]);\n      if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n      if (col > 0) neighbors.push(grid[row][col - 1]);\n      if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n      return neighbors.filter((neighbor) => {\n        //isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited\n        if(isStop===true){\n          return !neighbor.isVisitedSecond\n        } else if(isStop===false){\n          return !neighbor.isVisited\n        }\n      });\n  }\n  \n  function getAllNodes(grid) {\n      const nodes = [];\n      for (const row of grid) {\n        for (const node of row) {\n          nodes.push(node);\n        }\n      }\n      return nodes;\n  }\n  \n  // Backtracks from the finishNode to find the shortest path.\n  // Only works when called *after* the dijkstra method above.\n  export function getNodesInShortestPathOrder(finishNode, stop=false) {\n      const nodesInShortestPathOrder = [];\n      let currentNode = finishNode;\n      if(stop!=false){\n        while (true){\n  \n          if(currentNode.isStop!=null){\n            break\n          }\n          nodesInShortestPathOrder.unshift(currentNode);\n          currentNode = currentNode.previousNode;\n        }\n        return nodesInShortestPathOrder;\n      }else if(stop==false){\n        while (currentNode !== null) {\n          // if(currentNode.isStart===true) break;\n          if(currentNode.isStart==true) break;\n          //console.log(currentNode, currentNode !== null)\n          nodesInShortestPathOrder.unshift(currentNode);\n          currentNode = currentNode.previousNode;\n        }\n        return nodesInShortestPathOrder;\n      }\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}