{"ast":null,"code":"export function aStar(grid, startNode, endNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/aStar.js"],"names":["aStar","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","finishNode","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","length","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["export function aStar(grid, startNode, endNode){\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid)\n    while(!!unvisitedNodes){\n        sortNodesByDistance(unvisitedNodes)\n        const closestNode = unvisitedNodes.shift();\n\n        if(closestNode.isWall) continue;\n\n        if(closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n\n        if(closestNode === finishNode) return visitedNodesInOrder;\n\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"]},"metadata":{},"sourceType":"module"}