{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n\n    function bfs(grid, startNode, finishNode) {\n      let stopNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var isStop;\n\n      if (stopNode === false) {\n        isStop = salse;\n      } else {\n        isStop = false;\n      }\n\n      let visitedNodesInOrder = [];\n\n      if (isStop) {\n        // queue to keep track of the visited nodes\n        let queue = [];\n        let queueSecond = [];\n        visitedNodesInOrder = [[], []];\n        queue.push(startNode);\n\n        while (queue.length) {\n          const currNode = queue.shift(); // if the finsih node is reached then we return the visitedNodes array\n\n          if (currNode === stopNode) {\n            visitedNodesInOrder[0].push(currNode);\n            break;\n          } // we skip the nodes which are walls, start node or finish node\n\n\n          if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n            currNode.isVisited = true;\n            visitedNodesInOrder[0].push(currNode);\n            const {\n              row,\n              col\n            } = currNode;\n            updateUnvisitedNeighbours(row, col, queue, grid, currNode, false);\n          }\n        }\n\n        while (queueSecond.length) {\n          const currNode = queueSecond.shift(); // if the finsih node is reached then we return the visitedNodes array\n\n          if (currNode === finishNode) {\n            visitedNodesInOrder[1].push(currNode);\n            break;\n          } // we skip the nodes which are walls, start node or finish node\n\n\n          if (!currNode.isWall && (currNode.isStart || !currNode.isVisitedSecond)) {\n            currNode.isVisitedSecond = true;\n            visitedNodesInOrder[1].push(currNode);\n            const {\n              row,\n              col\n            } = currNode;\n            updateUnvisitedNeighbours(row, col, queue, grid, currNode, true);\n          }\n        }\n\n        return visitedNodesInOrder;\n      } else if (!isStop) {\n        // queue to keep track of the visited nodes\n        let queue = [];\n        queue.push(startNode);\n\n        while (queue.length) {\n          const currNode = queue.shift(); // if the finsih node is reached then we return the visitedNodes array\n\n          if (currNode === finishNode) {\n            visitedNodesInOrder.push(currNode);\n            return visitedNodesInOrder;\n          } // we skip the nodes which are walls, start node or finish node\n\n\n          if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n            currNode.isVisited = true;\n            visitedNodesInOrder.push(currNode);\n            const {\n              row,\n              col\n            } = currNode;\n            updateUnvisitedNeighbours(row, col, queue, grid, currNode, false);\n          }\n        }\n      }\n    } // updates the neighbours,\n    // in correspondance to the algorithm \n\n\n    function updateUnvisitedNeighbours(row, col, queue, grid, currNode) {\n      let isStop = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n      if (isStop) {\n        let next;\n\n        if (row > 0) {\n          next = grid[row - 1][col];\n\n          if (!next.isVisitedSecond) {\n            queue.push(next);\n            next.previousNodeSecond = currNode;\n          }\n        }\n\n        if (row < grid.length - 1) {\n          next = grid[row + 1][col];\n\n          if (!next.isVisitedSecond) {\n            queue.push(next);\n            next.previousNodeSecond = currNode;\n          }\n        }\n\n        if (col > 0) {\n          next = grid[row][col - 1];\n\n          if (!next.isVisitedSecond) {\n            queue.push(next);\n            next.previousNodeSecond = currNode;\n          }\n        }\n\n        if (col < grid[0].length - 1) {\n          next = grid[row][col + 1];\n\n          if (!next.isVisitedSecond) {\n            queue.push(next);\n            next.previousNodeSecond = currNode;\n          }\n        }\n      } else if (!isStop) {\n        let next;\n\n        if (row > 0) {\n          next = grid[row - 1][col];\n\n          if (!next.isVisited) {\n            queue.push(next);\n            next.previousNode = currNode;\n          }\n        }\n\n        if (row < grid.length - 1) {\n          next = grid[row + 1][col];\n\n          if (!next.isVisited) {\n            queue.push(next);\n            next.previousNode = currNode;\n          }\n        }\n\n        if (col > 0) {\n          next = grid[row][col - 1];\n\n          if (!next.isVisited) {\n            queue.push(next);\n            next.previousNode = currNode;\n          }\n        }\n\n        if (col < grid[0].length - 1) {\n          next = grid[row][col + 1];\n\n          if (!next.isVisited) {\n            queue.push(next);\n            next.previousNode = currNode;\n          }\n        }\n      }\n    }\n\n    const grid = message.data[0];\n    const startNode = message.data[1];\n    const finishNode = message.data[2];\n    const stopNode = message.data[3];\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode, stopNode);\n    postMessage(visitedNodesInOrder);\n  });\n});","map":{"version":3,"names":["self","addEventListener","message","bfs","grid","startNode","finishNode","stopNode","isStop","salse","visitedNodesInOrder","queue","queueSecond","push","length","currNode","shift","isWall","isStart","isVisited","row","col","updateUnvisitedNeighbours","isVisitedSecond","next","previousNodeSecond","previousNode","data","postMessage"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/breadthFirstSearchWorker.js"],"sourcesContent":["\n// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n      if (!message) return;\n        function bfs(grid, startNode, finishNode, stopNode=false) {\n            \n            var isStop;\n            if(stopNode===false){\n                isStop = salse\n            } else {\n                isStop = false\n            }\n            let visitedNodesInOrder = [];\n\n            if(isStop) {\n                // queue to keep track of the visited nodes\n                let queue = [];\n                let queueSecond = [];\n                visitedNodesInOrder = [[],[]]\n                queue.push(startNode);\n                while (queue.length) {\n                    const currNode = queue.shift();\n                    // if the finsih node is reached then we return the visitedNodes array\n                    if (currNode === stopNode) {\n                        visitedNodesInOrder[0].push(currNode);\n                        break\n                    }\n                    \n                    // we skip the nodes which are walls, start node or finish node\n                    if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n                        currNode.isVisited = true;\n                        visitedNodesInOrder[0].push(currNode);\n                        const { row, col } = currNode;\n                        updateUnvisitedNeighbours(row, col, queue, grid,currNode, false);\n                    }\n                }\n                while (queueSecond.length) {\n                    const currNode = queueSecond.shift();\n                    // if the finsih node is reached then we return the visitedNodes array\n                    if (currNode === finishNode) {\n                        visitedNodesInOrder[1].push(currNode);\n                        break\n                    }\n                    \n                    // we skip the nodes which are walls, start node or finish node\n                    if (!currNode.isWall && (currNode.isStart || !currNode.isVisitedSecond)) {\n                        currNode.isVisitedSecond = true;\n                        visitedNodesInOrder[1].push(currNode);\n                        const { row, col } = currNode;\n                        updateUnvisitedNeighbours(row, col, queue, grid,currNode, true);\n                    }\n                }\n                return visitedNodesInOrder\n\n            } else if(!isStop) {\n                // queue to keep track of the visited nodes\n                let queue = [];\n                queue.push(startNode);\n                while (queue.length) {\n                    const currNode = queue.shift();\n                    // if the finsih node is reached then we return the visitedNodes array\n                    if (currNode === finishNode) {\n                        visitedNodesInOrder.push(currNode);\n                        return visitedNodesInOrder;\n                    }\n                    \n                    // we skip the nodes which are walls, start node or finish node\n                    if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n                        currNode.isVisited = true;\n                        visitedNodesInOrder.push(currNode);\n                        const { row, col } = currNode;\n                        updateUnvisitedNeighbours(row, col, queue, grid,currNode, false);\n                    }\n                }\n            }\n  \n        }\n        \n        // updates the neighbours,\n        // in correspondance to the algorithm \n        function updateUnvisitedNeighbours(row, col, queue, grid, currNode, isStop=false) {\n\n            if(isStop) {\n                let next;\n                if (row > 0) {\n                  next = grid[row - 1][col];\n                  if (!next.isVisitedSecond) {\n                    queue.push(next);\n                    next.previousNodeSecond = currNode;\n                  }\n                }\n                if (row < grid.length - 1) {\n                  next = grid[row + 1][col];\n                  if (!next.isVisitedSecond) {\n                    queue.push(next);\n                    next.previousNodeSecond = currNode;\n                  }\n                }\n                if (col > 0) {\n                  next = grid[row][col - 1];\n                  if (!next.isVisitedSecond) {\n                    queue.push(next);\n                    next.previousNodeSecond = currNode;\n                  }\n                }\n                if (col < grid[0].length - 1) {\n                  next = grid[row][col + 1];\n                  if (!next.isVisitedSecond) {\n                    queue.push(next);\n                    next.previousNodeSecond = currNode;\n                  }\n                }\n            } else if(!isStop) {\n                let next;\n                if (row > 0) {\n                  next = grid[row - 1][col];\n                  if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                  }\n                }\n                if (row < grid.length - 1) {\n                  next = grid[row + 1][col];\n                  if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                  }\n                }\n                if (col > 0) {\n                  next = grid[row][col - 1];\n                  if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                  }\n                }\n                if (col < grid[0].length - 1) {\n                  next = grid[row][col + 1];\n                  if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                  }\n                }\n            }\n      }\n\n        const grid = message.data[0]\n        const startNode = message.data[1]\n        const finishNode = message.data[2]\n        const stopNode = message.data[3]\n\n        const visitedNodesInOrder = bfs(grid, startNode, finishNode, stopNode)\n\n        postMessage(visitedNodesInOrder)\n    })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}