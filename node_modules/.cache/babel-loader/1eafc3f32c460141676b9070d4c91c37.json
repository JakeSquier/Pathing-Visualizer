{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\";\nimport React, { Component, useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { getNodesInShortestPathOrder } from '../workers/dijkstraWorker';\nimport { aStar } from '../algorithims/aStar';\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport NavTop from './navComponents/topNav';\nimport itemData from '../data/item-data';\nimport algData from '../data/alg-data';\nimport pathGrabWorker from '../workers/pathGrabWorker';\nimport _dijkstraWorker from \"../workers/dijkstraWorker\";\nimport aStarWorker from '../workers/aStarWorker';\nimport greedyBestFirstSearchWorker from '../workers/greedyBestFirstSearchWorker';\nimport breadthFirstSearchWorker from '../workers/breadthFirstSearchWorker';\nimport depthFirstSearchWorker from '../workers/depthFirstSearchWorker';\nimport WebWorker from \"../workers/workerSetup\";\nimport './mainContainer.css';\nimport { Message } from '@material-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar maxProgressVal = 100;\nvar currProgressVal = 0;\nexport default class MainContainer extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.handleWindowResize = () => {\n      console.log('changing');\n    };\n\n    this.handleMouseDown = (row, col) => {\n      var newGrid = this.state.grid;\n      var node = newGrid[row][col];\n      if (this.state.visualizingAlgorithm) return;\n\n      if (this.state.grid[row][col].isStart) {\n        this.setState({\n          startIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.grid[row][col].isFinish) {\n        this.setState({\n          finishIsMoving: true\n        });\n        newGrid = this.state.grid;\n        console.log(newGrid[row][col]);\n      } else if (this.state.currItemDesc === 'Stop') {\n        this.setState({\n          stopIsMoving: true,\n          isThereStop: true\n        });\n      } else if (this.state.currItemDesc === 'Wall' && !node.isStart && !node.isFinish && !node.isStop) {\n        newGrid = getNewGridWithWallToggled(newGrid, row, col);\n      }\n\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n\n    this.handleMouseEnter = (row, col) => {\n      if (!this.state.mouseIsPressed) return;\n      var newGrid = this.state.grid;\n      var node = newGrid[row][col];\n      var nodeEl = document.getElementById(`node-${node.row}-${node.col}`);\n      if (node.isStart || node.isStop || node.isFinish || this.state.visualizingAlgorithm) return;\n\n      if (this.state.startIsMoving) {\n        newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode);\n        this.setState({\n          startNode: [row, col]\n        });\n      } else if (this.state.finishIsMoving) {\n        newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode);\n        this.setState({\n          finishNode: [row, col]\n        });\n      } else if (this.state.currItemDesc === 'Stop') {\n        newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n        this.setState({\n          prevStop: [row, col]\n        });\n      } else if (this.state.currItemDesc === 'Wall' && !node.isStart && !node.isFinish && !node.isStop) {\n        newGrid = getNewGridWithWallToggled(newGrid, row, col);\n      }\n\n      this.setState({\n        grid: newGrid\n      });\n    };\n\n    this.handleMouseUp = (row, col) => {\n      this.setState({\n        mouseIsPressed: false,\n        startIsMoving: false,\n        finishIsMoving: false\n      });\n    };\n\n    this.handleNav = () => {\n      this.setState({\n        showNav: !this.state.showNav\n      });\n    };\n\n    this.handleItemDescChange = (e, item) => {\n      var newItem = `${item}`;\n      itemData.map(_item => {\n        if (item === _item.id) {\n          this.setState({\n            currItemDesc: newItem,\n            currItemObj: _item\n          });\n        }\n      });\n    };\n\n    this.handleTabs = (e, val) => {\n      this.setState({\n        currAlgTab: val,\n        currAlgObj: algData[val]\n      });\n    };\n\n    this.handleMazeTabs = (e, val) => {\n      this.setState({\n        currMazeTab: val\n      });\n      console.log(val);\n    };\n\n    this.handleSpeedTabs = (e, val) => {\n      console.log(e, val);\n      this.setState({\n        animationSpeed: val\n      });\n    };\n\n    this.generateMaze = e => {\n      var currAlg = this.state.currMazeTab;\n\n      if (currAlg === 0) {\n        this.generateRecursiveDivisionMaze();\n      } else if (currAlg === 1) {\n        this.generateVerticalMaze();\n      } else if (currAlg === 2) {\n        this.generateHorizontalMaze();\n      } else if (currAlg === 3) {\n        this.generateRandomMaze();\n      }\n    };\n\n    this.resetGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      document.getElementsByClassName('progress')[0].style.width = '0%';\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = this.state.grid;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n      const stopNode = this.state.isThereStop ? this.state.prevStop : false;\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if (row === startNode[0] && col === startNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if (row === finishNode[0] && col === finishNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else if (stopNode !== false && row === stopNode[0] && col === stopNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-stop\";\n          } else if (grid[row][col].isWall) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-wall\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n\n      const newGrid = getGridWithoutPath(this.state.grid, true);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false\n      });\n    };\n\n    this.clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      document.getElementsByClassName('progress')[0].style.width = '0%';\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = this.state.grid;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if (row === startNode[0] && col === startNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if (row === finishNode[0] && col === finishNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n        prevStop: [],\n        isThereStop: false\n      });\n    };\n\n    this.playAnimation = e => {\n      var currAlg = this.state.currAlgObj.id;\n      this.setState({\n        prevStart: this.state.startNode,\n        prevFinish: this.state.finishNode,\n        prevAlg: this.state.AlgObj\n      });\n\n      if (currAlg === 0) {\n        this.visualizeDijkstra();\n      } else if (currAlg === 1) {\n        this.visualizeaStar();\n      } else if (currAlg === 4) {\n        this.visualizbfs();\n      } else if (currAlg === 2) {\n        this.visualizegbfs();\n      } else if (currAlg === 5) {\n        this.visualizedfs();\n      } else if (currAlg === 3) {\n        this.visualizeBidirectionalGreedySearch();\n      }\n\n      return;\n    };\n\n    this.handleProgressSetup = (isThereStop, isSecondAnimation, animationSpeed, animationDuration) => {\n      const progressBar = document.getElementById(`progressBar`);\n      progressBar.className = 'progress progress-no-stop';\n\n      if (!isThereStop) {\n        progressBar.className = 'progress progress-no-stop-anime';\n        progressBar.style.animationDuration = `${animationDuration * animationSpeed / 1000}s`;\n        progressBar.addEventListener('animationend', () => {\n          progressBar.classList.remove('progress-no-stop-anime');\n          progressBar.className = 'progress progress-no-stop';\n        });\n        return 100 / animationDuration;\n      } else if (!isSecondAnimation && isThereStop) {\n        progressBar.className = 'progress progress-no-stop-anime';\n        progressBar.style.animationDuration = `${animationDuration * animationSpeed / 1000}s`;\n        progressBar.addEventListener('animationend', () => {\n          progressBar.classList.remove('progress-no-stop-anime');\n          progressBar.className = 'progress progress-no-stop';\n        });\n        return 50 / animationDuration;\n      } else if (isSecondAnimation && isThereStop) {\n        progressBar.className = 'progress progress-stop-anime';\n        progressBar.style.animationDuration = `${animationDuration * animationSpeed / 1000}s`;\n        progressBar.addEventListener('animationend', () => {\n          progressBar.classList.remove('progress-stop-anime');\n          progressBar.className = 'progress progress-stop';\n        });\n        return 50 / animationDuration;\n      }\n    };\n\n    this.animateDijkstra = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall) {\n      let animationSpeed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n      let isThereStop = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n      _this.setState({\n        visualizingAlgorithm: true\n      }); //progressTracker\n\n\n      const progress = $(\"#progressBar\");\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizeDijkstra = () => {\n      this.dijkstraWorker = new WebWorker(_dijkstraWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        var nodesInShortestPathOrder = [];\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.dijkstraWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                var nodesInShortestPathOrder;\n\n                if (messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                  nodesInShortestPathOrder = [startNode, stopNode, finishNode];\n                } else if (messageTwo.data[0][0] === false) {\n                  nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]];\n                } else if (messageTwo.data[1][0] === false) {\n                  console.log(messageTwo.data[1][0]);\n                  nodesInShortestPathOrder = [...messageTwo.data[0], finishNode];\n                } else {\n                  nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]];\n                }\n\n                this.animateDijkstra(message.data[0], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animateDijkstra, message.data[0].length * this.state.animationSpeed, message.data[1], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, false]);\n        this.dijkstraWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data;\n            this.animateDijkstra(message.data, nodesInShortestPathOrder, message.data.length, this.state.animationSpeed, this.state.isThereStop);\n          });\n        });\n      }\n    };\n\n    this.animateaStar = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed, isThereStop) {\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n      _this.setState({\n        visualizingAlgorithm: true\n      }); //progress tracker\n\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizeaStar = () => {\n      this.aStarWorker = new WebWorker(aStarWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        this.aStarWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.aStarWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                var nodesInShortestPathOrder;\n\n                if (messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                  nodesInShortestPathOrder = [startNode, stopNode, finishNode];\n                } else if (messageTwo.data[0][0] === false) {\n                  nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]];\n                } else if (messageTwo.data[1][0] === false) {\n                  console.log(messageTwo.data[1][0]);\n                  nodesInShortestPathOrder = [...messageTwo.data[0], finishNode];\n                } else {\n                  nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]];\n                }\n\n                this.animateaStar(message.data[0], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animateaStar, message.data[0].length * this.state.animationSpeed, message.data[1], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.aStarWorker.postMessage([grid, startNode, finishNode, false]);\n        this.aStarWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data;\n            this.animateaStar(message.data, nodesInShortestPathOrder, message.data.length, this.state.animationSpeed, this.state.isThereStop, false);\n          });\n        });\n      }\n    };\n\n    this.animatebfs = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed, isThereStop) {\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n      _this.setState({\n        visualizingAlgorithm: true\n      }); //progress tracker\n\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationSpeed * animationStall, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizbfs = () => {\n      this.breadthFirstSearchWorker = new WebWorker(breadthFirstSearchWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        var nodesInShortestPathOrder = [];\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.breadthFirstSearchWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                var nodesInShortestPathOrder;\n\n                if (messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                  nodesInShortestPathOrder = [startNode, stopNode, finishNode];\n                } else if (messageTwo.data[0][0] === false) {\n                  nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]];\n                } else if (messageTwo.data[1][0] === false) {\n                  console.log(messageTwo.data[1][0]);\n                  nodesInShortestPathOrder = [...messageTwo.data[0], finishNode];\n                } else {\n                  nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]];\n                }\n\n                this.animatebfs(message.data[0], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animatebfs, message.data[0].length * this.state.animationSpeed, message.data[1], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n        this.breadthFirstSearchWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data;\n            this.animatebfs(message.data, nodesInShortestPathOrder, message.data.length, this.state.animationSpeed, false);\n          });\n        });\n      }\n    };\n\n    this.animategbfs = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed, isThereStop) {\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n      _this.setState({\n        visualizingAlgorithm: true\n      }); //progress tracker\n\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizegbfs = () => {\n      this.greedyBestFirstSearchWorker = new WebWorker(greedyBestFirstSearchWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.greedyBestFirstSearchWorker.addEventListener('message', message => {\n          console.log(message.data);\n\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              const animateTime = (message, messageTwo) => {\n                var nodesInShortestPathOrder;\n\n                if (messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                  nodesInShortestPathOrder = [startNode, stopNode, finishNode];\n                } else if (messageTwo.data[0][0] === false) {\n                  nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]];\n                } else if (messageTwo.data[1][0] === false) {\n                  console.log(messageTwo.data[1][0]);\n                  nodesInShortestPathOrder = [...messageTwo.data[0], finishNode];\n                } else {\n                  nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]];\n                }\n\n                this.animategbfs(message.data[0], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animategbfs, message.data[0].length * this.state.animationSpeed, message.data[1], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n      } else if (!this.state.isThereStop) {\n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n        this.greedyBestFirstSearchWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data;\n            this.animategbfs(message.data, nodesInShortestPathOrder, message.data.length, this.state.animationSpeed, this.state.isThereStop, false);\n          });\n        });\n      }\n    };\n\n    this.animatedfs = function (visitedNodesInOrder, nodesInShortestPathOrder, animationStall, animationSpeed, isThereStop) {\n      let isSecondAnimation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited';\n\n      _this.setState({\n        visualizingAlgorithm: true\n      }); //progress tracker\n\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n\n      var integralVal = _this.handleProgressSetup(isThereStop, isSecondAnimation, animationSpeed, visitedNodesInOrder.length);\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if (isSecondAnimation && isThereStop) return;\n          setTimeout(_this.animateShortestPath, animationStall * animationSpeed, nodesInShortestPathOrder);\n          return;\n        }\n\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n          progress.width(`+=${integralVal}%`);\n        }, animationSpeed * i);\n      }\n    };\n\n    this.visualizedfs = () => {\n      this.depthFirstSearchWorker = new WebWorker(depthFirstSearchWorker);\n      this.pathGrabWorker = new WebWorker(pathGrabWorker);\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n\n      if (this.state.isThereStop) {\n        var nodesInShortestPathOrder = [];\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode]);\n        this.depthFirstSearchWorker.addEventListener('message', message => {\n          const animateTiming = async message => {\n            this.pathGrabWorker.postMessage([message.data, true]);\n            this.pathGrabWorker.addEventListener('message', messageTwo => {\n              console.log([...message.data[0], ...message.data[1]]);\n\n              const animateTime = (message, messageTwo) => {\n                var nodesInShortestPathOrder;\n\n                if (messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                  nodesInShortestPathOrder = [startNode, stopNode, finishNode];\n                } else if (messageTwo.data[0][0] === false) {\n                  nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]];\n                } else if (messageTwo.data[1][0] === false) {\n                  console.log(messageTwo.data[1][0]);\n                  nodesInShortestPathOrder = [...messageTwo.data[0], finishNode];\n                } else {\n                  nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]];\n                }\n\n                this.animatedfs(message.data[0], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, false);\n                setTimeout(this.animatedfs, message.data[0].length * this.state.animationSpeed, message.data[1], nodesInShortestPathOrder, message.data[0].length + message.data[1].length, this.state.animationSpeed, this.state.isThereStop, true);\n              };\n\n              animateTime(message, messageTwo);\n            });\n          };\n\n          animateTiming(message);\n        });\n        return;\n      } else if (!this.state.isThereStop) {\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, false]);\n        this.depthFirstSearchWorker.addEventListener('message', message => {\n          this.pathGrabWorker.postMessage([message.data, false]);\n          this.pathGrabWorker.addEventListener('message', messageTwo => {\n            var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data;\n            this.animatedfs(message.data, nodesInShortestPathOrder, message.data.length, this.state.animationSpeed, this.state.isThereStop, false);\n          });\n        });\n      }\n    };\n\n    this.animateBidirectionalAlgorithm = (visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath, animationSpeed) => {\n      this.setState({\n        visualizingAlgorithm: true\n      }); //progress tracker\n\n      const progress = $(\"#progressBar\");\n      progress.replaceWith($(\"#progressBar\")).clone(true);\n      var integralVal = this.handleProgressSetup(this.state.isThereStop, false, animationSpeed, visitedNodesInOrderStart.length);\n      let len = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n\n        if (i === visitedNodesInOrderStart.length) {\n          setTimeout(() => {\n            let visitedNodesInOrder = getVisitedNodesInOrder(visitedNodesInOrderStart, visitedNodesInOrderFinish);\n\n            if (isShortedPath) {\n              this.animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\n            } else {\n              this.setState({\n                visualizingAlgorithm: false\n              });\n            }\n          }, i * animationSpeed);\n          return;\n        }\n\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined) {\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = \"node node-visited\";\n          }\n\n          if (nodeB !== undefined) {\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = \"node node-visited\";\n          }\n\n          progress.width(`+=${integralVal * 2}%`);\n        }, i * animationSpeed);\n      }\n    };\n\n    this.visualizeBidirectionalGreedySearch = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      this.setState({\n        visualizingAlgorithm: true\n      });\n      setTimeout(() => {\n        const {\n          grid\n        } = this.state;\n        const _startNode = this.state.startNode;\n        const _finishNode = this.state.finishNode;\n        const startNode = grid[_startNode[0]][_startNode[1]];\n        const finishNode = grid[_finishNode[0]][_finishNode[1]];\n        const visitedNodesInOrder = bidirectionalGreedySearch(grid, startNode, finishNode);\n        const visitedNodesInOrderStart = visitedNodesInOrder[0];\n        const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n        const isShortedPath = visitedNodesInOrder[2];\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1], visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]);\n        this.setState({\n          maxProgressVal: visitedNodesInOrderStart.length + visitedNodesInOrderFinish.length - 2\n        });\n        this.animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath, this.state.animationSpeed);\n      }, this.state.animationSpeed);\n    };\n\n    this.animateShortestPath = nodesInShortestPathOrder => {\n      const startNode = this.state.grid[this.state.startNode[0]][this.state.startNode[1]];\n      const finishNode = this.state.grid[this.state.finishNode[0]][this.state.finishNode[1]];\n      const stopNode = this.state.isThereStop ? this.state.grid[this.state.prevStop[0]][this.state.prevStop[1]] : [];\n\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          var currObj = document.getElementById(`node-${node.row}-${node.col}`);\n\n          if (node.row === startNode.row && node.col === startNode.col) {\n            currObj.className = 'node node-shortest-path node-shortest-path-start';\n          } else if (node.row === finishNode.row && node.col === finishNode.col) {\n            currObj.className = 'node node-shortest-path node-shortest-path-finish';\n          } else if (this.state.isThereStop && node.row === stopNode.row && node.col === stopNode.col) {\n            currObj.className = 'node node-shortest-path node-shortest-path-stop';\n          } else if (document.getElementById(`node-${node.row}-${node.col}`).className.includes('node-shortest-path')) {\n            $(`#node-${node.row}-${node.col}`).replaceWith($(`#node-${node.row}-${node.col}`).clone(true));\n          } else {\n            currObj.className = 'node node-shortest-path';\n          }\n        }, 50 * i);\n      }\n    };\n\n    this.animateMaze = walls => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {//this.clearGrid();\n          }, i * 10);\n          return;\n        }\n\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true;\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      showNav: false,\n      currItemDesc: 'Start',\n      currItemObj: itemData[0],\n      currAlgObj: algData[0],\n      currAlgTab: 0,\n      lcurrMazeAlg: 'Recursive Division Maze',\n      currMazeTab: 0,\n      startNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), 1],\n      finishNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), Math.floor(Math.floor(window.innerWidth / 25)) - 2],\n      startIsMoving: false,\n      finishIsMoving: false,\n      isThereStop: false,\n      stopIsMoving: false,\n      prevStop: [],\n      generatingMaze: false,\n      visualizingAlgorithm: false,\n      animationSpeed: 10\n    };\n  }\n\n  //reminder!!\n  // row is width\n  // col is height\n  componentDidMount() {\n    window.addEventListener('resize', e => {\n      this.setState({\n        startNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), 1],\n        finishNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), Math.floor(Math.floor(window.innerWidth / 25)) - 2],\n        isThereStop: false,\n        stopIsMoving: false,\n        prevStop: [],\n        prevStart: [],\n        prevFinish: [],\n        prevAlg: {}\n      });\n      this.clearGrid();\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = renderGrid(this.state, rowNum, colNum, false);\n      this.setState({\n        grid\n      });\n    });\n    const grid = renderGrid(this.state, Math.floor(window.innerHeight / 25), Math.floor(window.innerWidth / 25));\n    this.setState({\n      grid: grid\n    });\n  }\n\n  generateRandomMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false;\n      const walls = this.state.isThereStop ? randomMaze(grid, startNode, finishNode, true, stopNode) : randomMaze(grid, startNode, finishNode, false);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateRecursiveDivisionMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false;\n      const walls = this.state.isThereStop ? recursiveDivisionMaze(grid, startNode, finishNode, true, stopNode) : recursiveDivisionMaze(grid, startNode, finishNode, false, stopNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateVerticalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false;\n      const walls = this.state.isThereStop ? verticalMaze(grid, startNode, finishNode, true, stopNode) : verticalMaze(grid, startNode, finishNode, false);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateHorizontalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false;\n      const walls = this.state.isThereStop ? horizontalMaze(grid, startNode, finishNode, true, stopNode) : horizontalMaze(grid, startNode, finishNode, false);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(NavTop, {\n        state: this.state,\n        currProgressVal: currProgressVal,\n        maxProgressVal: maxProgressVal,\n        handleSpeedTabs: this.handleSpeedTabs,\n        clearGrid: this.clearGrid,\n        resetGrid: this.resetGrid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1237,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-container\",\n        children: /*#__PURE__*/_jsxDEV(Visualizer, {\n          state: this.state,\n          handleMouseDown: this.handleMouseDown,\n          handleMouseEnter: this.handleMouseEnter,\n          handleMouseUp: this.handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1239,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        state: this.state,\n        toggleNav: this.handleNav,\n        replayAnimation: this.replayAnimation,\n        resetGrid: this.resetGrid,\n        handleMazeTabs: this.handleMazeTabs,\n        genMaze: this.generateMaze,\n        play: this.playAnimation,\n        handleTabs: this.handleTabs,\n        handleItemChange: this.handleItemDescChange,\n        visualizeDijkstra: this.visualizeDijkstra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1246,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1235,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n  const grid = [];\n  var rowNum = _rowNum;\n  var colNum = _colNum;\n\n  for (let row = 0; row < rowNum; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < colNum; col++) {\n      var node = createNode(col, row, state);\n      node.className = 'node';\n      currentRow.push(node);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row, state) => {\n  const startNode = state.startNode;\n  const finishNode = state.finishNode;\n  const stopNode = state.prevStop;\n  return {\n    col,\n    row,\n    isStart: row === startNode[0] && col === startNode[1],\n    isFinish: row === finishNode[0] && col === finishNode[1],\n    isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : false,\n    isWall: false,\n    previousNode: null,\n    previousNodeSecond: null,\n    isVisited: false,\n    isVisitedSecond: false,\n    distance: Infinity,\n    distanceSecond: Infinity\n  };\n};\n\nconst getNewGridWithStart = (grid, row, col, prevStart) => {\n  const newGrid = grid.slice();\n  const newStart = newGrid[row][col];\n  const oldStart = newGrid[prevStart[0]][prevStart[1]];\n  const oldNode = { ...oldStart,\n    isStart: !oldStart.isStart\n  };\n  const newNode = { ...newStart,\n    isStart: !newStart.isStart,\n    isWall: false\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStart[0]][prevStart[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinish = (grid, row, col, prevFinish) => {\n  const newGrid = grid.slice();\n  const newFinish = newGrid[row][col];\n  const oldFinish = newGrid[prevFinish[0]][prevFinish[1]];\n  const oldNode = { ...oldFinish,\n    isFinish: !oldFinish.isFinish\n  };\n  const newNode = { ...newFinish,\n    isFinish: !newFinish.isFinish,\n    isWall: false\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevFinish[0]][prevFinish[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n  const newGrid = grid.slice();\n  const newStop = newGrid[row][col];\n\n  if (prevStop.length === 0) {\n    const newNode = { ...newStop,\n      isStop: !newStop.isStop,\n      isWall: false\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  const oldStop = newGrid[prevStop[0]][prevStop[1]];\n  const oldNode = { ...oldStop,\n    isStop: !oldStop.isStop\n  };\n  const newNode = { ...newStop,\n    isStop: !newStop.isStop,\n    isWall: false\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStop[0]][prevStop[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = { ...node,\n      isWall: true\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n\n  return newGrid;\n};\n\nconst getVisitedNodesInOrder = (visitedNodesInOrderStart, visitedNodesInOrderFinish) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n\n  return visitedNodesInOrder;\n};\n\nconst getGridWithoutPath = function (grid) {\n  let minorReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let newGrid = grid.slice();\n\n  for (let row of grid) {\n    for (let node of row) {\n      var wall = false;\n      var stop = false;\n\n      if (minorReset) {\n        if (grid[node.row][node.col].isWall) wall = true;\n        if (grid[node.row][node.col].isStop) stop = true;\n      }\n\n      let newNode = { ...node,\n        distance: Infinity,\n        distanceSecond: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isVisitedSecond: false,\n        isShortest: false,\n        previousNode: null,\n        isWall: wall,\n        isWeight: false,\n        isStop: stop\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","useState","useEffect","$","Visualizer","getNodesInShortestPathOrder","aStar","breadthFirstSearch","greedyBFS","depthFirstSearch","randomMaze","verticalMaze","horizontalMaze","recursiveDivisionMaze","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","Navbar","NavTop","itemData","algData","pathGrabWorker","_dijkstraWorker","aStarWorker","greedyBestFirstSearchWorker","breadthFirstSearchWorker","depthFirstSearchWorker","WebWorker","Message","maxProgressVal","currProgressVal","MainContainer","constructor","props","handleWindowResize","console","log","handleMouseDown","row","col","newGrid","state","grid","node","visualizingAlgorithm","isStart","setState","startIsMoving","isFinish","finishIsMoving","currItemDesc","stopIsMoving","isThereStop","isStop","getNewGridWithWallToggled","mouseIsPressed","handleMouseEnter","nodeEl","document","getElementById","getNewGridWithStart","startNode","getNewGridWithFinish","finishNode","getNewGridWithStopToggled","prevStop","handleMouseUp","handleNav","showNav","handleItemDescChange","e","item","newItem","map","_item","id","currItemObj","handleTabs","val","currAlgTab","currAlgObj","handleMazeTabs","currMazeTab","handleSpeedTabs","animationSpeed","generateMaze","currAlg","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","generateRandomMaze","resetGrid","generatingMaze","getElementsByClassName","style","width","rowNum","Math","floor","window","innerHeight","colNum","innerWidth","stopNode","length","className","isWall","getGridWithoutPath","clearGrid","playAnimation","prevStart","prevFinish","prevAlg","AlgObj","visualizeDijkstra","visualizeaStar","visualizbfs","visualizegbfs","visualizedfs","visualizeBidirectionalGreedySearch","handleProgressSetup","isSecondAnimation","animationDuration","progressBar","addEventListener","classList","remove","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","animationStall","animationColor","progress","integralVal","i","setTimeout","animateShortestPath","dijkstraWorker","START_NODE","FINISH_NODE","STOP_NODE","postMessage","message","animateTiming","data","messageTwo","animateTime","animateaStar","replaceWith","clone","animatebfs","animategbfs","animatedfs","animateBidirectionalAlgorithm","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","len","max","nodeA","nodeB","getVisitedNodesInOrder","undefined","_startNode","_finishNode","currObj","includes","animateMaze","walls","wall","lcurrMazeAlg","componentDidMount","renderGrid","render","replayAnimation","_rowNum","_colNum","currentRow","createNode","push","previousNode","previousNodeSecond","isVisited","isVisitedSecond","distance","Infinity","distanceSecond","slice","newStart","oldStart","oldNode","newNode","newFinish","oldFinish","newStop","oldStop","getNewGridWithMaze","n","minorReset","stop","totalDistance","isShortest","isWeight"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"sourcesContent":["import React, {Component, useState, useEffect} from 'react';\nimport $ from 'jquery' \nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport { getNodesInShortestPathOrder } from '../workers/dijkstraWorker';\nimport {aStar} from '../algorithims/aStar'\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport NavTop from './navComponents/topNav';\nimport itemData from '../data/item-data'\nimport algData from '../data/alg-data'\nimport pathGrabWorker from '../workers/pathGrabWorker';\nimport _dijkstraWorker from \"../workers/dijkstraWorker\";\nimport aStarWorker from '../workers/aStarWorker'\nimport greedyBestFirstSearchWorker from '../workers/greedyBestFirstSearchWorker';\nimport breadthFirstSearchWorker from '../workers/breadthFirstSearchWorker';\nimport depthFirstSearchWorker from '../workers/depthFirstSearchWorker';\nimport WebWorker from \"../workers/workerSetup\";\nimport './mainContainer.css'\nimport { Message } from '@material-ui/icons';\n\nvar maxProgressVal = 100\nvar currProgressVal = 0\n\nexport default class MainContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start',\n            currItemObj: itemData[0],\n            currAlgObj: algData[0],\n            currAlgTab: 0,\n            lcurrMazeAlg: 'Recursive Division Maze',\n            currMazeTab: 0,\n            startNode: [Math.floor(Math.floor(window.innerHeight/25)/2), 1],\n            finishNode: [Math.floor(Math.floor(window.innerHeight/25)/2), Math.floor(Math.floor(window.innerWidth/25))-2],\n            startIsMoving: false,\n            finishIsMoving: false,\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            generatingMaze: false,\n            visualizingAlgorithm: false,\n            animationSpeed: 10,\n        }\n    }\n\n    handleWindowResize = () => {\n      console.log('changing')\n    }\n    //reminder!!\n    // row is width\n    // col is height\n    componentDidMount() {\n        window.addEventListener('resize', (e) => {\n          this.setState({\n            startNode: [Math.floor(Math.floor(window.innerHeight/25)/2), 1],\n            finishNode: [Math.floor(Math.floor(window.innerHeight/25)/2), Math.floor(Math.floor(window.innerWidth/25))-2],\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            prevStart: [],\n            prevFinish: [],\n            prevAlg: {}\n          })\n\n          this.clearGrid();\n          var rowNum = Math.floor((window.innerHeight / 25))\n          var colNum = Math.floor((window.innerWidth / 25))\n          const grid = renderGrid(this.state, rowNum, colNum, false)\n          this.setState({grid});\n      })\n\n      const grid = renderGrid(this.state, Math.floor((window.innerHeight / 25)), Math.floor((window.innerWidth / 25)))\n      this.setState({grid: grid});\n    }\n\n    handleMouseDown = (row, col) => {\n\n        var newGrid = this.state.grid\n        var node = newGrid[row][col]\n\n        if(this.state.visualizingAlgorithm) return\n\n        if(this.state.grid[row][col].isStart){\n          this.setState({startIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.grid[row][col].isFinish){\n          this.setState({finishIsMoving: true})\n          newGrid = this.state.grid\n          console.log(newGrid[row][col])\n        } else if(this.state.currItemDesc === 'Stop'){\n          this.setState({stopIsMoving: true, isThereStop: true})\n        } else if(this.state.currItemDesc === 'Wall' && (!node.isStart && !node.isFinish && !node.isStop)) {\n          newGrid = getNewGridWithWallToggled( newGrid, row, col)   \n        }\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter = (row, col) => {\n\n        if (!this.state.mouseIsPressed) return;\n\n        var newGrid = this.state.grid;\n        var node = newGrid[row][col]\n        var nodeEl = document.getElementById(`node-${node.row}-${node.col}`)\n\n        if( node.isStart || node.isStop || node.isFinish || this.state.visualizingAlgorithm) return\n\n        if(this.state.startIsMoving){\n          newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode)\n          this.setState({startNode: [row, col]})\n        } else if(this.state.finishIsMoving){\n          newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode)\n          this.setState({finishNode: [row, col]})\n        } else if(this.state.currItemDesc === 'Stop'){\n          newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n          this.setState({prevStop: [row, col]})\n        } else if(this.state.currItemDesc === 'Wall' && (!node.isStart && !node.isFinish && !node.isStop)) {\n          newGrid = getNewGridWithWallToggled( newGrid, row, col);\n        }\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp = (row, col) => {\n        this.setState({mouseIsPressed: false, startIsMoving: false, finishIsMoving: false});\n    }\n\n    handleNav = () => {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    //navBar functions\n    handleItemDescChange = (e, item) => {\n      var newItem = `${item}`\n      itemData.map((_item) => {\n        if(item === _item.id){this.setState({currItemDesc: newItem, currItemObj: _item})}\n      })\n    }\n\n    handleTabs = (e, val) => {\n      this.setState({currAlgTab: val, currAlgObj: algData[val]})\n    }\n\n    handleMazeTabs = (e, val) => {\n      this.setState({currMazeTab: val})\n      console.log(val)\n    }\n\n    handleSpeedTabs = (e, val) => {\n      console.log(e, val)\n      this.setState({animationSpeed: val})\n    }\n\n    generateMaze = (e) => {\n      var currAlg = this.state.currMazeTab\n \n      if(currAlg===0){\n        this.generateRecursiveDivisionMaze()\n      } else if(currAlg===1){\n        this.generateVerticalMaze()\n      } else if(currAlg===2){\n        this.generateHorizontalMaze()\n      } else if(currAlg===3){\n        this.generateRandomMaze()\n      }\n    }\n\n    resetGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      document.getElementsByClassName('progress')[0].style.width = '0%'\n      var rowNum = Math.floor((window.innerHeight / 25))\n      var colNum = Math.floor((window.innerWidth / 25))\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const stopNode = this.state.isThereStop ? this.state.prevStop : false\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else if(stopNode !== false && (row === stopNode[0] && col === stopNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-stop\";\n          } else if(grid[row][col].isWall)\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-wall\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid, true);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n      });\n    }\n\n    clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      document.getElementsByClassName('progress')[0].style.width = '0%'\n      \n      var rowNum = Math.floor((window.innerHeight / 25))\n      var colNum = Math.floor((window.innerWidth / 25))\n\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n        prevStop: [],\n        isThereStop: false  \n      });\n    }\n\n    // play animation\n\n    playAnimation = (e) => {\n      var currAlg = this.state.currAlgObj.id\n      this.setState({\n        prevStart: this.state.startNode,\n        prevFinish: this.state.finishNode,\n        prevAlg: this.state.AlgObj\n      })\n      if(currAlg===0){\n        this.visualizeDijkstra()\n      } else if(currAlg===1){\n        this.visualizeaStar()\n      } else if(currAlg===4){\n        this.visualizbfs()\n      } else if(currAlg===2){\n        this.visualizegbfs()\n      } else if(currAlg===5){\n        this.visualizedfs()\n      } else if(currAlg===3){\n        this.visualizeBidirectionalGreedySearch()\n      }\n      return\n    }\n\n    handleProgressSetup = (\n      isThereStop, \n      isSecondAnimation, \n      animationSpeed,\n      animationDuration,\n    ) => {\n\n      const progressBar = document.getElementById(`progressBar`)\n      progressBar.className = 'progress progress-no-stop'\n      \n      if(!isThereStop) {\n\n        progressBar.className = 'progress progress-no-stop-anime'\n        progressBar.style.animationDuration = `${(animationDuration*animationSpeed/1000)}s`\n        progressBar.addEventListener('animationend', () => {\n          progressBar.classList.remove('progress-no-stop-anime')\n          progressBar.className = 'progress progress-no-stop'\n        })\n        return 100/animationDuration\n\n      } else if(!isSecondAnimation && isThereStop) {\n\n        progressBar.className = 'progress progress-no-stop-anime'\n        progressBar.style.animationDuration = `${(animationDuration*animationSpeed/1000)}s`\n        progressBar.addEventListener('animationend', () => {\n          progressBar.classList.remove('progress-no-stop-anime')\n          progressBar.className = 'progress progress-no-stop'\n        })\n        return 50/animationDuration\n\n      } else if(isSecondAnimation && isThereStop) {\n\n        progressBar.className = 'progress progress-stop-anime'\n        progressBar.style.animationDuration = `${(animationDuration*animationSpeed/1000)}s`\n        progressBar.addEventListener('animationend', () => {\n          progressBar.classList.remove('progress-stop-anime')\n          progressBar.className = 'progress progress-stop'\n        })\n        return 50/animationDuration\n\n      }\n    }\n\n    //animte dijkstra\n\n    animateDijkstra = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder, \n      animationStall,\n      animationSpeed=10, \n      isThereStop=false,\n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n      \n      this.setState({visualizingAlgorithm: true})\n\n      //progressTracker\n      const progress = $(\"#progressBar\")\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n        }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n            progress.width(`+=${integralVal}%`)\n          }, animationSpeed * i);\n      }\n    }\n    \n    visualizeDijkstra = () => {\n\n      this.dijkstraWorker = new WebWorker(_dijkstraWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.dijkstraWorker.addEventListener('message', (message) => {\n            \n            const animateTiming = async (message) => {\n\n                this.pathGrabWorker.postMessage([message.data, true])\n\n                this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                    const animateTime = (message, messageTwo) => {\n\n                      var nodesInShortestPathOrder;\n\n                      if(messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                        nodesInShortestPathOrder = [startNode, stopNode, finishNode]\n                      } else if(messageTwo.data[0][0] === false) {\n                        nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]]\n                      } else if(messageTwo.data[1][0] === false) {\n                        console.log(messageTwo.data[1][0])\n                        nodesInShortestPathOrder = [...messageTwo.data[0], finishNode]\n                      } else {\n                        nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]]\n                      }\n\n                      this.animateDijkstra(\n                        message.data[0], \n                        nodesInShortestPathOrder, \n                        (message.data[0].length+message.data[1].length), \n                        this.state.animationSpeed, \n                        this.state.isThereStop,\n                        false\n                      )\n\n                      setTimeout(this.animateDijkstra, \n                        message.data[0].length * this.state.animationSpeed, \n                        message.data[1], \n                        nodesInShortestPathOrder,\n                        (message.data[0].length+message.data[1].length), \n                        this.state.animationSpeed, \n                        this.state.isThereStop, \n                        true\n                      )\n                    }\n\n                    animateTime(message, messageTwo)\n                })\n            }\n            animateTiming(message)\n        })\n\n        return\n\n      } else if(!this.state.isThereStop){\n\n        this.dijkstraWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.dijkstraWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data\n\n              this.animateDijkstra(\n                message.data, \n                nodesInShortestPathOrder, \n                message.data.length, \n                this.state.animationSpeed, \n                this.state.isThereStop\n              )\n\n            })\n        })\n      }\n    }\n\n    //animate aStar\n\n    animateaStar = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder,\n      animationStall, \n      animationSpeed,\n      isThereStop, \n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      this.setState({visualizingAlgorithm: true})\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n        }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n            progress.width(`+=${integralVal}%`)\n          }, animationSpeed * i);\n      }\n    }\n\n    visualizeaStar = () => {\n\n      this.aStarWorker = new WebWorker(aStarWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      if(this.state.isThereStop) {\n        this.aStarWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.aStarWorker.addEventListener('message', (message) => {\n            \n          const animateTiming = async (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, true])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                const animateTime = (message, messageTwo) => {\n\n                  var nodesInShortestPathOrder;\n\n                  if(messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                    nodesInShortestPathOrder = [startNode, stopNode, finishNode]\n                  } else if(messageTwo.data[0][0] === false) {\n                    nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]]\n                  } else if(messageTwo.data[1][0] === false) {\n                    console.log(messageTwo.data[1][0])\n                    nodesInShortestPathOrder = [...messageTwo.data[0], finishNode]\n                  } else {\n                    nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]]\n                  }\n\n                  this.animateaStar(\n                    message.data[0], \n                    nodesInShortestPathOrder, \n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop,\n                    false\n                  )\n\n                  setTimeout(this.animateaStar, \n                    message.data[0].length * this.state.animationSpeed, \n                    message.data[1], \n                    nodesInShortestPathOrder,\n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop, \n                    true\n                  )\n                }\n\n                animateTime(message, messageTwo)\n            })\n        }\n        animateTiming(message)\n    })\n          return\n          \n      } else if(!this.state.isThereStop){\n\n          this.aStarWorker.postMessage([grid, startNode, finishNode, false])\n\n          this.aStarWorker.addEventListener('message', (message) => {\n\n              this.pathGrabWorker.postMessage([message.data, false])\n\n              this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data\n\n                this.animateaStar(\n                  message.data, \n                  nodesInShortestPathOrder, \n                  message.data.length,\n                  this.state.animationSpeed,\n                  this.state.isThereStop,\n                  false\n                )\n\n              })\n          })\n      }\n    }\n\n    //animate breadth first search \n\n    animatebfs = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder, \n      animationStall,\n      animationSpeed, \n      isThereStop,\n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      this.setState({visualizingAlgorithm: true})\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n          \n          setTimeout(this.animateShortestPath, animationSpeed*animationStall, nodesInShortestPathOrder)\n\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n          progress.width(`+=${integralVal}%`)\n        }, animationSpeed * i);\n      }\n    }\n\n    visualizbfs = () => {\n      \n      this.breadthFirstSearchWorker = new WebWorker(breadthFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.breadthFirstSearchWorker.addEventListener('message', (message) => {\n                       \n            const animateTiming = async (message) => {\n\n              this.pathGrabWorker.postMessage([message.data, true])\n\n              this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                  const animateTime = (message, messageTwo) => {\n\n                    var nodesInShortestPathOrder;\n\n                    if(messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                      nodesInShortestPathOrder = [startNode, stopNode, finishNode]\n                    } else if(messageTwo.data[0][0] === false) {\n                      nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]]\n                    } else if(messageTwo.data[1][0] === false) {\n                      console.log(messageTwo.data[1][0])\n                      nodesInShortestPathOrder = [...messageTwo.data[0], finishNode]\n                    } else {\n                      nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]]\n                    }\n\n                    this.animatebfs(\n                      message.data[0], \n                      nodesInShortestPathOrder, \n                      (message.data[0].length+message.data[1].length), \n                      this.state.animationSpeed, \n                      this.state.isThereStop,\n                      false\n                    )\n\n                    setTimeout(this.animatebfs, \n                      message.data[0].length * this.state.animationSpeed, \n                      message.data[1], \n                      nodesInShortestPathOrder,\n                      (message.data[0].length+message.data[1].length), \n                      this.state.animationSpeed, \n                      this.state.isThereStop,\n                      true\n                    )\n                  }\n\n                  animateTime(message, messageTwo)\n              })\n            }\n          animateTiming(message)\n      })\n      return\n\n      } else if(!this.state.isThereStop){\n\n        this.breadthFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.breadthFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data\n\n              this.animatebfs(\n                message.data, \n                nodesInShortestPathOrder, \n                message.data.length, \n                this.state.animationSpeed, \n                false\n              )\n            })\n        })\n      }\n    }\n\n    // greedy best first search\n\n    animategbfs = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder,\n      animationStall, \n      animationSpeed, \n      isThereStop,\n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      this.setState({visualizingAlgorithm: true})\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n          }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n            progress.width(`+=${integralVal}%`)\n          }, animationSpeed * i);\n      }\n    }\n\n    visualizegbfs = () => {\n      \n      this.greedyBestFirstSearchWorker = new WebWorker(greedyBestFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n\n      if(this.state.isThereStop) {\n\n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.greedyBestFirstSearchWorker.addEventListener('message', (message) => {\n\n          console.log(message.data)\n            \n          const animateTiming = async (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, true])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n                const animateTime = (message, messageTwo) => {\n\n                  var nodesInShortestPathOrder;\n\n                  if(messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                    nodesInShortestPathOrder = [startNode, stopNode, finishNode]\n                  } else if(messageTwo.data[0][0] === false) {\n                    nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]]\n                  } else if(messageTwo.data[1][0] === false) {\n                    console.log(messageTwo.data[1][0])\n                    nodesInShortestPathOrder = [...messageTwo.data[0], finishNode]\n                  } else {\n                    nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]]\n                  }\n\n                  this.animategbfs(\n                    message.data[0], \n                    nodesInShortestPathOrder, \n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop,\n                    false\n                  )\n\n                  setTimeout(this.animategbfs, \n                    message.data[0].length * this.state.animationSpeed, \n                    message.data[1], \n                    nodesInShortestPathOrder,\n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop, \n                    true\n                  )\n                }\n\n                animateTime(message, messageTwo)\n            })\n          }\n          animateTiming(message)\n      })\n      \n      } else if(!this.state.isThereStop) {\n        \n        this.greedyBestFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.greedyBestFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data\n\n              this.animategbfs(\n                message.data, \n                nodesInShortestPathOrder,\n                message.data.length, \n                this.state.animationSpeed, \n                this.state.isThereStop,\n                false\n              )\n\n            })\n        })\n      }\n    }\n\n    // depth first search\n\n    animatedfs = (\n      visitedNodesInOrder, \n      nodesInShortestPathOrder, \n      animationStall, \n      animationSpeed, \n      isThereStop,\n      isSecondAnimation=false\n    ) => {\n\n      var animationColor = isSecondAnimation ? animationColor = 'node-target-visited' : animationColor = 'node-visited'\n\n      this.setState({visualizingAlgorithm: true})\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        isThereStop,\n        isSecondAnimation,\n        animationSpeed,\n        visitedNodesInOrder.length\n      )\n\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n\n          if(isSecondAnimation && isThereStop) return\n\n          setTimeout(this.animateShortestPath, animationStall*animationSpeed, nodesInShortestPathOrder)\n\n          return;\n          }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor}`;\n            progress.width(`+=${integralVal}%`)\n          }, animationSpeed * i);\n      }\n    }\n\n    visualizedfs = () => {\n            \n      this.depthFirstSearchWorker = new WebWorker(depthFirstSearchWorker)\n\n      this.pathGrabWorker = new WebWorker(pathGrabWorker)\n\n      var grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      \n      if(this.state.isThereStop){\n\n        var nodesInShortestPathOrder = []\n\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, stopNode])\n\n        this.depthFirstSearchWorker.addEventListener('message', (message) => {\n            \n          const animateTiming = async (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, true])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              console.log([...message.data[0], ...message.data[1]])\n\n                const animateTime = (message, messageTwo) => {\n\n                  var nodesInShortestPathOrder;\n\n                  if(messageTwo.data[0][0] === false && messageTwo.data[1][0] === false) {\n                    nodesInShortestPathOrder = [startNode, stopNode, finishNode]\n                  } else if(messageTwo.data[0][0] === false) {\n                    nodesInShortestPathOrder = [startNode, ...messageTwo.data[1]]\n                  } else if(messageTwo.data[1][0] === false) {\n                    console.log(messageTwo.data[1][0])\n                    nodesInShortestPathOrder = [...messageTwo.data[0], finishNode]\n                  } else {\n                    nodesInShortestPathOrder = [...messageTwo.data[0], ...messageTwo.data[1]]\n                  }\n\n                  this.animatedfs(\n                    message.data[0], \n                    nodesInShortestPathOrder, \n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop,\n                    false\n                  )\n\n                  setTimeout(\n                    this.animatedfs, \n                    message.data[0].length * this.state.animationSpeed, \n                    message.data[1], \n                    nodesInShortestPathOrder,\n                    (message.data[0].length+message.data[1].length), \n                    this.state.animationSpeed, \n                    this.state.isThereStop, \n                    true\n                  )\n                }\n\n                animateTime(message, messageTwo)\n            })\n          }\n          animateTiming(message)\n      })\n        return\n\n      } else if(!this.state.isThereStop){\n\n        this.depthFirstSearchWorker.postMessage([grid, startNode, finishNode, false])\n\n        this.depthFirstSearchWorker.addEventListener('message', (message) => {\n\n            this.pathGrabWorker.postMessage([message.data, false])\n\n            this.pathGrabWorker.addEventListener('message', (messageTwo) => {\n\n              var nodesInShortestPathOrder = messageTwo.data === false ? [startNode, finishNode] : messageTwo.data\n\n              this.animatedfs(\n                message.data, \n                nodesInShortestPathOrder,\n                message.data.length, \n                this.state.animationSpeed,\n                this.state.isThereStop, \n                false\n              )\n\n            })\n        })\n      }\n    }\n\n    // bidirectional greedy first search\n\n    animateBidirectionalAlgorithm = (\n      visitedNodesInOrderStart,\n      visitedNodesInOrderFinish,\n      nodesInShortestPathOrder,\n      isShortedPath,\n      animationSpeed\n    ) => {\n\n      this.setState({visualizingAlgorithm: true})\n\n      //progress tracker\n      const progress = $(\"#progressBar\")\n      progress.replaceWith($(\"#progressBar\")).clone(true)\n\n      var integralVal = this.handleProgressSetup(\n        this.state.isThereStop,\n        false,\n        animationSpeed,\n        visitedNodesInOrderStart.length\n      )\n\n      let len = Math.max(\n        visitedNodesInOrderStart.length,\n        visitedNodesInOrderFinish.length\n      );\n\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n        if (i === visitedNodesInOrderStart.length) {\n          setTimeout(() => {\n            let visitedNodesInOrder = getVisitedNodesInOrder(\n              visitedNodesInOrderStart,\n              visitedNodesInOrderFinish\n            );\n            if (isShortedPath) {\n              this.animateShortestPath(\n                nodesInShortestPathOrder,\n                visitedNodesInOrder\n              );\n            } else {\n              this.setState({ visualizingAlgorithm: false });\n            }\n          }, i * animationSpeed);\n          return;\n        }\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined) {\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = \"node node-visited\";\n          }\n          if (nodeB !== undefined) {\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = \"node node-visited\";\n          }\n          progress.width(`+=${integralVal*2}%`)\n\n        }, i * animationSpeed);\n      }\n    }\n\n    visualizeBidirectionalGreedySearch = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      \n      this.setState({ visualizingAlgorithm: true });\n\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]];\n        const finishNode = grid[_finishNode[0]][_finishNode[1]];\n        const visitedNodesInOrder = bidirectionalGreedySearch(\n          grid,\n          startNode,\n          finishNode\n        );\n        const visitedNodesInOrderStart = visitedNodesInOrder[0];\n        const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n        const isShortedPath = visitedNodesInOrder[2];\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\n          visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n          visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n        );\n        this.setState({maxProgressVal: (visitedNodesInOrderStart.length + visitedNodesInOrderFinish.length)-2})\n        this.animateBidirectionalAlgorithm(\n          visitedNodesInOrderStart,\n          visitedNodesInOrderFinish,\n          nodesInShortestPathOrder,\n          isShortedPath,\n          this.state.animationSpeed\n        );\n      }, this.state.animationSpeed);\n    }\n\n    //finish animations\n\n    animateShortestPath = (nodesInShortestPathOrder) => {\n\n      const startNode = this.state.grid[this.state.startNode[0]][this.state.startNode[1]]\n      const finishNode = this.state.grid[this.state.finishNode[0]][this.state.finishNode[1]]\n      const stopNode = this.state.isThereStop ? this.state.grid[this.state.prevStop[0]][this.state.prevStop[1]] : []\n\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n\n          var currObj = document.getElementById(`node-${node.row}-${node.col}`)\n\n          if(node.row === startNode.row && node.col === startNode.col) {\n            currObj.className = 'node node-shortest-path node-shortest-path-start';\n          } else if(node.row === finishNode.row && node.col === finishNode.col){\n            currObj.className = 'node node-shortest-path node-shortest-path-finish';\n          } else if(this.state.isThereStop && (node.row === stopNode.row && node.col === stopNode.col)) {\n            currObj.className = 'node node-shortest-path node-shortest-path-stop';\n          } else if(document.getElementById(`node-${node.row}-${node.col}`).className.includes('node-shortest-path')) {\n            $(`#node-${node.row}-${node.col}`).replaceWith($(`#node-${node.row}-${node.col}`).clone(true))\n          } else {\n            currObj.className = 'node node-shortest-path';\n          }\n\n        }, 50 * i);\n      }\n    }\n\n    //generate mazes\n\n    animateMaze = (walls) => {\n\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            //this.clearGrid();\n\n          }, i * 10);\n          return;\n        }\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    generateRandomMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false\n        const walls = this.state.isThereStop ? randomMaze(grid, startNode, finishNode, true, stopNode) : randomMaze(grid, startNode, finishNode, false);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateRecursiveDivisionMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false\n        const walls = this.state.isThereStop ? recursiveDivisionMaze(grid, startNode, finishNode, true, stopNode) : recursiveDivisionMaze(grid, startNode, finishNode, false, stopNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateVerticalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false\n        const walls = this.state.isThereStop ? verticalMaze(grid, startNode, finishNode, true, stopNode) : verticalMaze(grid, startNode, finishNode, false);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateHorizontalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const stopNode = this.state.isThereStop ? grid[this.state.prevStop[0]][this.state.prevStop[1]] : false\n        const walls = this.state.isThereStop ? horizontalMaze(grid, startNode, finishNode, true, stopNode) : horizontalMaze(grid, startNode, finishNode, false);\n        this.animateMaze(walls);\n      }, 10);\n    }\n\n    render(){ \n        return(\n            <div className=\"main-container\">\n                {/* <button onClick={this.handleNav}>show nav</button> */}\n                <NavTop state={this.state} currProgressVal={currProgressVal} maxProgressVal={maxProgressVal} handleSpeedTabs={this.handleSpeedTabs} clearGrid={this.clearGrid} resetGrid={this.resetGrid}/>\n                <div className=\"visualizer-container\">\n                    <Visualizer \n                        state={this.state} \n                        handleMouseDown={this.handleMouseDown} \n                        handleMouseEnter={this.handleMouseEnter} \n                        handleMouseUp={this.handleMouseUp}\n                    />\n                </div>\n                <Navbar state={this.state} toggleNav={this.handleNav} replayAnimation={this.replayAnimation} resetGrid={this.resetGrid} handleMazeTabs={this.handleMazeTabs} genMaze={this.generateMaze} play={this.playAnimation} handleTabs={this.handleTabs} handleItemChange={this.handleItemDescChange} visualizeDijkstra={this.visualizeDijkstra}/>\n            </div>\n        )\n    }\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n    const grid = [];\n    var rowNum = _rowNum\n    var colNum = _colNum\n    for (let row = 0; row < rowNum; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colNum; col++) {\n        var node = createNode(col, row, state)\n        node.className = 'node'\n        currentRow.push(node);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\n\n\nconst createNode = (col, row, state) => {\n    const startNode = state.startNode\n    const finishNode = state.finishNode\n    const stopNode = state.prevStop\n    return {\n      col,\n      row,\n      isStart: row === startNode[0] && col === startNode[1],\n      isFinish: row === finishNode[0] && col === finishNode[1],\n      isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : false,\n      isWall: false,\n      previousNode: null,\n      previousNodeSecond: null,\n      isVisited: false,\n      isVisitedSecond: false,\n      distance: Infinity,\n      distanceSecond: Infinity\n    };\n  };\n\n  const getNewGridWithStart = (grid, row, col, prevStart) => {\n\n    const newGrid = grid.slice();\n    const newStart = newGrid[row][col]\n    const oldStart = newGrid[prevStart[0]][prevStart[1]]\n    const oldNode = {\n      ...oldStart,\n      isStart: !oldStart.isStart\n    }\n    const newNode = {\n      ...newStart,\n      isStart: !newStart.isStart,\n      isWall: false\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStart[0]][prevStart[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithFinish = (grid, row, col, prevFinish) => {\n\n    const newGrid = grid.slice();\n    const newFinish = newGrid[row][col];\n    const oldFinish = newGrid[prevFinish[0]][prevFinish[1]]\n    const oldNode = {\n      ...oldFinish,\n      isFinish: !oldFinish.isFinish\n    }\n    const newNode = {\n      ...newFinish,\n      isFinish: !newFinish.isFinish,\n      isWall: false\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevFinish[0]][prevFinish[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n\n    const newGrid = grid.slice();\n    const newStop = newGrid[row][col];\n    if(prevStop.length === 0){\n      const newNode = {\n        ...newStop,\n        isStop: !newStop.isStop,\n        isWall: false\n      };\n      newGrid[row][col] = newNode;\n      return newGrid;\n    }\n    const oldStop = newGrid[prevStop[0]][prevStop[1]]\n    const oldNode = {\n      ...oldStop,\n      isStop: !oldStop.isStop\n    }\n    const newNode = {\n      ...newStop,\n      isStop: !newStop.isStop,\n      isWall: false\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStop[0]][prevStop[1]] = oldNode\n    return newGrid;\n  };\n\n  const getNewGridWithMaze = (grid, walls) => {\n    let newGrid = grid.slice();\n    for (let wall of walls) {\n      let node = grid[wall[0]][wall[1]];\n      let newNode = {\n        ...node,\n        isWall: true,\n      };\n      newGrid[wall[0]][wall[1]] = newNode;\n    }\n    return newGrid;\n  };\n\n  const getVisitedNodesInOrder = (\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish\n  ) => {\n    let visitedNodesInOrder = [];\n    let n = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 0; i < n; i++) {\n      if (visitedNodesInOrderStart[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n      }\n      if (visitedNodesInOrderFinish[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n      }\n    }\n    return visitedNodesInOrder;\n  };\n\n  const getGridWithoutPath = (grid, minorReset=false) => {\n    let newGrid = grid.slice();\n    for (let row of grid) {\n      for (let node of row) {\n        var wall = false\n        var stop = false\n        if(minorReset){\n          if(grid[node.row][node.col].isWall) wall = true\n\n          if(grid[node.row][node.col].isStop) stop = true\n        }\n        let newNode = {\n          ...node,\n          distance: Infinity,\n          distanceSecond: Infinity,\n          totalDistance: Infinity,\n          isVisited: false,\n          isVisitedSecond: false,\n          isShortest: false,\n          previousNode: null,\n          isWall: wall,\n          isWeight: false,\n          isStop: stop\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    return newGrid;\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module"}