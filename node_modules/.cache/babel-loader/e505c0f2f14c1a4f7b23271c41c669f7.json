{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\";\nimport React, { Component, useState, useEffect } from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithims/dijkstra';\nimport { aStar } from '../algorithims/aStar';\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data';\nimport algData from '../data/alg-data';\nimport './mainContainer.css';\nimport { ContactlessOutlined } from '@material-ui/icons';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MainContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleWindowResize = () => {\n      console.log('changing');\n    };\n\n    this.handleMouseDown = (row, col) => {\n      var newGrid = this.state.grid;\n\n      if (this.state.grid[row][col].isStart) {\n        this.setState({\n          startIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.grid[row][col].isFinish) {\n        this.setState({\n          finishIsMoving: true\n        });\n        newGrid = this.state.grid;\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Weight') {\n        newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        this.setState({\n          stopIsMoving: true,\n          isThereStop: true\n        });\n      }\n\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    };\n\n    this.handleMouseEnter = (row, col) => {\n      if (!this.state.mouseIsPressed) return;\n      var newGrid = this.state.grid;\n\n      if (this.state.startIsMoving) {\n        newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode);\n        this.setState({\n          startNode: [row, col]\n        });\n      } else if (this.state.finishIsMoving) {\n        newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode);\n        this.setState({\n          finishNode: [row, col]\n        });\n      } else if (this.state.currItemDesc === 'Wall') {\n        newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n      } else if (this.state.currItemDesc === 'Weight') {\n        newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      } else if (this.state.currItemDesc === 'Stop') {\n        newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n        this.setState({\n          prevStop: [row, col]\n        });\n      }\n\n      this.setState({\n        grid: newGrid\n      });\n    };\n\n    this.handleMouseUp = (row, col) => {\n      this.setState({\n        mouseIsPressed: false,\n        startIsMoving: false,\n        finishIsMoving: false\n      });\n    };\n\n    this.handleNav = () => {\n      this.setState({\n        showNav: !this.state.showNav\n      });\n    };\n\n    this.handleItemDescChange = (e, item) => {\n      var newItem = `${item}`;\n      itemData.map(_item => {\n        if (item === _item.id) {\n          this.setState({\n            currItemDesc: newItem,\n            currItemObj: _item\n          });\n        }\n      });\n    };\n\n    this.handleTabs = (e, val) => {\n      this.setState({\n        currAlgTab: val,\n        currAlgObj: algData[val]\n      });\n    };\n\n    this.handleMazeTabs = (e, val) => {\n      this.setState({\n        currMazeTab: val\n      });\n      console.log(val);\n    };\n\n    this.generateMaze = e => {\n      var currAlg = this.state.currMazeTab;\n\n      if (currAlg === 0) {\n        this.generateRecursiveDivisionMaze();\n      } else if (currAlg === 1) {\n        this.generateVerticalMaze();\n      } else if (currAlg === 2) {\n        this.generateHorizontalMaze();\n      } else if (currAlg === 3) {\n        this.generateRandomMaze();\n      }\n    };\n\n    this.resetGrid = e => {\n      this.clearGrid();\n    };\n\n    this.clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = this.state.grid;\n      const startNode = this.state.startNode;\n      const finishNode = this.state.finishNode;\n\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if (row === startNode[0] && col === startNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if (row === finishNode[0] && col === finishNode[1]) {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false\n      });\n    };\n\n    this.replayAnimation = e => {\n      console.log(this.state);\n\n      if (this.state.prevAlg === {} || this.state.prevStart === [] || this.state.prevFinish === []) {\n        console.log('not met');\n        return;\n      }\n\n      this.clearGrid();\n      var prevAnimation = this.state;\n      this.setState({\n        startNode: prevAnimation.prevStart,\n        finishNode: prevAnimation.prevFinish,\n        currAlgObj: prevAnimation.currAlgObj\n      });\n      const grid = renderGrid(this.state, Math.floor(window.innerHeight / 25), Math.floor(window.innerWidth / 25));\n      this.setState({\n        grid\n      });\n      this.playAnimation();\n    };\n\n    this.playAnimation = e => {\n      var currAlg = this.state.currAlgObj.id;\n      this.setState({\n        prevStart: this.state.startNode,\n        prevFinish: this.state.finishNode,\n        prevAlg: this.state.AlgObj\n      });\n\n      if (currAlg === 0) {\n        this.visualizeDijkstra();\n      } else if (currAlg === 1) {\n        this.visualizeaStar();\n      } else if (currAlg === 6) {\n        this.visualizbfs();\n      } else if (currAlg === 2) {\n        this.visualizegbfs();\n      } else if (currAlg === 7) {\n        this.visualizegdfs();\n      } else if (currAlg === 3) {\n        this.visualizeBidirectionalGreedySearch();\n      }\n\n      return;\n    };\n\n    this.visualizeDijkstra = () => {\n      const grid = this.state.grid;\n      const subGridOne = grid;\n      const START_NODE = this.state.startNode;\n      const FINISH_NODE = this.state.finishNode;\n      const STOP_NODE = this.state.prevStop;\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n      var visitedNodesInOrder = [];\n      var visitedNodesInOrderSecond = [];\n\n      if (this.state.isThereStop) {\n        visitedNodesInOrder = dijkstra(grid, startNode, stopNode); //resetting node values prepping for next search\n\n        var gridNodeValues = [];\n        grid.forEach(node => {});\n        visitedNodesInOrderSecond = dijkstra(grid, stopNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      } else if (!this.state.isThereStop) {\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n      }\n    };\n\n    this.animateMaze = walls => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({\n              grid: newGrid,\n              generatingMaze: false\n            });\n          }, i * 10);\n          return;\n        }\n\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true;\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      showNav: false,\n      currItemDesc: 'Start',\n      currItemObj: itemData[0],\n      currAlgObj: algData[0],\n      currAlgTab: 0,\n      currMazeAlg: 'Recursive Division Maze',\n      currMazeTab: 0,\n      startNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), 1],\n      finishNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), Math.floor(Math.floor(window.innerWidth / 25)) - 2],\n      startIsMoving: false,\n      finishIsMoving: false,\n      isThereStop: false,\n      stopIsMoving: false,\n      prevStop: [],\n      generatingMaze: false,\n      visualizingAlgorithm: false,\n      prevStart: [],\n      prevFinish: [],\n      prevAlg: {}\n    };\n  }\n\n  //reminder!!\n  // row is width\n  // col is height\n  componentDidMount() {\n    window.addEventListener('resize', e => {\n      this.setState({\n        startNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), 1],\n        finishNode: [Math.floor(Math.floor(window.innerHeight / 25) / 2), Math.floor(Math.floor(window.innerWidth / 25)) - 2],\n        isThereStop: false,\n        stopIsMoving: false,\n        prevStop: [],\n        prevStart: [],\n        prevFinish: [],\n        prevAlg: {}\n      });\n      this.clearGrid();\n      var rowNum = Math.floor(window.innerHeight / 25);\n      var colNum = Math.floor(window.innerWidth / 25);\n      const grid = renderGrid(this.state, rowNum, colNum, false);\n      this.setState({\n        grid\n      });\n    });\n    const grid = renderGrid(this.state, Math.floor(window.innerHeight / 25), Math.floor(window.innerWidth / 25));\n    this.setState({\n      grid\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', e => {\n      return;\n    });\n  }\n\n  //animte dijkstra\n  async animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder, isSecondAnimation = false) {\n    var animationColor = '';\n\n    if (isSecondAnimation) {\n      animationColor = 'node-target-visited';\n    } else if (!isSecondAnimation) {\n      animationColor = 'node-visited';\n    }\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  //animate aStar\n  animateaStar(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizeaStar() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n  } //animate breadth first search \n\n\n  animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizbfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // greedy best first search\n\n\n  animategbfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizegbfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // depth first search\n\n\n  animatedfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  visualizegdfs() {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  } // bidirectional greedy first search\n\n\n  animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath) {\n    let len = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n    for (let i = 1; i <= len; i++) {\n      let nodeA = visitedNodesInOrderStart[i];\n      let nodeB = visitedNodesInOrderFinish[i];\n\n      if (i === visitedNodesInOrderStart.length) {\n        setTimeout(() => {\n          let visitedNodesInOrder = getVisitedNodesInOrder(visitedNodesInOrderStart, visitedNodesInOrderFinish);\n\n          if (isShortedPath) {\n            this.animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\n          } else {\n            this.setState({\n              visualizingAlgorithm: false\n            });\n          }\n        }, i * 10);\n        return;\n      }\n\n      setTimeout(() => {\n        //visited nodes\n        if (nodeA !== undefined) document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = \"node node-visited\";\n        if (nodeB !== undefined) document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = \"node node-visited\";\n      }, i * 10);\n    }\n  }\n\n  visualizeBidirectionalGreedySearch() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      visualizingAlgorithm: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const visitedNodesInOrder = bidirectionalGreedySearch(grid, startNode, finishNode);\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n      const isShortedPath = visitedNodesInOrder[2];\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1], visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]);\n      console.log('here');\n      this.animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath);\n    }, 10);\n  } //finish animations\n\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  } //generate mazes\n\n\n  generateRandomMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = randomMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateRecursiveDivisionMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateVerticalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = verticalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  generateHorizontalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = horizontalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualizer-container\",\n        children: /*#__PURE__*/_jsxDEV(Visualizer, {\n          state: this.state,\n          handleMouseDown: this.handleMouseDown,\n          handleMouseEnter: this.handleMouseEnter,\n          handleMouseUp: this.handleMouseUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n        state: this.state,\n        toggleNav: this.handleNav,\n        replayAnimation: this.replayAnimation,\n        resetGrid: this.resetGrid,\n        handleMazeTabs: this.handleMazeTabs,\n        genMaze: this.generateMaze,\n        play: this.playAnimation,\n        handleTabs: this.handleTabs,\n        handleItemChange: this.handleItemDescChange,\n        visualizeDijkstra: this.visualizeDijkstra\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n  const grid = [];\n  var rowNum = _rowNum;\n  var colNum = _colNum;\n\n  for (let row = 0; row < rowNum; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < colNum; col++) {\n      var node = createNode(col, row, state);\n      node.className = 'node';\n      currentRow.push(node);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row, state) => {\n  const startNode = state.startNode;\n  const finishNode = state.finishNode;\n  const stopNode = state.prevStop;\n  return {\n    col,\n    row,\n    isStart: row === startNode[0] && col === startNode[1],\n    isFinish: row === finishNode[0] && col === finishNode[1],\n    isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithStart = (grid, row, col, prevStart) => {\n  const newGrid = grid.slice();\n  const newStart = newGrid[row][col];\n  const oldStart = newGrid[prevStart[0]][prevStart[1]];\n  const oldNode = { ...oldStart,\n    isStart: !oldStart.isStart\n  };\n  const newNode = { ...newStart,\n    isStart: !newStart.isStart\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStart[0]][prevStart[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinish = (grid, row, col, prevFinish) => {\n  const newGrid = grid.slice();\n  if (newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n  const newFinish = newGrid[row][col];\n  const oldFinish = newGrid[prevFinish[0]][prevFinish[1]];\n  const oldNode = { ...oldFinish,\n    isFinish: !oldFinish.isFinish\n  };\n  const newNode = { ...newFinish,\n    isFinish: !newFinish.isFinish\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevFinish[0]][prevFinish[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithWeightToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWeight: !node.isWeight\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n  const newGrid = grid.slice();\n  const newStop = newGrid[row][col];\n\n  if (prevStop.length === 0) {\n    const newNode = { ...newStop,\n      isStop: !newStop.isStop\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  const oldStop = newGrid[prevStop[0]][prevStop[1]];\n  const oldNode = { ...oldStop,\n    isStop: !oldStop.isStop\n  };\n  const newNode = { ...newStop,\n    isStop: !newStop.isStop\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStop[0]][prevStop[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = { ...node,\n      isWall: true\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n\n  return newGrid;\n};\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst getVisitedNodesInOrder = (visitedNodesInOrderStart, visitedNodesInOrderFinish) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n\n  return visitedNodesInOrder;\n};\n\nconst getGridWithoutPath = grid => {\n  let newGrid = grid.slice();\n\n  for (let row of grid) {\n    for (let node of row) {\n      let newNode = { ...node,\n        distance: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isVisitedSecond: false,\n        isShortest: false,\n        previousNode: null,\n        isWall: false,\n        isWeight: false,\n        isStop: false\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"names":["React","Component","useState","useEffect","Visualizer","dijkstra","getNodesInShortestPathOrder","aStar","breadthFirstSearch","greedyBFS","depthFirstSearch","randomMaze","verticalMaze","horizontalMaze","recursiveDivisionMaze","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","Navbar","itemData","algData","ContactlessOutlined","cloneDeep","MainContainer","constructor","props","handleWindowResize","console","log","handleMouseDown","row","col","newGrid","state","grid","isStart","setState","startIsMoving","isFinish","finishIsMoving","currItemDesc","getNewGridWithWallToggled","getNewGridWithWeightToggled","stopIsMoving","isThereStop","mouseIsPressed","handleMouseEnter","getNewGridWithStart","startNode","getNewGridWithFinish","finishNode","getNewGridWithStopToggled","prevStop","handleMouseUp","handleNav","showNav","handleItemDescChange","e","item","newItem","map","_item","id","currItemObj","handleTabs","val","currAlgTab","currAlgObj","handleMazeTabs","currMazeTab","generateMaze","currAlg","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","generateRandomMaze","resetGrid","clearGrid","visualizingAlgorithm","generatingMaze","rowNum","Math","floor","window","innerHeight","colNum","innerWidth","length","document","getElementById","className","getGridWithoutPath","replayAnimation","prevAlg","prevStart","prevFinish","prevAnimation","renderGrid","playAnimation","AlgObj","visualizeDijkstra","visualizeaStar","visualizbfs","visualizegbfs","visualizegdfs","visualizeBidirectionalGreedySearch","subGridOne","START_NODE","FINISH_NODE","STOP_NODE","stopNode","visitedNodesInOrder","visitedNodesInOrderSecond","gridNodeValues","forEach","node","nodesInShortestPathOrder","animateDijkstra","animateMaze","walls","i","setTimeout","getNewGridWithMaze","wall","isWall","currMazeAlg","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","isSecondAnimation","animationColor","animateShortestPath","animateaStar","_startNode","_finishNode","animatebfs","animategbfs","animatedfs","animateBidirectionalAlgorithm","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","len","max","nodeA","nodeB","getVisitedNodesInOrder","undefined","render","_rowNum","_colNum","currentRow","createNode","push","isStop","previousNode","slice","newStart","oldStart","oldNode","newNode","newFinish","oldFinish","isWeight","newStop","oldStop","getInitialGrid","numRows","numColumns","n","distance","Infinity","totalDistance","isVisited","isVisitedSecond","isShortest"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect} from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithims/dijkstra';\nimport {aStar} from '../algorithims/aStar'\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data'\nimport algData from '../data/alg-data'\nimport './mainContainer.css'\nimport { ContactlessOutlined } from '@material-ui/icons';\nimport cloneDeep from 'lodash/cloneDeep'\n\nexport default class MainContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start',\n            currItemObj: itemData[0],\n            currAlgObj: algData[0],\n            currAlgTab: 0,\n            currMazeAlg: 'Recursive Division Maze',\n            currMazeTab: 0,\n            startNode: [Math.floor(Math.floor(window.innerHeight/25)/2), 1],\n            finishNode: [Math.floor(Math.floor(window.innerHeight/25)/2), Math.floor(Math.floor(window.innerWidth/25))-2],\n            startIsMoving: false,\n            finishIsMoving: false,\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            generatingMaze: false,\n            visualizingAlgorithm: false,\n            prevStart: [],\n            prevFinish: [],\n            prevAlg: {}\n        }\n    }\n\n    handleWindowResize = () => {\n      console.log('changing')\n    }\n    //reminder!!\n    // row is width\n    // col is height\n    componentDidMount() {\n      window.addEventListener('resize', (e) => {\n        this.setState({\n          startNode: [Math.floor(Math.floor(window.innerHeight/25)/2), 1],\n          finishNode: [Math.floor(Math.floor(window.innerHeight/25)/2), Math.floor(Math.floor(window.innerWidth/25))-2],\n          isThereStop: false,\n          stopIsMoving: false,\n          prevStop: [],\n          prevStart: [],\n          prevFinish: [],\n          prevAlg: {}\n        })\n        this.clearGrid();\n        var rowNum = Math.floor((window.innerHeight / 25))\n        var colNum = Math.floor((window.innerWidth / 25))\n        const grid = renderGrid(this.state, rowNum, colNum, false)\n        this.setState({grid});\n      })\n      const grid = renderGrid(this.state, Math.floor((window.innerHeight / 25)), Math.floor((window.innerWidth / 25)))\n      this.setState({grid});\n    }\n\n    componentWillUnmount(){\n      window.removeEventListener('resize', (e) => {\n        return\n      })\n    }\n\n    handleMouseDown = (row, col) => {\n        var newGrid = this.state.grid\n        if(this.state.grid[row][col].isStart){\n          this.setState({startIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.grid[row][col].isFinish){\n          this.setState({finishIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Stop'){\n          this.setState({stopIsMoving: true, isThereStop: true})\n        }\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter = (row, col) => {\n        if (!this.state.mouseIsPressed) return;\n        var newGrid = this.state.grid;\n        if(this.state.startIsMoving){\n          newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode)\n          this.setState({startNode: [row, col]})\n        } \n        else if(this.state.finishIsMoving){\n          newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode)\n          this.setState({finishNode: [row, col]})\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        }  else if(this.state.currItemDesc === 'Stop'){\n          newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n          this.setState({prevStop: [row, col]})\n        }\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp = (row, col) => {\n        this.setState({mouseIsPressed: false, startIsMoving: false, finishIsMoving: false});\n    }\n\n    handleNav = () => {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    //navBar functions\n    handleItemDescChange = (e, item) => {\n      var newItem = `${item}`\n      itemData.map((_item) => {\n        if(item === _item.id){this.setState({currItemDesc: newItem, currItemObj: _item})}\n      })\n    }\n\n    handleTabs = (e, val) => {\n      this.setState({currAlgTab: val, currAlgObj: algData[val]})\n    }\n\n    handleMazeTabs = (e, val) => {\n      this.setState({currMazeTab: val})\n      console.log(val)\n    }\n\n    generateMaze = (e) => {\n      var currAlg = this.state.currMazeTab\n      \n      if(currAlg===0){\n        this.generateRecursiveDivisionMaze()\n      } else if(currAlg===1){\n        this.generateVerticalMaze()\n      } else if(currAlg===2){\n        this.generateHorizontalMaze()\n      } else if(currAlg===3){\n        this.generateRandomMaze()\n      }\n    }\n\n    resetGrid = (e) => {\n      this.clearGrid()\n    }\n\n    clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      var rowNum = Math.floor((window.innerHeight / 25))\n      var colNum = Math.floor((window.innerWidth / 25))\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n      });\n    }\n\n    replayAnimation = (e) => {\n      console.log(this.state)\n      if(this.state.prevAlg === {} || this.state.prevStart === [] || this.state.prevFinish === []){\n        console.log('not met')\n        return\n      }\n      this.clearGrid()\n      var prevAnimation = this.state\n      this.setState({\n        startNode: prevAnimation.prevStart,\n        finishNode: prevAnimation.prevFinish,\n        currAlgObj: prevAnimation.currAlgObj\n      })\n      const grid = renderGrid(this.state, Math.floor((window.innerHeight / 25)), Math.floor((window.innerWidth / 25)))\n      this.setState({grid})\n      this.playAnimation()\n    }\n\n    // play animation\n\n    playAnimation = (e) => {\n      var currAlg = this.state.currAlgObj.id\n      this.setState({\n        prevStart: this.state.startNode,\n        prevFinish: this.state.finishNode,\n        prevAlg: this.state.AlgObj\n      })\n      if(currAlg===0){\n        this.visualizeDijkstra()\n      } else if(currAlg===1){\n        this.visualizeaStar()\n      } else if(currAlg===6){\n        this.visualizbfs()\n      } else if(currAlg===2){\n        this.visualizegbfs()\n      } else if(currAlg===7){\n        this.visualizegdfs()\n      } else if(currAlg===3){\n        this.visualizeBidirectionalGreedySearch()\n      }\n      return\n    }\n\n    //animte dijkstra\n\n    async animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder, isSecondAnimation=false) {\n      var animationColor = ''\n      if(isSecondAnimation){\n        animationColor = 'node-target-visited'\n      }else if(!isSecondAnimation){\n        animationColor = 'node-visited'\n      }\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n    \n    visualizeDijkstra = () => {\n      const grid = this.state.grid;\n      const subGridOne = grid\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      var visitedNodesInOrder = []\n      var visitedNodesInOrderSecond = []\n      if(this.state.isThereStop){\n\n        visitedNodesInOrder = dijkstra(grid, startNode, stopNode)\n        //resetting node values prepping for next search\n        var gridNodeValues = []\n        grid.forEach((node) => {\n          \n        })\n\n        visitedNodesInOrderSecond = dijkstra(grid, stopNode, finishNode)\n\n\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n\n      } else if(!this.state.isThereStop){\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder)\n      }\n    }\n\n    //animate aStar\n\n    animateaStar(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizeaStar() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    //animate breadth first search \n\n    animatebfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizbfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    // greedy best first search\n\n    animategbfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizegbfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    // depth first search\n\n    animatedfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    visualizegdfs() {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    // bidirectional greedy first search\n\n    animateBidirectionalAlgorithm(\n      visitedNodesInOrderStart,\n      visitedNodesInOrderFinish,\n      nodesInShortestPathOrder,\n      isShortedPath\n    ) {\n      let len = Math.max(\n        visitedNodesInOrderStart.length,\n        visitedNodesInOrderFinish.length\n      );\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n        if (i === visitedNodesInOrderStart.length) {\n          setTimeout(() => {\n            let visitedNodesInOrder = getVisitedNodesInOrder(\n              visitedNodesInOrderStart,\n              visitedNodesInOrderFinish\n            );\n            if (isShortedPath) {\n              this.animateShortestPath(\n                nodesInShortestPathOrder,\n                visitedNodesInOrder\n              );\n            } else {\n              this.setState({ visualizingAlgorithm: false });\n            }\n          }, i * 10);\n          return;\n        }\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined)\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\n              \"node node-visited\";\n          if (nodeB !== undefined)\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\n              \"node node-visited\";\n        }, i * 10);\n      }\n    }\n\n    visualizeBidirectionalGreedySearch() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ visualizingAlgorithm: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]];\n        const finishNode = grid[_finishNode[0]][_finishNode[1]];\n        const visitedNodesInOrder = bidirectionalGreedySearch(\n          grid,\n          startNode,\n          finishNode\n        );\n        const visitedNodesInOrderStart = visitedNodesInOrder[0];\n        const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n        const isShortedPath = visitedNodesInOrder[2];\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\n          visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n          visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n        );\n        console.log('here')\n        this.animateBidirectionalAlgorithm(\n          visitedNodesInOrderStart,\n          visitedNodesInOrderFinish,\n          nodesInShortestPathOrder,\n          isShortedPath\n        );\n      }, 10);\n    }\n\n    //finish animations\n\n    animateShortestPath(nodesInShortestPathOrder) {\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path';\n        }, 50 * i);\n      }\n    }\n\n    //generate mazes\n\n    animateMaze = (walls) => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({ grid: newGrid, generatingMaze: false });\n          }, i * 10);\n          return;\n        }\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    generateRandomMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = randomMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateRecursiveDivisionMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateVerticalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = verticalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    generateHorizontalMaze() {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = horizontalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n\n    render(){ \n        return(\n            <div className=\"main-container\">\n                {/* <button onClick={this.handleNav}>show nav</button> */}\n                <div className=\"visualizer-container\">\n                    <Visualizer \n                        state={this.state} \n                        handleMouseDown={this.handleMouseDown} \n                        handleMouseEnter={this.handleMouseEnter} \n                        handleMouseUp={this.handleMouseUp}\n                    />\n                </div>\n                <Navbar state={this.state} toggleNav={this.handleNav} replayAnimation={this.replayAnimation} resetGrid={this.resetGrid} handleMazeTabs={this.handleMazeTabs} genMaze={this.generateMaze} play={this.playAnimation} handleTabs={this.handleTabs} handleItemChange={this.handleItemDescChange} visualizeDijkstra={this.visualizeDijkstra}/>\n            </div>\n        )\n    }\n}\n\nconst renderGrid = (state, _rowNum, _colNum) => {\n    const grid = [];\n    var rowNum = _rowNum\n    var colNum = _colNum\n    for (let row = 0; row < rowNum; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colNum; col++) {\n        var node = createNode(col, row, state)\n        node.className = 'node'\n        currentRow.push(node);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\n\n\nconst createNode = (col, row, state) => {\n    const startNode = state.startNode\n    const finishNode = state.finishNode\n    const stopNode = state.prevStop\n    return {\n      col,\n      row,\n      isStart: row === startNode[0] && col === startNode[1],\n      isFinish: row === finishNode[0] && col === finishNode[1],\n      isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n\n  const getNewGridWithStart = (grid, row, col, prevStart) => {\n    const newGrid = grid.slice();\n    const newStart = newGrid[row][col];\n    const oldStart = newGrid[prevStart[0]][prevStart[1]]\n    const oldNode = {\n      ...oldStart,\n      isStart: !oldStart.isStart\n    }\n    const newNode = {\n      ...newStart,\n      isStart: !newStart.isStart,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStart[0]][prevStart[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithFinish = (grid, row, col, prevFinish) => {\n    const newGrid = grid.slice();\n    if(newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n    const newFinish = newGrid[row][col];\n    const oldFinish = newGrid[prevFinish[0]][prevFinish[1]]\n    const oldNode = {\n      ...oldFinish,\n      isFinish: !oldFinish.isFinish\n    }\n    const newNode = {\n      ...newFinish,\n      isFinish: !newFinish.isFinish,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevFinish[0]][prevFinish[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithWeightToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWeight: !node.isWeight,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n    const newGrid = grid.slice();\n    const newStop = newGrid[row][col];\n    if(prevStop.length === 0){\n      const newNode = {\n        ...newStop,\n        isStop: !newStop.isStop,\n      };\n      newGrid[row][col] = newNode;\n      return newGrid;\n    }\n    const oldStop = newGrid[prevStop[0]][prevStop[1]]\n    const oldNode = {\n      ...oldStop,\n      isStop: !oldStop.isStop\n    }\n    const newNode = {\n      ...newStop,\n      isStop: !newStop.isStop,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStop[0]][prevStop[1]] = oldNode\n    return newGrid;\n  };\n\n  const getNewGridWithMaze = (grid, walls) => {\n    let newGrid = grid.slice();\n    for (let wall of walls) {\n      let node = grid[wall[0]][wall[1]];\n      let newNode = {\n        ...node,\n        isWall: true,\n      };\n      newGrid[wall[0]][wall[1]] = newNode;\n    }\n    return newGrid;\n  };\n\n  const getInitialGrid = (numRows, numColumns) => {\n    let grid = [];\n    for (let row = 0; row < numRows; row++) {\n      let currentRow = [];\n      for (let col = 0; col < numColumns; col++) {\n        currentRow.push(createNode(row, col));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const getVisitedNodesInOrder = (\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish\n  ) => {\n    let visitedNodesInOrder = [];\n    let n = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 0; i < n; i++) {\n      if (visitedNodesInOrderStart[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n      }\n      if (visitedNodesInOrderFinish[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n      }\n    }\n    return visitedNodesInOrder;\n  };\n\n  const getGridWithoutPath = (grid) => {\n    let newGrid = grid.slice();\n    for (let row of grid) {\n      for (let node of row) {\n        let newNode = {\n          ...node,\n          distance: Infinity,\n          totalDistance: Infinity,\n          isVisited: false,\n          isVisitedSecond: false,\n          isShortest: false,\n          previousNode: null,\n          isWall: false,\n          isWeight: false,\n          isStop: false\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    return newGrid;\n  };"]},"metadata":{},"sourceType":"module"}