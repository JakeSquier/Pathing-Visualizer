{"ast":null,"code":"export function dijkstra(grid, startNode, finishNode, stopNode) {\n  const visitedNodesInOrder = [[], []];\n  const unvisitedNodes = getAllNodes(grid);\n\n  const _stopNode = stopNode[0] ? stopNode[1] : [];\n\n  var pos = 0;\n\n  while (pos < 2) {\n    console.log('here');\n    var endBool = pos === 0 && stopNode[0];\n    var beginNode = pos === 0 ? startNode : _stopNode;\n\n    if (pos === 0) {\n      beginNode = startNode;\n    } else if (pos === 1 && stopNode[0]) {\n      beginNode = _stopNode;\n    }\n\n    var endNode = endBool ? _stopNode : finishNode;\n\n    if (pos === 0 && stopNode[0]) {\n      endNode = _stopNode;\n    } else if (!stopNode[1]) {\n      endNode = finishNode;\n    }\n\n    unvisitedNodes.forEach(node => {\n      if (node === beginNode) {\n        node.distance = 0;\n      } else {\n        node.distance = Infinity;\n        node.isVisited = false;\n      }\n    });\n    console.log(unvisitedNodes, pos);\n\n    while (!!unvisitedNodes) {\n      sortNodesByDistance(unvisitedNodes, endNode);\n      const closestNode = unvisitedNodes.shift();\n      console.log(close);\n      if (closestNode.isWall) continue;\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      console.log('here');\n      closestNode.isVisited = true;\n      console.log('h', pos, closestNode);\n\n      if (pos === 0) {\n        visitedNodesInOrder[0].push(closestNode);\n      } else if (pos === 1) {\n        visitedNodesInOrder[1].push(closestNode);\n      }\n\n      if (closestNode === endNode && stopNode[0]) {\n        break;\n      } else if (closestNode === endNode && !stopNode[0]) {\n        return visitedNodesInOrder;\n      }\n\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n\n    pos++;\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode, isStop = false) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    if (isStop && currentNode.isTarget === true) break; //console.log(currentNode, currentNode !== null)\n\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","stopNode","visitedNodesInOrder","unvisitedNodes","getAllNodes","_stopNode","pos","console","log","endBool","beginNode","endNode","forEach","node","distance","Infinity","isVisited","sortNodesByDistance","closestNode","shift","close","isWall","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","length","filter","nodes","getNodesInShortestPathOrder","isStop","nodesInShortestPathOrder","currentNode","isTarget","unshift"],"mappings":"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","sourcesContent":["\nexport function dijkstra(grid, startNode, finishNode, stopNode){\n  const visitedNodesInOrder = [[],[]];\n  const unvisitedNodes = getAllNodes(grid)\n  const _stopNode = stopNode[0] ? stopNode[1] : [];\n  var pos = 0\n  while(pos < 2){\n    console.log('here')\n    var endBool = pos===0 && stopNode[0]\n    var beginNode = pos===0 ? startNode : _stopNode\n    if(pos===0){\n      beginNode = startNode\n    } else if(pos===1 && stopNode[0]){\n      beginNode = _stopNode\n    }\n    var endNode = endBool ? _stopNode : finishNode\n    if(pos===0 && stopNode[0]){\n      endNode = _stopNode\n    } else if(!stopNode[1]){\n      endNode = finishNode\n    }\n    unvisitedNodes.forEach((node) => {\n      if(node === beginNode){\n        node.distance = 0\n      } else {\n        node.distance = Infinity\n        node.isVisited = false\n      }\n    })\n    console.log(unvisitedNodes, pos)\n    while(!!unvisitedNodes){\n  \n        sortNodesByDistance(unvisitedNodes, endNode)\n        const closestNode = unvisitedNodes.shift();\n        console.log(close)\n        if(closestNode.isWall) continue;\n\n        if(closestNode.distance === Infinity) return visitedNodesInOrder;\n        console.log('here')\n        closestNode.isVisited = true;\n\n        console.log('h', pos, closestNode)\n        if(pos === 0){\n          visitedNodesInOrder[0].push(closestNode)\n        } else if(pos === 1){\n          visitedNodesInOrder[1].push(closestNode)\n        }\n        if(closestNode === endNode && stopNode[0]){\n          break;\n        } else if(closestNode === endNode && !stopNode[0]){\n          return visitedNodesInOrder\n        }\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n    pos++\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode, isStop=false) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      if(isStop && currentNode.isTarget===true) break;\n      //console.log(currentNode, currentNode !== null)\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"]},"metadata":{},"sourceType":"module"}