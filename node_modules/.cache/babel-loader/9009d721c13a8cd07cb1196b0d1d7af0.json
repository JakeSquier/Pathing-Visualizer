{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/PathFindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport './PathfindingVisualizer.css';\nimport Node from './Node/Node.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: []\n    };\n  }\n\n  componentDidMount() {\n    const nodes = [];\n\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state;\n    console.log(nodes);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: nodes.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map((node, nodeIdx) => {\n            const {\n              isStart,\n              isFinish\n            } = node;\n            return /*#__PURE__*/_jsxDEV(Node, {\n              isStart: isStart,\n              isFinish: isFinish,\n              test: 'foo',\n              test: 'kappa'\n            }, nodeIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 40\n            }, this);\n          })\n        }, rowIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst renderGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === 10 && col === START_NOD,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/PathFindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","PathfindingVisualizer","constructor","props","state","nodes","componentDidMount","row","currentRow","col","push","currentNode","setState","render","console","log","map","rowIdx","node","nodeIdx","isStart","isFinish","renderGrid","grid","createNode","START_NOD","FINISH_NODE_ROW","FINISH_NODE_COL","distance","Infinity","isVisited","isWall","previousNode","getNewGridWithWallToggled","newGrid","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './PathfindingVisualizer.css'\nimport Node from './Node/Node.jsx'\n\nexport default class PathfindingVisualizer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            nodes: []\n        };\n    }\n\n    componentDidMount() {\n        const nodes = [];\n        for(let row = 0; row < 20; row++){\n            const currentRow = [];\n            for(let col = 0; col < 50; col++){\n\n                currentRow.push(currentNode);\n            }\n            nodes.push(currentRow);\n        }\n        this.setState({nodes})\n    }\n\n    render() {\n        const {nodes} = this.state;\n        console.log(nodes);\n\n        return (\n            <div className=\"grid\">\n                {nodes.map((row, rowIdx) => {\n                    return(\n                        <div key={rowIdx}>\n                            {row.map((node, nodeIdx) => {\n                                const {isStart, isFinish} = node;\n                                return <Node key={nodeIdx} isStart={isStart} isFinish={isFinish} test={'foo'} test={'kappa'}/>\n                            })}\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nconst renderGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\nconst createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === 10 && col === START_NOD,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };"]},"metadata":{},"sourceType":"module"}