{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/PathFindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport './PathfindingVisualizer.css';\nimport Node from './Node/Node.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderGrid = () => {\n      const grid = [];\n\n      for (let row = 0; row < 20; row++) {\n        const currentRow = [];\n\n        for (let col = 0; col < 50; col++) {\n          currentRow.push(createNode(col, row));\n        }\n\n        grid.push(currentRow);\n      }\n\n      return grid;\n    };\n\n    this.createNode = (col, row) => {\n      return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n      };\n    };\n\n    this.state = {\n      nodes: []\n    };\n  }\n\n  componentDidMount() {\n    const nodes = [];\n\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state;\n    console.log(nodes);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: nodes.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map((node, nodeIdx) => {\n            const {\n              isStart,\n              isFinish\n            } = node;\n            return /*#__PURE__*/_jsxDEV(Node, {\n              isStart: isStart,\n              isFinish: isFinish,\n              test: 'foo',\n              test: 'kappa'\n            }, nodeIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 40\n            }, this);\n          })\n        }, rowIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PathfindingVisualizer;","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/PathFindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","PathfindingVisualizer","constructor","props","renderGrid","grid","row","currentRow","col","push","createNode","isStart","START_NODE_ROW","START_NODE_COL","isFinish","FINISH_NODE_ROW","FINISH_NODE_COL","distance","Infinity","isVisited","isWall","previousNode","state","nodes","componentDidMount","currentNode","setState","render","console","log","map","rowIdx","node","nodeIdx"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,6BAAP;AACA,OAAOC,IAAP,MAAiB,iBAAjB;;;AAEA,MAAMC,qBAAN,SAAoCF,SAApC,CAA6C;AACzCG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAoBlBC,UApBkB,GAoBL,MAAM;AACf,YAAMC,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC,cAAMC,UAAU,GAAG,EAAnB;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjCD,UAAAA,UAAU,CAACE,IAAX,CAAgBC,UAAU,CAACF,GAAD,EAAMF,GAAN,CAA1B;AACD;;AACDD,QAAAA,IAAI,CAACI,IAAL,CAAUF,UAAV;AACD;;AACD,aAAOF,IAAP;AACH,KA9BiB;;AAAA,SAgClBK,UAhCkB,GAgCL,CAACF,GAAD,EAAMF,GAAN,KAAc;AACvB,aAAO;AACLE,QAAAA,GADK;AAELF,QAAAA,GAFK;AAGLK,QAAAA,OAAO,EAAEL,GAAG,KAAKM,cAAR,IAA0BJ,GAAG,KAAKK,cAHtC;AAILC,QAAAA,QAAQ,EAAER,GAAG,KAAKS,eAAR,IAA2BP,GAAG,KAAKQ,eAJxC;AAKLC,QAAAA,QAAQ,EAAEC,QALL;AAMLC,QAAAA,SAAS,EAAE,KANN;AAOLC,QAAAA,MAAM,EAAE,KAPH;AAQLC,QAAAA,YAAY,EAAE;AART,OAAP;AAUD,KA3Ce;;AAEd,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMD,KAAK,GAAG,EAAd;;AACA,SAAI,IAAIjB,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAG,EAAvB,EAA2BA,GAAG,EAA9B,EAAiC;AAC7B,YAAMC,UAAU,GAAG,EAAnB;;AACA,WAAI,IAAIC,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAG,EAAvB,EAA2BA,GAAG,EAA9B,EAAiC;AAE7BD,QAAAA,UAAU,CAACE,IAAX,CAAgBgB,WAAhB;AACH;;AACDF,MAAAA,KAAK,CAACd,IAAN,CAAWF,UAAX;AACH;;AACD,SAAKmB,QAAL,CAAc;AAACH,MAAAA;AAAD,KAAd;AACH;;AA2BDI,EAAAA,MAAM,GAAG;AACL,UAAM;AAACJ,MAAAA;AAAD,QAAU,KAAKD,KAArB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,gBACKA,KAAK,CAACO,GAAN,CAAU,CAACxB,GAAD,EAAMyB,MAAN,KAAiB;AACxB,4BACI;AAAA,oBACKzB,GAAG,CAACwB,GAAJ,CAAQ,CAACE,IAAD,EAAOC,OAAP,KAAmB;AACxB,kBAAM;AAACtB,cAAAA,OAAD;AAAUG,cAAAA;AAAV,gBAAsBkB,IAA5B;AACA,gCAAO,QAAC,IAAD;AAAoB,cAAA,OAAO,EAAErB,OAA7B;AAAsC,cAAA,QAAQ,EAAEG,QAAhD;AAA0D,cAAA,IAAI,EAAE,KAAhE;AAAuE,cAAA,IAAI,EAAE;AAA7E,eAAWmB,OAAX;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH,WAHA;AADL,WAAUF,MAAV;AAAA;AAAA;AAAA;AAAA,gBADJ;AAQH,OATA;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;;AAhEwC;;AAmE7C,eAAe9B,qBAAf","sourcesContent":["import React, {Component} from 'react';\nimport './PathfindingVisualizer.css'\nimport Node from './Node/Node.jsx'\n\nclass PathfindingVisualizer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            nodes: []\n        };\n    }\n\n    componentDidMount() {\n        const nodes = [];\n        for(let row = 0; row < 20; row++){\n            const currentRow = [];\n            for(let col = 0; col < 50; col++){\n\n                currentRow.push(currentNode);\n            }\n            nodes.push(currentRow);\n        }\n        this.setState({nodes})\n    }\n\n    renderGrid = () => {\n        const grid = [];\n        for (let row = 0; row < 20; row++) {\n          const currentRow = [];\n          for (let col = 0; col < 50; col++) {\n            currentRow.push(createNode(col, row));\n          }\n          grid.push(currentRow);\n        }\n        return grid;\n    }\n\n    createNode = (col, row) => {\n        return {\n          col,\n          row,\n          isStart: row === START_NODE_ROW && col === START_NODE_COL,\n          isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n          distance: Infinity,\n          isVisited: false,\n          isWall: false,\n          previousNode: null,\n        };\n      };\n\n    render() {\n        const {nodes} = this.state;\n        console.log(nodes);\n\n        return (\n            <div className=\"grid\">\n                {nodes.map((row, rowIdx) => {\n                    return(\n                        <div key={rowIdx}>\n                            {row.map((node, nodeIdx) => {\n                                const {isStart, isFinish} = node;\n                                return <Node key={nodeIdx} isStart={isStart} isFinish={isFinish} test={'foo'} test={'kappa'}/>\n                            })}\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nexport default PathfindingVisualizer;"]},"metadata":{},"sourceType":"module"}