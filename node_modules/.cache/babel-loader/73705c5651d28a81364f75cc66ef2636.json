{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n    const stop = message.data[1];\n    message.data[0].map(node => {\n      if (node.isStart === true) startNode = node;\n      if (node.isStop === true) stopNode = node;\n      if (node.isFinish === true) finishNode = node;\n    });\n    console.log(startNode, stopNode, finishNode, stop, message.data);\n    var nodesInShortestPathOrder = [];\n\n    if (!stop) {\n      let currentNode = finishNode;\n\n      while (currentNode !== null) {\n        if (currentNode.isStart == true) break;\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n      }\n\n      postMessage(nodesInShortestPathOrder);\n    }\n\n    postMessage(nodesInShortestPathOrder);\n  });\n});","map":{"version":3,"names":["self","addEventListener","message","stop","data","map","node","isStart","startNode","isStop","stopNode","isFinish","finishNode","console","log","nodesInShortestPathOrder","currentNode","unshift","previousNode","postMessage"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/pathGrabWorker.js"],"sourcesContent":["// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n\n        if (!message) return;\n\n        const stop = message.data[1]\n\n        message.data[0].map((node) => {\n\n            if(node.isStart === true) startNode = node\n\n            if(node.isStop === true) stopNode = node\n\n            if(node.isFinish === true) finishNode = node\n\n        })\n        console.log(startNode, stopNode, finishNode, stop, message.data)\n\n        var nodesInShortestPathOrder = [];\n\n        if(!stop) {\n\n            let currentNode = finishNode\n\n            while (currentNode !== null) {\n\n                if(currentNode.isStart==true) break;\n\n                nodesInShortestPathOrder.unshift(currentNode);\n                currentNode = currentNode.previousNode;\n            }\n\n            postMessage(nodesInShortestPathOrder)\n        }\n\n        postMessage(nodesInShortestPathOrder)\n    })\n}"],"mappings":"AAAA;AACA,IAAIA,IAAI,GAAG,IAAX;AACA,gBAAe,MAAM;EACjB;EACAA,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAiCC,OAAO,IAAI;IAExC,IAAI,CAACA,OAAL,EAAc;IAEd,MAAMC,IAAI,GAAGD,OAAO,CAACE,IAAR,CAAa,CAAb,CAAb;IAEAF,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBC,GAAhB,CAAqBC,IAAD,IAAU;MAE1B,IAAGA,IAAI,CAACC,OAAL,KAAiB,IAApB,EAA0BC,SAAS,GAAGF,IAAZ;MAE1B,IAAGA,IAAI,CAACG,MAAL,KAAgB,IAAnB,EAAyBC,QAAQ,GAAGJ,IAAX;MAEzB,IAAGA,IAAI,CAACK,QAAL,KAAkB,IAArB,EAA2BC,UAAU,GAAGN,IAAb;IAE9B,CARD;IASAO,OAAO,CAACC,GAAR,CAAYN,SAAZ,EAAuBE,QAAvB,EAAiCE,UAAjC,EAA6CT,IAA7C,EAAmDD,OAAO,CAACE,IAA3D;IAEA,IAAIW,wBAAwB,GAAG,EAA/B;;IAEA,IAAG,CAACZ,IAAJ,EAAU;MAEN,IAAIa,WAAW,GAAGJ,UAAlB;;MAEA,OAAOI,WAAW,KAAK,IAAvB,EAA6B;QAEzB,IAAGA,WAAW,CAACT,OAAZ,IAAqB,IAAxB,EAA8B;QAE9BQ,wBAAwB,CAACE,OAAzB,CAAiCD,WAAjC;QACAA,WAAW,GAAGA,WAAW,CAACE,YAA1B;MACH;;MAEDC,WAAW,CAACJ,wBAAD,CAAX;IACH;;IAEDI,WAAW,CAACJ,wBAAD,CAAX;EACH,CAnCD;AAoCH,CAtCD"},"metadata":{},"sourceType":"module"}