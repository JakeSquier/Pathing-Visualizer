{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n\n    function bidirectionalGreedySearch(grid, startNode, finishNode, stopNode) {\n      let isStop = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      if (!startNode || !finishNode || startNode === finishNode) {\n        return false;\n      }\n\n      if (isStop) {\n        let unvisitedNodesStart = [];\n        let visitedNodesInOrderStart = [];\n        let unvisitedNodesStopFirst = [];\n        let visitedNodesInOrderStopFirst = [];\n        let unvisitedNodesStopSecond = [];\n        let visitedNodesInOrderStopSecond = [];\n        let unvisitedNodesFinish = [];\n        let visitedNodesInOrderFinish = [];\n        startNode.distance = 0;\n        stopNode.distance = 0;\n        stopNode.distanceSecond = 0;\n        finishNode.distanceSecond = 0;\n        unvisitedNodesStart.push(startNode);\n        unvisitedNodesStopFirst.push(stopNode);\n        unvisitedNodesStopSecond.push(stopNode);\n        unvisitedNodesFinish.push(finishNode);\n\n        while (unvisitedNodesStart.length !== 0 && unvisitedNodesStopFirst.length !== 0) {\n          unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance);\n          unvisitedNodesStopFirst.sort((a, b) => a.totalDistance - b.totalDistance);\n          let closestNodeStart = unvisitedNodesStart.shift();\n          let closestNodeStop = unvisitedNodesStopFirst.shift();\n          closestNodeStart.isVisited = true;\n          closestNodeStop.isVisited = true;\n          visitedNodesInOrderStart.push(closestNodeStart);\n          visitedNodesInOrderStopFirst.push(closestNodeStop);\n\n          if (isNeighbour(closestNodeStart, closestNodeStop)) {\n            return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true];\n          } //start side search\n\n\n          let neighbours = getNeighbours(closestNodeStart, grid);\n\n          for (let neighbour of neighbours) {\n            if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStopFirst)) {\n              visitedNodesInOrderStart.push(closestNodeStart);\n              visitedNodesInOrderStopFirst.push(neighbour);\n              console.log(unvisitedNodesStart, unvisitedNodesStopFirst, neighbours, neighbour);\n              return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true];\n            }\n\n            let distance = closestNodeStart.distance + 1;\n\n            if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n              unvisitedNodesStart.unshift(neighbour);\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, stopNode);\n              neighbour.previousNode = closestNodeStart;\n            } else if (distance < neighbour.distance) {\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, stopNode);\n              neighbour.previousNode = closestNodeStart;\n            }\n          } //stop side search\n\n\n          neighbours = getNeighbours(closestNodeStop, grid);\n\n          for (let neighbour of neighbours) {\n            if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n              visitedNodesInOrderStopFirst.push(closestNodeStop);\n              visitedNodesInOrderStart.push(neighbour);\n              return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true];\n            }\n\n            let distance = closestNodeStop.distance + 1; //f(n) = h(n)\n\n            if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStopFirst)) {\n              unvisitedNodesStopFirst.unshift(neighbour);\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n              neighbour.previousNode = closestNodeStop;\n            } else if (distance < neighbour.distance) {\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n              neighbour.previousNode = closestNodeStop;\n            }\n          }\n        }\n\n        while (unvisitedNodesStopSecond.length !== 0 && unvisitedNodesFinish.length !== 0) {\n          unvisitedNodesStopSecond.sort((a, b) => a.totalDistanceSecond - b.totalDistanceSecond);\n          unvisitedNodesFinish.sort((a, b) => a.totalDistanceSecond - b.totalDistanceSecond);\n          let closestNodeStopSecond = unvisitedNodesStopSecond.shift();\n          let closestNodeFinish = unvisitedNodesFinish.shift();\n          closestNodeStopSecond.isVisitedSecond = true;\n          closestNodeFinish.isVisitedSecond = true;\n          visitedNodesInOrderStopSecond.push(closestNodeStopSecond);\n          visitedNodesInOrderFinish.push(closestNodeFinish);\n\n          if (isNeighbour(closestNodeStopSecond, closestNodeFinish)) {\n            return [visitedNodesInOrderStopSecond, visitedNodesInOrderFinish, true];\n          } //stop side search 2nd\n\n\n          let neighbours = getNeighbours(closestNodeStopSecond, grid, true);\n\n          for (let neighbour of neighbours) {\n            if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n              visitedNodesInOrderStopSecond.push(closestNodeStopSecond);\n              visitedNodesInOrderFinish.push(neighbour);\n              return [visitedNodesInOrderStopSecond, visitedNodesInOrderFinish, true];\n            }\n\n            let distance = closestNodeStopSecond.distanceSecond + 1;\n\n            if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStopSecond)) {\n              unvisitedNodesStopSecond.unshift(neighbour);\n              neighbour.distanceSecond = distance;\n              neighbour.totalDistanceSecond = manhattenDistance(neighbour, finishNode);\n              neighbour.previousNodeSecond = closestNodeStopSecond;\n            } else if (distance < neighbour.distanceSecond) {\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n              neighbour.previousNode = closestNodeStart;\n            }\n          } //stop side search\n\n\n          neighbours = getNeighbours(closestNodeStop, grid);\n\n          for (let neighbour of neighbours) {\n            if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n              visitedNodesInOrderStopFirst.push(closestNodeStop);\n              visitedNodesInOrderStart.push(neighbour);\n              return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true];\n            }\n\n            let distance = closestNodeStop.distance + 1; //f(n) = h(n)\n\n            if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStopFirst)) {\n              unvisitedNodesStopFirst.unshift(neighbour);\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n              neighbour.previousNode = closestNodeStop;\n            } else if (distance < neighbour.distance) {\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n              neighbour.previousNode = closestNodeStop;\n            }\n          }\n        }\n\n        return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, false];\n      } else {\n        let unvisitedNodesStart = [];\n        let visitedNodesInOrderStart = [];\n        let unvisitedNodesFinish = [];\n        let visitedNodesInOrderFinish = [];\n        startNode.distance = 0;\n        finishNode.distance = 0;\n        unvisitedNodesStart.push(startNode);\n        unvisitedNodesFinish.push(finishNode);\n\n        while (unvisitedNodesStart.length !== 0 && unvisitedNodesFinish.length !== 0) {\n          unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance);\n          unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance);\n          let closestNodeStart = unvisitedNodesStart.shift();\n          let closestNodeFinish = unvisitedNodesFinish.shift();\n          closestNodeStart.isVisited = true;\n          closestNodeFinish.isVisited = true;\n          visitedNodesInOrderStart.push(closestNodeStart);\n          visitedNodesInOrderFinish.push(closestNodeFinish);\n\n          if (isNeighbour(closestNodeStart, closestNodeFinish)) {\n            return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n          } //Start side search\n\n\n          let neighbours = getNeighbours(closestNodeStart, grid);\n\n          for (let neighbour of neighbours) {\n            if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n              visitedNodesInOrderStart.push(closestNodeStart);\n              visitedNodesInOrderFinish.push(neighbour);\n              return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n            }\n\n            let distance = closestNodeStart.distance + 1; //f(n) = h(n)\n\n            if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n              unvisitedNodesStart.unshift(neighbour);\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n              neighbour.previousNode = closestNodeStart;\n            } else if (distance < neighbour.distance) {\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n              neighbour.previousNode = closestNodeStart;\n            }\n          } //Finish side search\n\n\n          neighbours = getNeighbours(closestNodeFinish, grid);\n\n          for (let neighbour of neighbours) {\n            if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n              visitedNodesInOrderFinish.push(closestNodeFinish);\n              visitedNodesInOrderStart.push(neighbour);\n              return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n            }\n\n            let distance = closestNodeFinish.distance + 1; //f(n) = h(n)\n\n            if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n              unvisitedNodesFinish.unshift(neighbour);\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n              neighbour.previousNode = closestNodeFinish;\n            } else if (distance < neighbour.distance) {\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n              neighbour.previousNode = closestNodeFinish;\n            }\n          }\n        }\n\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false];\n      }\n    }\n\n    function isNeighbour(closestNodeStart, closestNodeFinish) {\n      let rowStart = closestNodeStart.row;\n      let colStart = closestNodeStart.col;\n      let rowFinish = closestNodeFinish.row;\n      let colFinish = closestNodeFinish.col;\n      if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\n      if (rowFinish === rowStart && colFinish === colStart + 1) return true;\n      if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\n      if (rowFinish === rowStart && colFinish === colStart - 1) return true;\n      return false;\n    }\n\n    function getNeighbours(node, grid) {\n      let isStop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      let neighbours = [];\n      let {\n        row,\n        col\n      } = node;\n      if (row !== 0) neighbours.push(grid[row - 1][col]);\n      if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n      if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n      if (col !== 0) neighbours.push(grid[row][col - 1]);\n\n      if (isStop) {\n        return neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisitedSecond);\n      } else {\n        return neighbours.filter(neighbour => !neighbour.isWall && !neighbour.isVisited);\n      }\n    }\n\n    function manhattenDistance(nodeA, nodeB) {\n      let x = Math.abs(nodeA.row - nodeB.row);\n      let y = Math.abs(nodeA.col - nodeB.col);\n      return x + y;\n    }\n\n    function neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n      for (let node of unvisitedNodes) {\n        if (node.row === neighbour.row && node.col === neighbour.col) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    const grid = message.data[0];\n    const startNode = message.data[1];\n    const finishNode = message.data[2];\n    const stopNode = message.data[3];\n    const isStop = message.data[4];\n    const visitedNodesInorder = bidirectionalGreedySearch(grid, startNode, finishNode, stopNode, isStop);\n    postMessage(visitedNodesInorder);\n  });\n});\nexport function getNodesInShortestPathOrderBidirectionalGreedySearch(nodeA, nodeB) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = nodeB;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.push(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  currentNode = nodeA;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["self","addEventListener","message","bidirectionalGreedySearch","grid","startNode","finishNode","stopNode","isStop","unvisitedNodesStart","visitedNodesInOrderStart","unvisitedNodesStopFirst","visitedNodesInOrderStopFirst","unvisitedNodesStopSecond","visitedNodesInOrderStopSecond","unvisitedNodesFinish","visitedNodesInOrderFinish","distance","distanceSecond","push","length","sort","a","b","totalDistance","closestNodeStart","shift","closestNodeStop","isVisited","isNeighbour","neighbours","getNeighbours","neighbour","neighbourNotInUnvisitedNodes","console","log","unshift","manhattenDistance","previousNode","totalDistanceSecond","closestNodeStopSecond","closestNodeFinish","isVisitedSecond","previousNodeSecond","rowStart","row","colStart","col","rowFinish","colFinish","node","filter","isWall","nodeA","nodeB","x","Math","abs","y","unvisitedNodes","data","visitedNodesInorder","postMessage","getNodesInShortestPathOrderBidirectionalGreedySearch","nodesInShortestPathOrder","currentNode"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/bidirectionalGreedySearchWorker.js"],"sourcesContent":["// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n        if (!message) return;\n        function bidirectionalGreedySearch(grid, startNode, finishNode, stopNode, isStop=false) {\n            if (!startNode || !finishNode || startNode === finishNode) {\n            return false;\n            }\n\n            if(isStop) {\n\n\n                let unvisitedNodesStart = [];\n                let visitedNodesInOrderStart = [];\n                let unvisitedNodesStopFirst = [];\n                let visitedNodesInOrderStopFirst = [];\n                let unvisitedNodesStopSecond = [];\n                let visitedNodesInOrderStopSecond = [];\n                let unvisitedNodesFinish = [];\n                let visitedNodesInOrderFinish = [];\n                startNode.distance = 0\n                stopNode.distance = 0\n                stopNode.distanceSecond = 0\n                finishNode.distanceSecond = 0\n                unvisitedNodesStart.push(startNode)\n                unvisitedNodesStopFirst.push(stopNode)\n                unvisitedNodesStopSecond.push(stopNode)\n                unvisitedNodesFinish.push(finishNode)\n\n                while (\n                    unvisitedNodesStart.length !== 0 &&\n                    unvisitedNodesStopFirst.length !== 0\n                ) {\n                    unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance)\n                    unvisitedNodesStopFirst.sort((a, b) => a.totalDistance - b.totalDistance)\n                    let closestNodeStart = unvisitedNodesStart.shift()\n                    let closestNodeStop = unvisitedNodesStopFirst.shift()\n\n                    closestNodeStart.isVisited = true\n                    closestNodeStop.isVisited = true\n                    visitedNodesInOrderStart.push(closestNodeStart)\n                    visitedNodesInOrderStopFirst.push(closestNodeStop)\n                    if (isNeighbour(closestNodeStart, closestNodeStop)) {\n                        return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true]\n                    }\n\n                    //start side search\n                    let neighbours = getNeighbours(closestNodeStart, grid)\n                    for(let neighbour of neighbours) {\n                        if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStopFirst)) {\n                            visitedNodesInOrderStart.push(closestNodeStart);\n                            visitedNodesInOrderStopFirst.push(neighbour);\n                            console.log(unvisitedNodesStart, unvisitedNodesStopFirst, neighbours, neighbour)\n                            return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true]\n                        }\n                        let distance = closestNodeStart.distance + 1\n\n                        if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n                            unvisitedNodesStart.unshift(neighbour)\n                            neighbour.distance = distance\n                            neighbour.totalDistance = manhattenDistance(neighbour, stopNode)\n                            neighbour.previousNode = closestNodeStart\n                        } else if (distance < neighbour.distance) {\n                            neighbour.distance = distance;\n                            neighbour.totalDistance = manhattenDistance(neighbour, stopNode);\n                            neighbour.previousNode = closestNodeStart;\n                        }\n                    }\n\n                    //stop side search\n                    neighbours = getNeighbours(closestNodeStop, grid);\n                    for (let neighbour of neighbours) {\n                        if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n                            visitedNodesInOrderStopFirst.push(closestNodeStop);\n                            visitedNodesInOrderStart.push(neighbour);\n                            return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true];\n                        }\n                        let distance = closestNodeStop.distance + 1;\n                        //f(n) = h(n)\n                        if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStopFirst)) {\n                            unvisitedNodesStopFirst.unshift(neighbour);\n                            neighbour.distance = distance;\n                            neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n                            neighbour.previousNode = closestNodeStop;\n                        } else if (distance < neighbour.distance) {\n                            neighbour.distance = distance;\n                            neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n                            neighbour.previousNode = closestNodeStop;\n                        }\n                    }\n                }\n\n                while (\n                    unvisitedNodesStopSecond.length !== 0 &&\n                    unvisitedNodesFinish.length !== 0\n                ) {\n                    unvisitedNodesStopSecond.sort((a, b) => a.totalDistanceSecond - b.totalDistanceSecond)\n                    unvisitedNodesFinish.sort((a, b) => a.totalDistanceSecond - b.totalDistanceSecond)\n                    let closestNodeStopSecond = unvisitedNodesStopSecond.shift()\n                    let closestNodeFinish = unvisitedNodesFinish.shift()\n\n                    closestNodeStopSecond.isVisitedSecond = true\n                    closestNodeFinish.isVisitedSecond = true\n                    visitedNodesInOrderStopSecond.push(closestNodeStopSecond)\n                    visitedNodesInOrderFinish.push(closestNodeFinish)\n                    if (isNeighbour(closestNodeStopSecond, closestNodeFinish)) {\n                        return [visitedNodesInOrderStopSecond, visitedNodesInOrderFinish, true]\n                    }\n\n                    //stop side search 2nd\n                    let neighbours = getNeighbours(closestNodeStopSecond, grid, true)\n                    for(let neighbour of neighbours) {\n                        if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n                            visitedNodesInOrderStopSecond.push(closestNodeStopSecond);\n                            visitedNodesInOrderFinish.push(neighbour);\n                            return [visitedNodesInOrderStopSecond, visitedNodesInOrderFinish, true]\n                        }\n                        let distance = closestNodeStopSecond.distanceSecond + 1\n                        \n                        if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStopSecond)) {\n                            unvisitedNodesStopSecond.unshift(neighbour)\n                            neighbour.distanceSecond = distance\n                            neighbour.totalDistanceSecond = manhattenDistance(neighbour, finishNode)\n                            neighbour.previousNodeSecond = closestNodeStopSecond\n                        } else if (distance < neighbour.distanceSecond) {\n                            neighbour.distance = distance;\n                            neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n                            neighbour.previousNode = closestNodeStart;\n                        }\n                    }\n\n                    //stop side search\n                    neighbours = getNeighbours(closestNodeStop, grid);\n                    for (let neighbour of neighbours) {\n                        if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n                            visitedNodesInOrderStopFirst.push(closestNodeStop);\n                            visitedNodesInOrderStart.push(neighbour);\n                            return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, true];\n                        }\n                        let distance = closestNodeStop.distance + 1;\n                        //f(n) = h(n)\n                        if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStopFirst)) {\n                            unvisitedNodesStopFirst.unshift(neighbour);\n                            neighbour.distance = distance;\n                            neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n                            neighbour.previousNode = closestNodeStop;\n                        } else if (distance < neighbour.distance) {\n                            neighbour.distance = distance;\n                            neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n                            neighbour.previousNode = closestNodeStop;\n                        }\n                    }\n                }\n\n\n\n                return [visitedNodesInOrderStart, visitedNodesInOrderStopFirst, false]\n\n\n            } else {\n\n                let unvisitedNodesStart = []\n                let visitedNodesInOrderStart = []\n                let unvisitedNodesFinish = []\n                let visitedNodesInOrderFinish = []\n                startNode.distance = 0\n                finishNode.distance = 0\n                unvisitedNodesStart.push(startNode)\n                unvisitedNodesFinish.push(finishNode)\n            \n                while (\n                    unvisitedNodesStart.length !== 0 &&\n                    unvisitedNodesFinish.length !== 0\n                ) {\n                    unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance)\n                    unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance)\n                    let closestNodeStart = unvisitedNodesStart.shift()\n                    let closestNodeFinish = unvisitedNodesFinish.shift()\n            \n                    closestNodeStart.isVisited = true;\n                    closestNodeFinish.isVisited = true;\n                    visitedNodesInOrderStart.push(closestNodeStart);\n                    visitedNodesInOrderFinish.push(closestNodeFinish);\n                    if (isNeighbour(closestNodeStart, closestNodeFinish)) {\n                        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n                    }\n                \n                    //Start side search\n                    let neighbours = getNeighbours(closestNodeStart, grid);\n                    for (let neighbour of neighbours) {\n                        if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n                            visitedNodesInOrderStart.push(closestNodeStart);\n                            visitedNodesInOrderFinish.push(neighbour);\n                            return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n                        }\n                        let distance = closestNodeStart.distance + 1;\n                        //f(n) = h(n)\n                        if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n                            unvisitedNodesStart.unshift(neighbour);\n                            neighbour.distance = distance;\n                            neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n                            neighbour.previousNode = closestNodeStart;\n                        } else if (distance < neighbour.distance) {\n                            neighbour.distance = distance;\n                            neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n                            neighbour.previousNode = closestNodeStart;\n                        }\n                    }\n                \n                    //Finish side search\n                    neighbours = getNeighbours(closestNodeFinish, grid);\n                    for (let neighbour of neighbours) {\n                        if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n                            visitedNodesInOrderFinish.push(closestNodeFinish);\n                            visitedNodesInOrderStart.push(neighbour);\n                            return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n                        }\n                        let distance = closestNodeFinish.distance + 1;\n                        //f(n) = h(n)\n                        if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n                            unvisitedNodesFinish.unshift(neighbour);\n                            neighbour.distance = distance;\n                            neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n                        neighbour.previousNode = closestNodeFinish;\n                        } else if (distance < neighbour.distance) {\n                            neighbour.distance = distance;\n                            neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n                            neighbour.previousNode = closestNodeFinish;\n                        }\n                    }\n                }\n                return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false]\n            }\n            \n            \n        }\n        \n        function isNeighbour(closestNodeStart, closestNodeFinish) {\n            let rowStart = closestNodeStart.row;\n            let colStart = closestNodeStart.col;\n            let rowFinish = closestNodeFinish.row;\n            let colFinish = closestNodeFinish.col;\n            if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\n            if (rowFinish === rowStart && colFinish === colStart + 1) return true;\n            if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\n            if (rowFinish === rowStart && colFinish === colStart - 1) return true;\n            return false;\n        }\n        \n        function getNeighbours(node, grid, isStop=false) {\n            let neighbours = [];\n            let { row, col } = node;\n            if (row !== 0) neighbours.push(grid[row - 1][col]);\n            if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n            if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n            if (col !== 0) neighbours.push(grid[row][col - 1]);\n            \n            if(isStop) {\n                return neighbours.filter(\n                    (neighbour) => !neighbour.isWall && !neighbour.isVisitedSecond\n                );\n            } else {\n                return neighbours.filter(\n                    (neighbour) => !neighbour.isWall && !neighbour.isVisited\n                );\n            }\n        }\n        \n        function manhattenDistance(nodeA, nodeB) {\n            let x = Math.abs(nodeA.row - nodeB.row);\n            let y = Math.abs(nodeA.col - nodeB.col);\n            return x + y;\n        }\n        \n        function neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n            for (let node of unvisitedNodes) {\n                if (node.row === neighbour.row && node.col === neighbour.col) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        const grid = message.data[0]\n        const startNode = message.data[1]\n        const finishNode = message.data[2]\n        const stopNode = message.data[3]\n        const isStop = message.data[4]\n        const visitedNodesInorder = bidirectionalGreedySearch(grid, startNode, finishNode, stopNode, isStop)\n\n        postMessage(visitedNodesInorder);\n    })\n}\n\nexport function getNodesInShortestPathOrderBidirectionalGreedySearch(\n    nodeA,\n    nodeB\n  ) {\n    let nodesInShortestPathOrder = [];\n    let currentNode = nodeB;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.push(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    currentNode = nodeA;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}