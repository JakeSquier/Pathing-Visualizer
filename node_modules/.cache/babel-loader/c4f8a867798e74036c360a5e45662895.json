{"ast":null,"code":"export function breadthFirstSearch(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes) {\n    // sortNodesByDistance(unvisitedNodes, finishNode)\n    // const closestNode = unvisitedNodes.shift();\n    // if(closestNode.isWall) continue;\n    // if(closestNode.distance === Infinity) return visitedNodesInOrder;\n    // closestNode.isVisited = true;\n    // visitedNodesInOrder.push(closestNode);\n    // if(closestNode === finishNode) return visitedNodesInOrder;\n    // updateUnvisitedNeighbors(closestNode, grid);\n    const {\n      row,\n      col\n    } = startNode;\n    const neighors = getUnvisitedNeighbors(startNode, grid);\n    console.log(neighbor);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n  unvisitedNodes.sort((nodeA, nodeB) => {\n    return nodeA.distance - nodeB.distance;\n  });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/algorithims/breadthFirstSearch.js"],"names":["breadthFirstSearch","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","row","col","neighors","getUnvisitedNeighbors","console","log","neighbor","sortNodesByDistance","sort","nodeA","nodeB","updateUnvisitedNeighbors","node","unvisitedNeighbors","previousNode","neighbors","push","length","filter","isVisited","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["export function breadthFirstSearch(grid, startNode, finishNode){\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid)\n    while(!!unvisitedNodes){\n        // sortNodesByDistance(unvisitedNodes, finishNode)\n        // const closestNode = unvisitedNodes.shift();\n\n        // if(closestNode.isWall) continue;\n\n        // if(closestNode.distance === Infinity) return visitedNodesInOrder;\n        // closestNode.isVisited = true;\n        // visitedNodesInOrder.push(closestNode);\n\n        // if(closestNode === finishNode) return visitedNodesInOrder;\n\n        // updateUnvisitedNeighbors(closestNode, grid);\n        const {row, col} = startNode\n\n        const neighors = getUnvisitedNeighbors(startNode, grid)\n        console.log(neighbor)\n    }\n\n}\n\nfunction sortNodesByDistance(unvisitedNodes, finishNode) {\n    unvisitedNodes.sort((nodeA, nodeB) => {\n        return (nodeA.distance) - (nodeB.distance)\n    });\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n}\n  \nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"]},"metadata":{},"sourceType":"module"}