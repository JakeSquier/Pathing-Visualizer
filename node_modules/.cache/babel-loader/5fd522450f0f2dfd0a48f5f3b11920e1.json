{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";var walls;export function verticalMaze(grid,startNode,finishNode){if(!startNode||!finishNode||startNode===finishNode){return false;}var vertical=range(grid[0].length);var horizontal=range(grid.length);walls=[];getVerticalWalls(vertical,horizontal,startNode,finishNode);return walls;}function range(len){var result=[];for(var i=0;i<len;i++){result.push(i);}return result;}function getVerticalWalls(vertical,horizontal,startNode,finishNode){if(vertical.length<2){return;}var choice=Math.floor(Math.random()*2);var _iterator=_createForOfIteratorHelper(vertical),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var num=_step.value;if(choice===0&&num%2!==0){addWall(num,horizontal,startNode,finishNode);}if(choice===1&&num%2===0){addWall(num,horizontal,startNode,finishNode);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}}function addWall(num,horizontal,startNode,finishNode){var isStartFinish=false;var tempWalls=[];var _iterator2=_createForOfIteratorHelper(horizontal),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var temp=_step2.value;if(temp===startNode.row&&num===startNode.col||temp===finishNode.row&&num===finishNode.col){isStartFinish=true;continue;}tempWalls.push([temp,num]);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}if(!isStartFinish){tempWalls.splice(Math.floor(Math.random()*tempWalls.length),1);}for(var _i=0,_tempWalls=tempWalls;_i<_tempWalls.length;_i++){var wall=_tempWalls[_i];walls.push(wall);}}","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/mazeAlgorithims/verticalMaze.js"],"names":["walls","verticalMaze","grid","startNode","finishNode","vertical","range","length","horizontal","getVerticalWalls","len","result","i","push","choice","Math","floor","random","num","addWall","isStartFinish","tempWalls","temp","row","col","splice","wall"],"mappings":"mNAAA,GAAIA,CAAAA,KAAJ,CACA,MAAO,SAASC,CAAAA,YAAT,CAAsBC,IAAtB,CAA4BC,SAA5B,CAAuCC,UAAvC,CAAmD,CACxD,GAAI,CAACD,SAAD,EAAc,CAACC,UAAf,EAA6BD,SAAS,GAAKC,UAA/C,CAA2D,CACzD,MAAO,MAAP,CACD,CACD,GAAIC,CAAAA,QAAQ,CAAGC,KAAK,CAACJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,MAAT,CAApB,CACA,GAAIC,CAAAA,UAAU,CAAGF,KAAK,CAACJ,IAAI,CAACK,MAAN,CAAtB,CACAP,KAAK,CAAG,EAAR,CACAS,gBAAgB,CAACJ,QAAD,CAAWG,UAAX,CAAuBL,SAAvB,CAAkCC,UAAlC,CAAhB,CACA,MAAOJ,CAAAA,KAAP,CACD,CAED,QAASM,CAAAA,KAAT,CAAeI,GAAf,CAAoB,CAClB,GAAIC,CAAAA,MAAM,CAAG,EAAb,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,GAApB,CAAyBE,CAAC,EAA1B,CAA8B,CAC5BD,MAAM,CAACE,IAAP,CAAYD,CAAZ,EACD,CACD,MAAOD,CAAAA,MAAP,CACD,CAED,QAASF,CAAAA,gBAAT,CAA0BJ,QAA1B,CAAoCG,UAApC,CAAgDL,SAAhD,CAA2DC,UAA3D,CAAuE,CACrE,GAAIC,QAAQ,CAACE,MAAT,CAAkB,CAAtB,CAAyB,CACvB,OACD,CAED,GAAIO,CAAAA,MAAM,CAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgB,CAA3B,CAAb,CALqE,yCAMrDZ,QANqD,YAMrE,+CAA0B,IAAjBa,CAAAA,GAAiB,aACxB,GAAIJ,MAAM,GAAK,CAAX,EAAgBI,GAAG,CAAG,CAAN,GAAY,CAAhC,CAAmC,CACjCC,OAAO,CAACD,GAAD,CAAMV,UAAN,CAAkBL,SAAlB,CAA6BC,UAA7B,CAAP,CACD,CACD,GAAIU,MAAM,GAAK,CAAX,EAAgBI,GAAG,CAAG,CAAN,GAAY,CAAhC,CAAmC,CACjCC,OAAO,CAACD,GAAD,CAAMV,UAAN,CAAkBL,SAAlB,CAA6BC,UAA7B,CAAP,CACD,CACF,CAboE,qDActE,CAED,QAASe,CAAAA,OAAT,CAAiBD,GAAjB,CAAsBV,UAAtB,CAAkCL,SAAlC,CAA6CC,UAA7C,CAAyD,CACvD,GAAIgB,CAAAA,aAAa,CAAG,KAApB,CACA,GAAIC,CAAAA,SAAS,CAAG,EAAhB,CAFuD,0CAGtCb,UAHsC,aAGvD,kDAA6B,IAApBc,CAAAA,IAAoB,cAC3B,GACGA,IAAI,GAAKnB,SAAS,CAACoB,GAAnB,EAA0BL,GAAG,GAAKf,SAAS,CAACqB,GAA7C,EACCF,IAAI,GAAKlB,UAAU,CAACmB,GAApB,EAA2BL,GAAG,GAAKd,UAAU,CAACoB,GAFjD,CAGE,CACAJ,aAAa,CAAG,IAAhB,CACA,SACD,CACDC,SAAS,CAACR,IAAV,CAAe,CAACS,IAAD,CAAOJ,GAAP,CAAf,EACD,CAZsD,uDAavD,GAAI,CAACE,aAAL,CAAoB,CAClBC,SAAS,CAACI,MAAV,CAAiBV,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBI,SAAS,CAACd,MAArC,CAAjB,CAA+D,CAA/D,EACD,CACD,wBAAiBc,SAAjB,2BAA4B,CAAvB,GAAIK,CAAAA,IAAI,eAAR,CACH1B,KAAK,CAACa,IAAN,CAAWa,IAAX,EACD,CACF","sourcesContent":["let walls;\nexport function verticalMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getVerticalWalls(vertical, horizontal, startNode, finishNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction getVerticalWalls(vertical, horizontal, startNode, finishNode) {\n  if (vertical.length < 2) {\n    return;\n  }\n\n  let choice = Math.floor(Math.random() * 2);\n  for (let num of vertical) {\n    if (choice === 0 && num % 2 !== 0) {\n      addWall(num, horizontal, startNode, finishNode);\n    }\n    if (choice === 1 && num % 2 === 0) {\n      addWall(num, horizontal, startNode, finishNode);\n    }\n  }\n}\n\nfunction addWall(num, horizontal, startNode, finishNode) {\n  let isStartFinish = false;\n  let tempWalls = [];\n  for (let temp of horizontal) {\n    if (\n      (temp === startNode.row && num === startNode.col) ||\n      (temp === finishNode.row && num === finishNode.col)\n    ) {\n      isStartFinish = true;\n      continue;\n    }\n    tempWalls.push([temp, num]);\n  }\n  if (!isStartFinish) {\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}"]},"metadata":{},"sourceType":"module"}