{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n\n    function bfs(grid, startNode, finishNode) {\n      let stopNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var isStop;\n\n      if (stopNode !== false) {\n        isStop = true;\n      } else {\n        isStop = false;\n      }\n\n      let visitedNodesInOrder = []; // queue to keep track of the visited nodes\n\n      let queue = [];\n      queue.push(startNode);\n\n      while (queue.length) {\n        const currNode = queue.shift(); // if the finsih node is reached then we return the visitedNodes array\n\n        if (currNode === finishNode) return visitedNodesInOrder; // we skip the nodes which are walls, start node or finish node\n\n        if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n          currNode.isVisited = true;\n          visitedNodesInOrder.push(currNode);\n          const {\n            row,\n            col\n          } = currNode;\n          updateUnvisitedNeighbours(row, col, queue, grid, currNode, false);\n        }\n      }\n    } // updates the neighbours,\n    // in correspondance to the algorithm \n\n\n    function updateUnvisitedNeighbours(row, col, queue, grid, currNode) {\n      let next;\n\n      if (row > 0) {\n        next = grid[row - 1][col];\n\n        if (!next.isVisited) {\n          queue.push(next);\n          next.previousNode = currNode;\n        }\n      }\n\n      if (row < grid.length - 1) {\n        next = grid[row + 1][col];\n\n        if (!next.isVisited) {\n          queue.push(next);\n          next.previousNode = currNode;\n        }\n      }\n\n      if (col > 0) {\n        next = grid[row][col - 1];\n\n        if (!next.isVisited) {\n          queue.push(next);\n          next.previousNode = currNode;\n        }\n      }\n\n      if (col < grid[0].length - 1) {\n        next = grid[row][col + 1];\n\n        if (!next.isVisited) {\n          queue.push(next);\n          next.previousNode = currNode;\n        }\n      }\n    }\n\n    const grid = message.data[0];\n    const startNode = message.data[1];\n    const finishNode = message.data[2];\n    const stopNode = message.data[3];\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode, stopNode);\n    postMessage(visitedNodesInOrder);\n  });\n});","map":{"version":3,"names":["self","addEventListener","message","bfs","grid","startNode","finishNode","stopNode","isStop","visitedNodesInOrder","queue","push","length","currNode","shift","isWall","isStart","isVisited","row","col","updateUnvisitedNeighbours","next","previousNode","data","postMessage"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/breadthFirstSearchWorker.js"],"sourcesContent":["\n// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n      if (!message) return;\n        function bfs(grid, startNode, finishNode, stopNode=false) {\n            \n            var isStop;\n            if(stopNode!==false){\n                isStop = true\n            } else {\n                isStop = false\n            }\n            let visitedNodesInOrder = [];\n            // queue to keep track of the visited nodes\n                let queue = [];\n                queue.push(startNode);\n                while (queue.length) {\n                    const currNode = queue.shift();\n                    // if the finsih node is reached then we return the visitedNodes array\n                    if (currNode === finishNode) return visitedNodesInOrder;\n                    \n                    // we skip the nodes which are walls, start node or finish node\n                    if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n                        currNode.isVisited = true;\n                        visitedNodesInOrder.push(currNode);\n                        const { row, col } = currNode;\n                        updateUnvisitedNeighbours(row, col, queue, grid,currNode, false);\n                    }\n                }\n  \n        }\n        \n        // updates the neighbours,\n        // in correspondance to the algorithm \n        function updateUnvisitedNeighbours(row,col,queue,grid,currNode) {\n            let next;\n            if (row > 0) {\n              next = grid[row - 1][col];\n              if (!next.isVisited) {\n                queue.push(next);\n                next.previousNode = currNode;\n              }\n            }\n            if (row < grid.length - 1) {\n              next = grid[row + 1][col];\n              if (!next.isVisited) {\n                queue.push(next);\n                next.previousNode = currNode;\n              }\n            }\n            if (col > 0) {\n              next = grid[row][col - 1];\n              if (!next.isVisited) {\n                queue.push(next);\n                next.previousNode = currNode;\n              }\n            }\n            if (col < grid[0].length - 1) {\n              next = grid[row][col + 1];\n              if (!next.isVisited) {\n                queue.push(next);\n                next.previousNode = currNode;\n              }\n            }\n      }\n\n        const grid = message.data[0]\n        const startNode = message.data[1]\n        const finishNode = message.data[2]\n        const stopNode = message.data[3]\n\n        const visitedNodesInOrder = bfs(grid, startNode, finishNode, stopNode)\n\n        postMessage(visitedNodesInOrder)\n    })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}