{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";var walls;export function recursiveDivisionMaze(grid,startNode,finishNode,isThereStop){var stopNode=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;if(!startNode||!finishNode||startNode===finishNode){return false;}var vertical=range(grid[0].length);var horizontal=range(grid.length);walls=[];getRecursiveWalls(vertical,horizontal,grid,startNode,finishNode,isThereStop,stopNode);return walls;}function range(len){var result=[];for(var i=0;i<len;i++){result.push(i);}return result;}//dir === 0 => Horizontal\n//dir === 1 => Vertical\nfunction getRecursiveWalls(vertical,horizontal,grid,startNode,finishNode,isThereStop,stopNode){if(vertical.length<2||horizontal.length<2){return;}var dir;var num;if(vertical.length>horizontal.length){dir=0;num=generateOddRandomNumber(vertical);}if(vertical.length<=horizontal.length){dir=1;num=generateOddRandomNumber(horizontal);}if(dir===0){addWall(dir,num,vertical,horizontal,startNode,finishNode,isThereStop,stopNode);getRecursiveWalls(vertical.slice(0,vertical.indexOf(num)),horizontal,grid,startNode,finishNode,isThereStop,stopNode);getRecursiveWalls(vertical.slice(vertical.indexOf(num)+1),horizontal,grid,startNode,finishNode,isThereStop,stopNode);}else{addWall(dir,num,vertical,horizontal,startNode,finishNode,isThereStop,stopNode);getRecursiveWalls(vertical,horizontal.slice(0,horizontal.indexOf(num)),grid,startNode,finishNode,isThereStop,stopNode);getRecursiveWalls(vertical,horizontal.slice(horizontal.indexOf(num)+1),grid,startNode,finishNode,isThereStop,stopNode);}}function generateOddRandomNumber(array){var max=array.length-1;var randomNum=Math.floor(Math.random()*(max/2))+Math.floor(Math.random()*(max/2));if(randomNum%2===0){if(randomNum===max){randomNum-=1;}else{randomNum+=1;}}return array[randomNum];}//dir === 0 => Horizontal\n//dir === 1 => Vertical\nfunction addWall(dir,num,vertical,horizontal,startNode,finishNode,isThereStop,stopNode){var isStartFinish=false;var tempWalls=[];if(dir===0){if(horizontal.length===2)return;var _iterator=_createForOfIteratorHelper(horizontal),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var temp=_step.value;if(temp===startNode.row&&num===startNode.col||temp===finishNode.row&&num===finishNode.col||isThereStop&&temp===stopNode.row&&num===stopNode.col){isStartFinish=true;continue;}tempWalls.push([temp,num]);}}catch(err){_iterator.e(err);}finally{_iterator.f();}}else{if(vertical.length===2)return;var _iterator2=_createForOfIteratorHelper(vertical),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _temp=_step2.value;if(num===startNode.row&&_temp===startNode.col||num===finishNode.row&&_temp===finishNode.col||isThereStop&&num===stopNode.row&&_temp===stopNode.col){isStartFinish=true;continue;}tempWalls.push([num,_temp]);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}if(!isStartFinish){tempWalls.splice(generateRandomNumber(tempWalls.length),1);}for(var _i=0,_tempWalls=tempWalls;_i<_tempWalls.length;_i++){var wall=_tempWalls[_i];walls.push(wall);}}function generateRandomNumber(max){var randomNum=Math.floor(Math.random()*(max/2))+Math.floor(Math.random()*(max/2));if(randomNum%2!==0){if(randomNum===max){randomNum-=1;}else{randomNum+=1;}}return randomNum;}","map":{"version":3,"names":["walls","recursiveDivisionMaze","grid","startNode","finishNode","isThereStop","stopNode","vertical","range","length","horizontal","getRecursiveWalls","len","result","i","push","dir","num","generateOddRandomNumber","addWall","slice","indexOf","array","max","randomNum","Math","floor","random","isStartFinish","tempWalls","temp","row","col","splice","generateRandomNumber","wall"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/mazeAlgorithims/recursiveDivisionMaze.js"],"sourcesContent":["let walls;\nexport function recursiveDivisionMaze(grid, startNode, finishNode, isThereStop, stopNode=false) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode, isThereStop, stopNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\n//dir === 0 => Horizontal\n//dir === 1 => Vertical\n\nfunction getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode, isThereStop, stopNode) {\n  if (vertical.length < 2 || horizontal.length < 2) {\n    return;\n  }\n  let dir;\n  let num;\n  if (vertical.length > horizontal.length) {\n    dir = 0;\n    num = generateOddRandomNumber(vertical);\n  }\n  if (vertical.length <= horizontal.length) {\n    dir = 1;\n    num = generateOddRandomNumber(horizontal);\n  }\n\n  if (dir === 0) {\n    addWall(dir, num, vertical, horizontal, startNode, finishNode, isThereStop, stopNode);\n    getRecursiveWalls(\n      vertical.slice(0, vertical.indexOf(num)),\n      horizontal,\n      grid,\n      startNode,\n      finishNode,\n      isThereStop,\n      stopNode\n    );\n    getRecursiveWalls(\n      vertical.slice(vertical.indexOf(num) + 1),\n      horizontal,\n      grid,\n      startNode,\n      finishNode,\n      isThereStop,\n      stopNode\n    );\n  } else {\n    addWall(dir, num, vertical, horizontal, startNode, finishNode, isThereStop, stopNode);\n    getRecursiveWalls(\n      vertical,\n      horizontal.slice(0, horizontal.indexOf(num)),\n      grid,\n      startNode,\n      finishNode,\n      isThereStop,\n      stopNode\n    );\n    getRecursiveWalls(\n      vertical,\n      horizontal.slice(horizontal.indexOf(num) + 1),\n      grid,\n      startNode,\n      finishNode,\n      isThereStop,\n      stopNode\n    );\n  }\n}\n\nfunction generateOddRandomNumber(array) {\n  let max = array.length - 1;\n  let randomNum =\n    Math.floor(Math.random() * (max / 2)) +\n    Math.floor(Math.random() * (max / 2));\n  if (randomNum % 2 === 0) {\n    if (randomNum === max) {\n      randomNum -= 1;\n    } else {\n      randomNum += 1;\n    }\n  }\n  return array[randomNum];\n}\n\n//dir === 0 => Horizontal\n//dir === 1 => Vertical\n\nfunction addWall(dir, num, vertical, horizontal, startNode, finishNode, isThereStop, stopNode) {\n  \n  let isStartFinish = false;\n  let tempWalls = [];\n  if (dir === 0) {\n    if (horizontal.length === 2) return;\n    for (let temp of horizontal) {\n      if (\n        (temp === startNode.row && num === startNode.col) ||\n        (temp === finishNode.row && num === finishNode.col) ||\n        (isThereStop && (temp === stopNode.row && num === stopNode.col))\n      ) {\n        isStartFinish = true;\n        continue;\n      }\n      tempWalls.push([temp, num]);\n    }\n  } else {\n    if (vertical.length === 2) return;\n    for (let temp of vertical) {\n      if (\n        (num === startNode.row && temp === startNode.col) ||\n        (num === finishNode.row && temp === finishNode.col) ||\n        (isThereStop && (num === stopNode.row && temp === stopNode.col))\n      ) {\n        isStartFinish = true;\n        continue;\n      }\n      tempWalls.push([num, temp]);\n    }\n  }\n  if (!isStartFinish) {\n    tempWalls.splice(generateRandomNumber(tempWalls.length), 1);\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}\n\nfunction generateRandomNumber(max) {\n  let randomNum =\n    Math.floor(Math.random() * (max / 2)) +\n    Math.floor(Math.random() * (max / 2));\n  if (randomNum % 2 !== 0) {\n    if (randomNum === max) {\n      randomNum -= 1;\n    } else {\n      randomNum += 1;\n    }\n  }\n  return randomNum;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}