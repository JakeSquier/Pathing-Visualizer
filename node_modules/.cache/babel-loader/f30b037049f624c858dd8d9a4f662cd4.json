{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/PathFindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport './PathfindingVisualizer.css';\nimport Node from '.Node/Node.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: []\n    };\n  }\n\n  componentDidMount() {\n    const nodes = [];\n\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row\n        };\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state;\n    console.log(nodes);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: nodes.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map((node, nodeIdx) => {\n            return /*#__PURE__*/_jsxDEV(Node, {\n              isStart: true,\n              test: 'foo',\n              test: 'kappa'\n            }, nodeIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 40\n            }, this);\n          })\n        }, rowIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PathfindingVisualizer;","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/PathFindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","PathfindingVisualizer","constructor","props","state","nodes","componentDidMount","row","currentRow","col","currentNode","push","setState","render","console","log","map","rowIdx","node","nodeIdx"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,6BAAP;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;;AAEA,MAAMC,qBAAN,SAAoCF,SAApC,CAA6C;AACzCG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMD,KAAK,GAAG,EAAd;;AACA,SAAI,IAAIE,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAG,EAAvB,EAA2BA,GAAG,EAA9B,EAAiC;AAC7B,YAAMC,UAAU,GAAG,EAAnB;;AACA,WAAI,IAAIC,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAG,EAAvB,EAA2BA,GAAG,EAA9B,EAAiC;AAC7B,cAAMC,WAAW,GAAG;AAChBD,UAAAA,GADgB;AAEhBF,UAAAA;AAFgB,SAApB;AAIAC,QAAAA,UAAU,CAACG,IAAX,CAAgBD,WAAhB;AACH;;AACDL,MAAAA,KAAK,CAACM,IAAN,CAAWH,UAAX;AACH;;AACD,SAAKI,QAAL,CAAc;AAACP,MAAAA;AAAD,KAAd;AACH;;AAEDQ,EAAAA,MAAM,GAAG;AACL,UAAM;AAACR,MAAAA;AAAD,QAAU,KAAKD,KAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,gBACKA,KAAK,CAACW,GAAN,CAAU,CAACT,GAAD,EAAMU,MAAN,KAAiB;AACxB,4BACI;AAAA,oBACKV,GAAG,CAACS,GAAJ,CAAQ,CAACE,IAAD,EAAOC,OAAP,KAAmB;AACxB,gCAAO,QAAC,IAAD;AAAoB,cAAA,OAAO,EAAE,IAA7B;AAAmC,cAAA,IAAI,EAAE,KAAzC;AAAgD,cAAA,IAAI,EAAE;AAAtD,eAAWA,OAAX;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH,WAFA;AADL,WAAUF,MAAV;AAAA;AAAA;AAAA;AAAA,gBADJ;AAOH,OARA;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AAzCwC;;AA4C7C,eAAehB,qBAAf","sourcesContent":["import React, {Component} from 'react';\nimport './PathfindingVisualizer.css'\nimport Node from '.Node/Node.jsx'\n\nclass PathfindingVisualizer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            nodes: []\n        };\n    }\n\n    componentDidMount() {\n        const nodes = [];\n        for(let row = 0; row < 20; row++){\n            const currentRow = [];\n            for(let col = 0; col < 50; col++){\n                const currentNode = {\n                    col,\n                    row,\n                };\n                currentRow.push(currentNode);\n            }\n            nodes.push(currentRow);\n        }\n        this.setState({nodes})\n    }\n\n    render() {\n        const {nodes} = this.state;\n        console.log(nodes);\n\n        return (\n            <div className=\"grid\">\n                {nodes.map((row, rowIdx) => {\n                    return(\n                        <div key={rowIdx}>\n                            {row.map((node, nodeIdx) => {\n                                return <Node key={nodeIdx} isStart={true} test={'foo'} test={'kappa'}/>\n                            })}\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nexport default PathfindingVisualizer;"]},"metadata":{},"sourceType":"module"}