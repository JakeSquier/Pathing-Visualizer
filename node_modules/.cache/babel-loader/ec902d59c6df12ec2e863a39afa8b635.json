{"ast":null,"code":"var self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n\n    function greedyBFS(grid, startNode, finishNode) {\n      let stopNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (!startNode || !finishNode || startNode === finishNode) {\n        return false;\n      }\n\n      var isStop;\n\n      if (stopNode === false) {\n        isStop = false;\n      } else {\n        isStop = true;\n      }\n\n      console.log(isStop);\n\n      if (!isStop) {\n        console.log('made it');\n        let unvisitedNodes = [];\n        let visitedNodesInOrder = [];\n        startNode.distance = 0;\n        unvisitedNodes.push(startNode);\n\n        while (unvisitedNodes.length !== 0) {\n          unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\n          let closestNode = unvisitedNodes.shift();\n          if (closestNode === finishNode) return visitedNodesInOrder;\n          closestNode.isVisited = true;\n          visitedNodesInOrder.push(closestNode);\n          let neighbours = getNeighbours(closestNode, grid);\n\n          for (let neighbour of neighbours) {\n            let distance = closestNode.distance + 1; //f(n) = h(n)\n\n            if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\n              unvisitedNodes.unshift(neighbour);\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n              neighbour.previousNode = closestNode;\n            } else if (distance < neighbour.distance) {\n              neighbour.distance = distance;\n              neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n              neighbour.previousNode = closestNode;\n            }\n          }\n        }\n\n        return visitedNodesInOrder;\n      } else if (isStop) {}\n    }\n\n    function getNeighbours(node, grid, isStop) {\n      let neighbour = [];\n      let {\n        row,\n        col\n      } = node;\n\n      if (isStop) {\n        if (row !== 0) neighbour.push(grid[row - 1][col]);\n        if (col !== grid[0].length - 1) neighbour.push(grid[row][col + 1]);\n        if (row !== grid.length - 1) neighbour.push(grid[row + 1][col]);\n        if (col !== 0) neighbour.push(grid[row][col - 1]);\n      } else {\n        if (row !== 0) neighbour.push(grid[row - 1][col]);\n        if (col !== grid[0].lengthSecond - 1) neighbour.push(grid[row][col + 1]);\n        if (row !== grid.lengthSecond - 1) neighbour.push(grid[row + 1][col]);\n        if (col !== 0) neighbour.push(grid[row][col - 1]);\n      }\n\n      return neighbour.filter(neighbour => {\n        return isStop ? !neighbour.isWall && !neighbour.isVisitedSecond : !neighbour.isWall && !neighbour.isVisited;\n      });\n    }\n\n    function manhattenDistance(node, finishNode) {\n      let x = Math.abs(node.row - finishNode.row);\n      let y = Math.abs(node.col - finishNode.col);\n      return x + y;\n    }\n\n    function neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n      for (let node of unvisitedNodes) {\n        if (node.row === neighbour.row && node.col === neighbour.col) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    const grid = message.data[0];\n    const startNode = message.data[1];\n    const finishNode = message.data[2];\n    const stopNode = message.data[3];\n    const visitedNodesInOrder = greedyBFS(grid, startNode, finishNode, stopNode);\n  });\n});\nexport function getNodesInShortestPathOrderGreedyBFS(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["self","addEventListener","message","greedyBFS","grid","startNode","finishNode","stopNode","isStop","console","log","unvisitedNodes","visitedNodesInOrder","distance","push","length","sort","a","b","totalDistance","closestNode","shift","isVisited","neighbours","getNeighbours","neighbour","neighbourNotInUnvisitedNodes","unshift","manhattenDistance","previousNode","node","row","col","lengthSecond","filter","isWall","isVisitedSecond","x","Math","abs","y","data","getNodesInShortestPathOrderGreedyBFS","nodesInShortestPathOrder","currentNode"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/greedyBestFirstSearchWorker.js"],"sourcesContent":["var self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n        if (!message) return;\n\n        function greedyBFS(grid, startNode, finishNode, stopNode=false) {\n\n            if (!startNode || !finishNode || startNode === finishNode) {\n                return false;\n            }\n\n            var isStop;\n            if(stopNode===false){\n                isStop = false\n            } else {\n                isStop = true\n            }\n            console.log(isStop)\n            if(!isStop){\n                console.log('made it')\n                let unvisitedNodes = [];\n                let visitedNodesInOrder = [];\n                startNode.distance = 0;\n                unvisitedNodes.push(startNode);\n              \n                while (unvisitedNodes.length !== 0) {\n                  unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\n                  let closestNode = unvisitedNodes.shift();\n                  if (closestNode === finishNode) return visitedNodesInOrder;\n              \n                  closestNode.isVisited = true;\n                  visitedNodesInOrder.push(closestNode);\n              \n                  let neighbours = getNeighbours(closestNode, grid);\n                  for (let neighbour of neighbours) {\n                    let distance = closestNode.distance + 1;\n                    //f(n) = h(n)\n                    if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\n                      unvisitedNodes.unshift(neighbour);\n                      neighbour.distance = distance;\n                      neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n                      neighbour.previousNode = closestNode;\n                    } else if (distance < neighbour.distance) {\n                      neighbour.distance = distance;\n                      neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n                      neighbour.previousNode = closestNode;\n                    }\n                  }\n                }\n                return visitedNodesInOrder;\n\n            } else if(isStop){\n\n            }\n        }\n\n        function getNeighbours(node, grid, isStop) {\n            let neighbour = [];\n            let { row, col } = node;\n            \n            if(isStop) {\n                if (row !== 0) neighbour.push(grid[row - 1][col]);\n                if (col !== grid[0].length - 1) neighbour.push(grid[row][col + 1]);\n                if (row !== grid.length - 1) neighbour.push(grid[row + 1][col]);\n                if (col !== 0) neighbour.push(grid[row][col - 1]);\n            } else {\n                if (row !== 0) neighbour.push(grid[row - 1][col]);\n                if (col !== grid[0].lengthSecond - 1) neighbour.push(grid[row][col + 1]);\n                if (row !== grid.lengthSecond - 1) neighbour.push(grid[row + 1][col]);\n                if (col !== 0) neighbour.push(grid[row][col - 1]);\n            }\n            return neighbour.filter(\n              (neighbour) => {\n                    return isStop ? !neighbour.isWall && !neighbour.isVisitedSecond : !neighbour.isWall && !neighbour.isVisited\n                }\n            );\n        }\n\n        function manhattenDistance(node, finishNode) {\n            let x = Math.abs(node.row - finishNode.row);\n            let y = Math.abs(node.col - finishNode.col);\n            return x + y;\n        }\n\n        function neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n            for (let node of unvisitedNodes) {\n              if (node.row === neighbour.row && node.col === neighbour.col) {\n                return false;\n              }\n            }\n            return true;\n        }\n\n        const grid = message.data[0]\n        const startNode = message.data[1]\n        const finishNode = message.data[2]\n        const stopNode = message.data[3]\n        const visitedNodesInOrder = greedyBFS(grid, startNode, finishNode, stopNode)\n\n    })\n}\n\nexport function getNodesInShortestPathOrderGreedyBFS(finishNode) {\n    let nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}