{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n\n    function bfs(grid, startNode, finishNode) {\n      let stopNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var isStop;\n\n      if (stopNode !== false) {\n        isStop = true;\n      } else {\n        isStop = false;\n      }\n\n      const visitedNodesInOrder = []; // queue to keep track of the visited nodes\n\n      if (!isStop) {} else if (isStop) {}\n    } // updates the neighbours,\n    // in correspondance to the algorithm \n\n\n    function updateUnvisitedNeighbours(row, col, queue, grid, currNode) {\n      let next;\n\n      if (row > 0) {\n        next = grid[row - 1][col];\n\n        if (!next.isVisited) {\n          queue.push(next);\n          next.previousNode = currNode;\n        }\n      }\n\n      if (row < grid.length - 1) {\n        next = grid[row + 1][col];\n\n        if (!next.isVisited) {\n          queue.push(next);\n          next.previousNode = currNode;\n        }\n      }\n\n      if (col > 0) {\n        next = grid[row][col - 1];\n\n        if (!next.isVisited) {\n          queue.push(next);\n          next.previousNode = currNode;\n        }\n      }\n\n      if (col < grid[0].length - 1) {\n        next = grid[row][col + 1];\n\n        if (!next.isVisited) {\n          queue.push(next);\n          next.previousNode = currNode;\n        }\n      }\n    }\n\n    const grid = message.data[0];\n    const startNode = message.data[1];\n    const finishNode = message.data[2];\n    const stopNode = message.data[3];\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode);\n    console.log(visitedNodesInOrder);\n    postMessage(visitedNodesInOrder);\n  });\n});","map":{"version":3,"names":["self","addEventListener","message","bfs","grid","startNode","finishNode","stopNode","isStop","visitedNodesInOrder","updateUnvisitedNeighbours","row","col","queue","currNode","next","isVisited","push","previousNode","length","data","console","log","postMessage"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/breadthFirstSearchWorker.js"],"sourcesContent":["\n// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n      if (!message) return;\n        function bfs(grid, startNode, finishNode, stopNode=false) {\n            \n            var isStop;\n            if(stopNode!==false){\n                isStop = true\n            } else {\n                isStop = false\n            }\n            const visitedNodesInOrder = [];\n            // queue to keep track of the visited nodes\n            if(!isStop) {\n\n            } else if(isStop) {\n                \n            }\n        }\n        \n        // updates the neighbours,\n        // in correspondance to the algorithm \n        function updateUnvisitedNeighbours(row,col,queue,grid,currNode) {\n                let next;\n                if (row > 0) {\n                next = grid[row - 1][col];\n                if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                }\n                }\n                if (row < grid.length - 1) {\n                next = grid[row + 1][col];\n                if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                }\n                }\n                if (col > 0) {\n                next = grid[row][col - 1];\n                if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                }\n                }\n                if (col < grid[0].length - 1) {\n                next = grid[row][col + 1];\n                if (!next.isVisited) {\n                    queue.push(next);\n                    next.previousNode = currNode;\n                }\n            }\n        }\n\n        const grid = message.data[0]\n        const startNode = message.data[1]\n        const finishNode = message.data[2]\n        const stopNode = message.data[3]\n\n        const visitedNodesInOrder = bfs(grid, startNode, finishNode)\n        console.log(visitedNodesInOrder)\n        postMessage(visitedNodesInOrder)\n    })\n}"],"mappings":"AACA;AACA,IAAIA,IAAI,GAAG,IAAX;AACA,gBAAe,MAAM;EACjB;EACAA,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAiCC,OAAO,IAAI;IAC1C,IAAI,CAACA,OAAL,EAAc;;IACZ,SAASC,GAAT,CAAaC,IAAb,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0D;MAAA,IAAhBC,QAAgB,uEAAP,KAAO;MAEtD,IAAIC,MAAJ;;MACA,IAAGD,QAAQ,KAAG,KAAd,EAAoB;QAChBC,MAAM,GAAG,IAAT;MACH,CAFD,MAEO;QACHA,MAAM,GAAG,KAAT;MACH;;MACD,MAAMC,mBAAmB,GAAG,EAA5B,CARsD,CAStD;;MACA,IAAG,CAACD,MAAJ,EAAY,CAEX,CAFD,MAEO,IAAGA,MAAH,EAAW,CAEjB;IACJ,CAjBuC,CAmBxC;IACA;;;IACA,SAASE,yBAAT,CAAmCC,GAAnC,EAAuCC,GAAvC,EAA2CC,KAA3C,EAAiDT,IAAjD,EAAsDU,QAAtD,EAAgE;MACxD,IAAIC,IAAJ;;MACA,IAAIJ,GAAG,GAAG,CAAV,EAAa;QACbI,IAAI,GAAGX,IAAI,CAACO,GAAG,GAAG,CAAP,CAAJ,CAAcC,GAAd,CAAP;;QACA,IAAI,CAACG,IAAI,CAACC,SAAV,EAAqB;UACjBH,KAAK,CAACI,IAAN,CAAWF,IAAX;UACAA,IAAI,CAACG,YAAL,GAAoBJ,QAApB;QACH;MACA;;MACD,IAAIH,GAAG,GAAGP,IAAI,CAACe,MAAL,GAAc,CAAxB,EAA2B;QAC3BJ,IAAI,GAAGX,IAAI,CAACO,GAAG,GAAG,CAAP,CAAJ,CAAcC,GAAd,CAAP;;QACA,IAAI,CAACG,IAAI,CAACC,SAAV,EAAqB;UACjBH,KAAK,CAACI,IAAN,CAAWF,IAAX;UACAA,IAAI,CAACG,YAAL,GAAoBJ,QAApB;QACH;MACA;;MACD,IAAIF,GAAG,GAAG,CAAV,EAAa;QACbG,IAAI,GAAGX,IAAI,CAACO,GAAD,CAAJ,CAAUC,GAAG,GAAG,CAAhB,CAAP;;QACA,IAAI,CAACG,IAAI,CAACC,SAAV,EAAqB;UACjBH,KAAK,CAACI,IAAN,CAAWF,IAAX;UACAA,IAAI,CAACG,YAAL,GAAoBJ,QAApB;QACH;MACA;;MACD,IAAIF,GAAG,GAAGR,IAAI,CAAC,CAAD,CAAJ,CAAQe,MAAR,GAAiB,CAA3B,EAA8B;QAC9BJ,IAAI,GAAGX,IAAI,CAACO,GAAD,CAAJ,CAAUC,GAAG,GAAG,CAAhB,CAAP;;QACA,IAAI,CAACG,IAAI,CAACC,SAAV,EAAqB;UACjBH,KAAK,CAACI,IAAN,CAAWF,IAAX;UACAA,IAAI,CAACG,YAAL,GAAoBJ,QAApB;QACH;MACJ;IACJ;;IAED,MAAMV,IAAI,GAAGF,OAAO,CAACkB,IAAR,CAAa,CAAb,CAAb;IACA,MAAMf,SAAS,GAAGH,OAAO,CAACkB,IAAR,CAAa,CAAb,CAAlB;IACA,MAAMd,UAAU,GAAGJ,OAAO,CAACkB,IAAR,CAAa,CAAb,CAAnB;IACA,MAAMb,QAAQ,GAAGL,OAAO,CAACkB,IAAR,CAAa,CAAb,CAAjB;IAEA,MAAMX,mBAAmB,GAAGN,GAAG,CAACC,IAAD,EAAOC,SAAP,EAAkBC,UAAlB,CAA/B;IACAe,OAAO,CAACC,GAAR,CAAYb,mBAAZ;IACAc,WAAW,CAACd,mBAAD,CAAX;EACH,CA7DD;AA8DH,CAhED"},"metadata":{},"sourceType":"module"}