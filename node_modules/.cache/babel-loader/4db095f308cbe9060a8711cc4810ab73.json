{"ast":null,"code":"var _jsxFileName = \"/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithims/dijkstra';\nimport { aStar } from '../algorithims/aStar';\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data';\nimport algData from '../data/alg-data';\nimport './mainContainer.css';\nimport { ContactlessOutlined } from '@material-ui/icons'; // const START_NODE_ROW = 10;\n// const START_NODE_COL = 5;\n// const FINISH_NODE_ROW = 10;\n// const FINISH_NODE_COL = 45;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MainContainer = () => {\n  _s();\n\n  state = {\n    grid: [],\n    mouseIsPressed: false,\n    showNav: false,\n    currItemDesc: 'Start',\n    currItemObj: itemData[0],\n    currAlgObj: algData[0],\n    currAlgTab: 0,\n    currMazeAlg: 'Recursive Division Maze',\n    currMazeTab: 0,\n    startNode: [10, 5],\n    finishNode: [10, 45],\n    startIsMoving: false,\n    finishIsMoving: false,\n    isThereStop: false,\n    stopIsMoving: false,\n    prevStop: [],\n    generatingMaze: false,\n    visualizingAlgorithm: false\n  }; // componentDidMount = () => {\n  //     const grid = renderGrid(this.state);\n  //     this.setState({grid});\n  // }\n\n  useEffect(info => {});\n\n  const handleMouseDown = (row, col) => {\n    var newGrid = this.state.grid;\n\n    if (this.state.grid[row][col].isStart) {\n      this.setState({\n        startIsMoving: true\n      });\n      newGrid = this.state.grid;\n    } else if (this.state.grid[row][col].isFinish) {\n      this.setState({\n        finishIsMoving: true\n      });\n      newGrid = this.state.grid;\n    } else if (this.state.currItemDesc === 'Wall') {\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    } else if (this.state.currItemDesc === 'Weight') {\n      newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n    } else if (this.state.currItemDesc === 'Stop') {\n      this.setState({\n        stopIsMoving: true,\n        isThereStop: true\n      });\n    }\n\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  };\n\n  const handleMouseEnter = (row, col) => {\n    if (!this.state.mouseIsPressed) return;\n    var newGrid = this.state.grid;\n\n    if (this.state.startIsMoving) {\n      newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode);\n      this.setState({\n        startNode: [row, col]\n      });\n    } else if (this.state.finishIsMoving) {\n      newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode);\n      this.setState({\n        finishNode: [row, col]\n      });\n    } else if (this.state.currItemDesc === 'Wall') {\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n    } else if (this.state.currItemDesc === 'Weight') {\n      newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n    } else if (this.state.currItemDesc === 'Stop') {\n      newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n      this.setState({\n        prevStop: [row, col]\n      });\n    }\n\n    this.setState({\n      grid: newGrid\n    });\n  };\n\n  const handleMouseUp = (row, col) => {\n    this.setState({\n      mouseIsPressed: false,\n      startIsMoving: false,\n      finishIsMoving: false\n    });\n  };\n\n  const handleNav = () => {\n    this.setState({\n      showNav: !this.state.showNav\n    });\n  }; //navBar functions\n\n\n  const handleItemDescChange = (e, item) => {\n    var newItem = `${item}`;\n    itemData.map(_item => {\n      if (item === _item.id) {\n        this.setState({\n          currItemDesc: newItem,\n          currItemObj: _item\n        });\n      }\n    });\n  };\n\n  const handleTabs = (e, val) => {\n    this.setState({\n      currAlgTab: val,\n      currAlgObj: algData[val]\n    });\n  };\n\n  const handleMazeTabs = (e, val) => {\n    this.setState({\n      currMazeTab: val\n    });\n    console.log(val);\n  };\n\n  const generateMaze = e => {\n    var currAlg = this.state.currMazeTab;\n\n    if (currAlg === 0) {\n      this.generateRecursiveDivisionMaze();\n      console.log('hi');\n    } else if (currAlg === 1) {\n      this.generateVerticalMaze();\n    } else if (currAlg === 2) {\n      this.generateHorizontalMaze();\n    } else if (currAlg === 3) {\n      this.generateRandomMaze();\n    }\n  };\n\n  const resetGrid = e => {\n    this.clearGrid();\n  };\n\n  const clearGrid = () => {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    var rowNum = (window.innerHeight - 25) / 25 - 2;\n    var colNum = (window.innerWidth - 20) / 25;\n    const grid = this.state.grid;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n\n    for (let row = 0; row < this.state.grid.length; row++) {\n      for (let col = 0; col < this.state.grid[0].length; col++) {\n        if (row === startNode[0] && col === startNode[1]) {\n          console.log('isStartNode');\n          document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n        } else if (row === finishNode[0] && col === finishNode[1]) {\n          console.log('isfinishnode');\n          document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n        } else {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n\n    const newGrid = getGridWithoutPath(this.state.grid);\n    this.setState({\n      grid: newGrid,\n      visualizingAlgorithm: false,\n      generatingMaze: false\n    });\n  }; // play animation\n\n\n  const playAnimation = e => {\n    var currAlg = this.state.currAlgObj.id;\n\n    if (currAlg === 0) {\n      this.visualizeDijkstra();\n    } else if (currAlg === 1) {\n      this.visualizeaStar();\n    } else if (currAlg === 6) {\n      this.visualizbfs();\n    } else if (currAlg === 2) {\n      this.visualizegbfs();\n    } else if (currAlg === 7) {\n      this.visualizegdfs();\n    } else if (currAlg === 3) {\n      this.visualizeBidirectionalGreedySearch();\n      console.log('here');\n    }\n\n    return;\n  }; //animte dijkstra\n\n\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder, isSecondAnimation = false) => {\n    var animationColor = '';\n\n    if (isSecondAnimation) {\n      animationColor = 'node-target-visited';\n    } else if (!isSecondAnimation) {\n      animationColor = 'node-visited';\n    }\n\n    var isFinishClass = '';\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        if (isSecondAnimation == false && this.state.isThereStop) {\n          console.log('here');\n          return;\n        }\n\n        setTimeout(() => this.animateShortestPath(nodesInShortestPathOrder), i * 10);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if (node.isFinish && this.state.isThereStop) {\n          isFinishClass = 'node-finish';\n        } else if (!node.isFinish) {\n          isFinishClass = '';\n        }\n\n        document.getElementById(`node-${node.row}-${node.col}`).className = `node ${animationColor} ${isFinishClass}`;\n      }, 10 * i);\n    }\n  };\n\n  const visualizeDijkstra = () => {\n    const grid = this.state.grid;\n    const START_NODE = this.state.startNode;\n    const FINISH_NODE = this.state.finishNode;\n    const STOP_NODE = this.state.prevStop;\n    const startNode = grid[START_NODE[0]][START_NODE[1]];\n    const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n    const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : [];\n    var visitedNodesInOrder = [];\n    var visitedNodesInOrderSecond = [];\n\n    if (this.state.isThereStop) {\n      visitedNodesInOrder = dijkstra(grid, startNode, stopNode);\n      visitedNodesInOrderSecond = dijkstra(this.state.grid, stopNode, finishNode, true);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode, stopNode);\n      var waitTime = visitedNodesInOrder.length * 10;\n      console.log(visitedNodesInOrder, visitedNodesInOrderSecond);\n      this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n      setTimeout(() => this.animateDijkstra(visitedNodesInOrderSecond, nodesInShortestPathOrder, true), waitTime);\n    } else if (!this.state.isThereStop) {\n      visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n  }; //animate aStar\n\n\n  const animateaStar = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  };\n\n  const visualizeaStar = () => {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n  }; //animate breadth first search \n\n\n  const animatebfs = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  };\n\n  const visualizbfs = () => {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  }; // greedy best first search\n\n\n  const animategbfs = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  };\n\n  const visualizegbfs = () => {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  }; // depth first search\n\n\n  const animatedfs = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  };\n\n  const visualizegdfs = () => {\n    const {\n      grid\n    } = this.state;\n    const startNode = this.state.startNode;\n    const finishNode = this.state.finishNode;\n    const _startNode = grid[startNode[0]][startNode[1]];\n    const _finishNode = grid[finishNode[0]][finishNode[1]];\n    const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n    this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder);\n  }; // bidirectional greedy first search\n\n\n  const animateBidirectionalAlgorithm = (visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath) => {\n    let len = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n    for (let i = 1; i <= len; i++) {\n      let nodeA = visitedNodesInOrderStart[i];\n      let nodeB = visitedNodesInOrderFinish[i];\n\n      if (i === visitedNodesInOrderStart.length) {\n        setTimeout(() => {\n          let visitedNodesInOrder = getVisitedNodesInOrder(visitedNodesInOrderStart, visitedNodesInOrderFinish);\n\n          if (isShortedPath) {\n            this.animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\n          } else {\n            this.setState({\n              visualizingAlgorithm: false\n            });\n          }\n        }, i * 10);\n        return;\n      }\n\n      setTimeout(() => {\n        //visited nodes\n        if (nodeA !== undefined) document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className = \"node node-visited\";\n        if (nodeB !== undefined) document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className = \"node node-visited\";\n      }, i * 10);\n    }\n  };\n\n  const visualizeBidirectionalGreedySearch = () => {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      visualizingAlgorithm: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const visitedNodesInOrder = bidirectionalGreedySearch(grid, startNode, finishNode);\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n      const isShortedPath = visitedNodesInOrder[2];\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1], visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]);\n      console.log('here');\n      this.animateBidirectionalAlgorithm(visitedNodesInOrderStart, visitedNodesInOrderFinish, nodesInShortestPathOrder, isShortedPath);\n    }, 10);\n  }; //finish animations\n\n\n  const animateShortestPath = nodesInShortestPathOrder => {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }; //generate mazes\n\n\n  const animateMaze = walls => {\n    for (let i = 0; i <= walls.length; i++) {\n      if (i === walls.length) {\n        setTimeout(() => {\n          this.clearGrid();\n          let newGrid = getNewGridWithMaze(this.state.grid, walls);\n          this.setState({\n            grid: newGrid,\n            generatingMaze: false\n          });\n        }, i * 10);\n        return;\n      }\n\n      let wall = walls[i];\n      let node = this.state.grid[wall[0]][wall[1]];\n      node.isWall = true;\n      setTimeout(() => {\n        //Walls\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-wall\";\n      }, i * 10);\n    }\n  };\n\n  const generateRandomMaze = () => {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = randomMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  };\n\n  const generateRecursiveDivisionMaze = () => {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  };\n\n  const generateVerticalMaze = () => {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = verticalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  };\n\n  const generateHorizontalMaze = () => {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n\n    this.setState({\n      generatingMaze: true\n    });\n    setTimeout(() => {\n      const {\n        grid\n      } = this.state;\n      const _startNode = this.state.startNode;\n      const _finishNode = this.state.finishNode;\n      const startNode = grid[_startNode[0]][_startNode[1]];\n      const finishNode = grid[_finishNode[0]][_finishNode[1]];\n      const walls = horizontalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, 10);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualizer-container\",\n      children: /*#__PURE__*/_jsxDEV(Visualizer, {\n        state: this.state,\n        handleMouseDown: this.handleMouseDown,\n        handleMouseEnter: this.handleMouseEnter,\n        handleMouseUp: this.handleMouseUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n      state: this.state,\n      toggleNav: this.handleNav,\n      resetGrid: this.resetGrid,\n      handleMazeTabs: this.handleMazeTabs,\n      genMaze: this.generateMaze,\n      play: this.playAnimation,\n      handleTabs: this.handleTabs,\n      handleItemChange: this.handleItemDescChange,\n      visualizeDijkstra: this.visualizeDijkstra\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 549,\n    columnNumber: 7\n  }, this);\n};\n\n_s(MainContainer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = MainContainer;\n\nconst renderGrid = state => {\n  const grid = [];\n  var rowNum = window.innerHeight / 25 + 3;\n  var colNum = window.innerWidth / 25 + 2;\n\n  for (let row = 0; row < rowNum; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < colNum; col++) {\n      var node = createNode(col, row, state);\n      node.className = 'node';\n      currentRow.push(node);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row, state) => {\n  const startNode = state.startNode;\n  const finishNode = state.finishNode;\n  const stopNode = state.prevStop;\n  return {\n    col,\n    row,\n    isStart: row === startNode[0] && col === startNode[1],\n    isFinish: row === finishNode[0] && col === finishNode[1],\n    isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n    distance: Infinity,\n    isVisited: false,\n    isVisitedSecond: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst rerenderGrid = state => {\n  const grid = state.grid;\n  const startNode = grid[state.startNode[0]][state.startNode[1]];\n  const finishNode = grid[state.finishNode[0]][state.finishNode[1]];\n\n  for (let row = 0; row < grid.length; row++) {\n    var colNum = grid[row];\n\n    for (let col = 0; col < colNum.length; col++) {\n      var node = grid[row][col];\n\n      if (node.isWall || node.isWeight || node.isStop) {\n        node.isWall = false;\n        node.isWeight = false;\n        node.isStop = false;\n        node.isVisited = false;\n      }\n\n      if (node === startNode) {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-start\";\n      } else if (node === finishNode) {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-finish\";\n      } else {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node\";\n      }\n    }\n  }\n\n  return grid;\n};\n\nconst getNewGridWithStart = (grid, row, col, prevStart) => {\n  const newGrid = grid.slice();\n  const newStart = newGrid[row][col];\n  const oldStart = newGrid[prevStart[0]][prevStart[1]];\n  const oldNode = { ...oldStart,\n    isStart: !oldStart.isStart\n  };\n  const newNode = { ...newStart,\n    isStart: !newStart.isStart\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStart[0]][prevStart[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithFinish = (grid, row, col, prevFinish) => {\n  const newGrid = grid.slice();\n  if (newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n  const newFinish = newGrid[row][col];\n  const oldFinish = newGrid[prevFinish[0]][prevFinish[1]];\n  const oldNode = { ...oldFinish,\n    isFinish: !oldFinish.isFinish\n  };\n  const newNode = { ...newFinish,\n    isFinish: !newFinish.isFinish\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevFinish[0]][prevFinish[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithWeightToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  var newNode = { ...node\n  };\n  newNode = { ...node,\n    isWeight: !node.isWeight\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n  const newGrid = grid.slice();\n  const newStop = newGrid[row][col];\n\n  if (prevStop.length === 0) {\n    const newNode = { ...newStop,\n      isStop: !newStop.isStop\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  const oldStop = newGrid[prevStop[0]][prevStop[1]];\n  const oldNode = { ...oldStop,\n    isStop: !oldStop.isStop\n  };\n  const newNode = { ...newStop,\n    isStop: !newStop.isStop\n  };\n  newGrid[row][col] = newNode;\n  newGrid[prevStop[0]][prevStop[1]] = oldNode;\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = { ...node,\n      isWall: true\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n\n  return newGrid;\n};\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst getVisitedNodesInOrder = (visitedNodesInOrderStart, visitedNodesInOrderFinish) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(visitedNodesInOrderStart.length, visitedNodesInOrderFinish.length);\n\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n\n  return visitedNodesInOrder;\n};\n\nconst getGridWithoutPath = grid => {\n  let newGrid = grid.slice();\n\n  for (let row of grid) {\n    for (let node of row) {\n      let newNode = { ...node,\n        distance: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isVisitedSecond: false,\n        isShortest: false,\n        previousNode: null,\n        isWall: false,\n        isWeight: false,\n        isStop: false\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n\n  return newGrid;\n};\n\nexport default MainContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainContainer\");","map":{"version":3,"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/components/MainContainer.jsx"],"names":["React","Component","useState","useEffect","Visualizer","dijkstra","getNodesInShortestPathOrder","aStar","breadthFirstSearch","greedyBFS","depthFirstSearch","randomMaze","verticalMaze","horizontalMaze","recursiveDivisionMaze","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","Navbar","itemData","algData","ContactlessOutlined","MainContainer","state","grid","mouseIsPressed","showNav","currItemDesc","currItemObj","currAlgObj","currAlgTab","currMazeAlg","currMazeTab","startNode","finishNode","startIsMoving","finishIsMoving","isThereStop","stopIsMoving","prevStop","generatingMaze","visualizingAlgorithm","info","handleMouseDown","row","col","newGrid","isStart","setState","isFinish","getNewGridWithWallToggled","getNewGridWithWeightToggled","handleMouseEnter","getNewGridWithStart","getNewGridWithFinish","getNewGridWithStopToggled","handleMouseUp","handleNav","handleItemDescChange","e","item","newItem","map","_item","id","handleTabs","val","handleMazeTabs","console","log","generateMaze","currAlg","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","generateRandomMaze","resetGrid","clearGrid","rowNum","window","innerHeight","colNum","innerWidth","length","document","getElementById","className","getGridWithoutPath","playAnimation","visualizeDijkstra","visualizeaStar","visualizbfs","visualizegbfs","visualizegdfs","visualizeBidirectionalGreedySearch","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","isSecondAnimation","animationColor","isFinishClass","i","setTimeout","animateShortestPath","node","START_NODE","FINISH_NODE","STOP_NODE","stopNode","visitedNodesInOrderSecond","waitTime","animateaStar","_startNode","_finishNode","animatebfs","animategbfs","animatedfs","animateBidirectionalAlgorithm","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","len","Math","max","nodeA","nodeB","getVisitedNodesInOrder","undefined","animateMaze","walls","getNewGridWithMaze","wall","isWall","renderGrid","currentRow","createNode","push","isStop","distance","Infinity","isVisited","isVisitedSecond","previousNode","rerenderGrid","isWeight","prevStart","slice","newStart","oldStart","oldNode","newNode","prevFinish","newFinish","oldFinish","newStop","oldStop","getInitialGrid","numRows","numColumns","n","totalDistance","isShortest"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect} from 'react';\nimport Visualizer from './PathFindingVisualizer/Visualizer'\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithims/dijkstra';\nimport {aStar} from '../algorithims/aStar'\nimport { breadthFirstSearch } from '../algorithims/breadthFirstSearch';\nimport { greedyBFS } from '../algorithims/greedyBestFirstSearch';\nimport { depthFirstSearch } from '../algorithims/depthFisrtSearch';\nimport { randomMaze } from '../mazeAlgorithims/randomMaze';\nimport { verticalMaze } from '../mazeAlgorithims/verticalMaze';\nimport { horizontalMaze } from '../mazeAlgorithims/HorizontalMaze';\nimport { recursiveDivisionMaze } from '../mazeAlgorithims/recursiveDivisionMaze';\nimport { bidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport { getNodesInShortestPathOrderBidirectionalGreedySearch } from '../algorithims/bidirectionalGreedySearch';\nimport Navbar from './navComponents/Navbar';\nimport itemData from '../data/item-data'\nimport algData from '../data/alg-data'\nimport './mainContainer.css'\nimport { ContactlessOutlined } from '@material-ui/icons';\n\n// const START_NODE_ROW = 10;\n// const START_NODE_COL = 5;\n// const FINISH_NODE_ROW = 10;\n// const FINISH_NODE_COL = 45;\n\nconst MainContainer = () => {\n\n        state = {\n            grid: [],\n            mouseIsPressed: false,\n            showNav: false,\n            currItemDesc: 'Start',\n            currItemObj: itemData[0],\n            currAlgObj: algData[0],\n            currAlgTab: 0,\n            currMazeAlg: 'Recursive Division Maze',\n            currMazeTab: 0,\n            startNode: [10, 5],\n            finishNode: [10, 45],\n            startIsMoving: false,\n            finishIsMoving: false,\n            isThereStop: false,\n            stopIsMoving: false,\n            prevStop: [],\n            generatingMaze: false,\n            visualizingAlgorithm: false\n        }\n\n    // componentDidMount = () => {\n    //     const grid = renderGrid(this.state);\n    //     this.setState({grid});\n    // }\n\n    useEffect((info) => {\n\n    })\n\n    const handleMouseDown = (row, col) => {\n        var newGrid = this.state.grid\n        if(this.state.grid[row][col].isStart){\n          this.setState({startIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.grid[row][col].isFinish){\n          this.setState({finishIsMoving: true})\n          newGrid = this.state.grid\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        } else if(this.state.currItemDesc === 'Stop'){\n          this.setState({stopIsMoving: true, isThereStop: true})\n        }\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    const handleMouseEnter = (row, col) => {\n        if (!this.state.mouseIsPressed) return;\n        var newGrid = this.state.grid;\n        if(this.state.startIsMoving){\n          newGrid = getNewGridWithStart(this.state.grid, row, col, this.state.startNode)\n          this.setState({startNode: [row, col]})\n        } \n        else if(this.state.finishIsMoving){\n          newGrid = getNewGridWithFinish(this.state.grid, row, col, this.state.finishNode)\n          this.setState({finishNode: [row, col]})\n        } else if(this.state.currItemDesc === 'Wall') {\n          newGrid = getNewGridWithWallToggled(this.state.grid, row, col, this.currItemDesc);\n        } else if(this.state.currItemDesc === 'Weight'){\n          newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n        }  else if(this.state.currItemDesc === 'Stop'){\n          newGrid = getNewGridWithStopToggled(this.state.grid, row, col, this.state.prevStop);\n          this.setState({prevStop: [row, col]})\n        }\n        this.setState({grid: newGrid});\n    }\n    \n    const handleMouseUp = (row, col) => {\n        this.setState({mouseIsPressed: false, startIsMoving: false, finishIsMoving: false});\n    }\n\n    const handleNav = () => {\n      this.setState({showNav: !this.state.showNav})\n    }\n\n    //navBar functions\n    const handleItemDescChange = (e, item) => {\n      var newItem = `${item}`\n      itemData.map((_item) => {\n        if(item === _item.id){this.setState({currItemDesc: newItem, currItemObj: _item})}\n      })\n    }\n\n    const handleTabs = (e, val) => {\n      this.setState({currAlgTab: val, currAlgObj: algData[val]})\n    }\n\n    const handleMazeTabs = (e, val) => {\n      this.setState({currMazeTab: val})\n      console.log(val)\n    }\n\n    const generateMaze = (e) => {\n      var currAlg = this.state.currMazeTab\n      \n      if(currAlg===0){\n        this.generateRecursiveDivisionMaze()\n        console.log('hi')\n      } else if(currAlg===1){\n        this.generateVerticalMaze()\n      } else if(currAlg===2){\n        this.generateHorizontalMaze()\n      } else if(currAlg===3){\n        this.generateRandomMaze()\n      }\n    }\n\n    const resetGrid = (e) => {\n      this.clearGrid()\n    }\n\n    const clearGrid = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      var rowNum = ((window.innerHeight-25) / 25)-2\n      var colNum = (window.innerWidth-20) / 25\n      const grid = this.state.grid\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      for (let row = 0; row < this.state.grid.length; row++) {\n        for (let col = 0; col < this.state.grid[0].length; col++) {\n          if ( (row === startNode[0] && col === startNode[1])) \n          {\n            console.log('isStartNode')\n            document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n          } else if((row === finishNode[0] && col === finishNode[1]))\n          {\n            console.log('isfinishnode')\n            document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n          } else \n          {\n            document.getElementById(`node-${row}-${col}`).className = \"node\";\n          }\n        }\n      }\n      const newGrid = getGridWithoutPath(this.state.grid);\n      this.setState({\n        grid: newGrid,\n        visualizingAlgorithm: false,\n        generatingMaze: false,\n      });\n    }\n\n    // play animation\n\n    const playAnimation = (e) => {\n      var currAlg = this.state.currAlgObj.id\n      if(currAlg===0){\n        this.visualizeDijkstra()\n      } else if(currAlg===1){\n        this.visualizeaStar()\n      } else if(currAlg===6){\n        this.visualizbfs()\n      } else if(currAlg===2){\n        this.visualizegbfs()\n      } else if(currAlg===7){\n        this.visualizegdfs()\n      } else if(currAlg===3){\n        this.visualizeBidirectionalGreedySearch()\n        console.log('here')\n      }\n      return\n    }\n\n    //animte dijkstra\n\n    const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder, isSecondAnimation=false) => {\n      var animationColor = ''\n      if(isSecondAnimation){\n        animationColor = 'node-target-visited'\n      }else if(!isSecondAnimation){\n        animationColor = 'node-visited'\n      }\n      var isFinishClass = ''\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          if(isSecondAnimation==false && this.state.isThereStop){\n            console.log('here')\n            return\n          }\n          setTimeout(\n            () => this.animateShortestPath(nodesInShortestPathOrder),\n            i * 10\n          )\n          return;\n        }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          if(node.isFinish && this.state.isThereStop){\n            isFinishClass = 'node-finish'\n          }else if(!node.isFinish){\n            isFinishClass = ''\n          }\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            `node ${animationColor} ${isFinishClass}`;\n        }, 10 * i);\n      }\n    }\n    \n    const visualizeDijkstra = () => {\n      const grid = this.state.grid;\n      const START_NODE = this.state.startNode\n      const FINISH_NODE = this.state.finishNode\n      const STOP_NODE = this.state.prevStop\n      const startNode = grid[START_NODE[0]][START_NODE[1]];\n      const finishNode = grid[FINISH_NODE[0]][FINISH_NODE[1]];\n      const stopNode = this.state.isThereStop ? grid[STOP_NODE[0]][STOP_NODE[1]] : []\n      var visitedNodesInOrder = []\n      var visitedNodesInOrderSecond = []\n      if(this.state.isThereStop){\n        visitedNodesInOrder = dijkstra(grid, startNode, stopNode)\n        visitedNodesInOrderSecond = dijkstra(this.state.grid, stopNode, finishNode, true)\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode, stopNode);\n        var waitTime = visitedNodesInOrder.length * 10\n        console.log(visitedNodesInOrder, visitedNodesInOrderSecond)\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder)\n        setTimeout(\n          () => this.animateDijkstra(visitedNodesInOrderSecond, nodesInShortestPathOrder, true),\n          waitTime\n        )\n      } else if(!this.state.isThereStop){\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder)\n      }\n    }\n\n    //animate aStar\n\n    const animateaStar = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    const visualizeaStar = () => {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = aStar(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animateaStar(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    //animate breadth first search \n\n    const animatebfs = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    const visualizbfs = () => {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = breadthFirstSearch(grid, _startNode, _finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode);\n      this.animatebfs(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    // greedy best first search\n\n    const animategbfs = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    const visualizegbfs = () => {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = greedyBFS(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    // depth first search\n\n    const animatedfs = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n      for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n              this.animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n          }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n          }, 10 * i);\n      }\n    }\n\n    const visualizegdfs = () => {\n      const {grid} = this.state;\n      const startNode = this.state.startNode\n      const finishNode = this.state.finishNode\n      const _startNode = grid[startNode[0]][startNode[1]];\n      const _finishNode = grid[finishNode[0]][finishNode[1]];\n      const visitedNodesInOrder = depthFirstSearch(grid, _startNode, _finishNode)\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(_finishNode)\n      this.animategbfs(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    // bidirectional greedy first search\n\n    const animateBidirectionalAlgorithm = (\n      visitedNodesInOrderStart,\n      visitedNodesInOrderFinish,\n      nodesInShortestPathOrder,\n      isShortedPath\n    ) => {\n      let len = Math.max(\n        visitedNodesInOrderStart.length,\n        visitedNodesInOrderFinish.length\n      );\n      for (let i = 1; i <= len; i++) {\n        let nodeA = visitedNodesInOrderStart[i];\n        let nodeB = visitedNodesInOrderFinish[i];\n        if (i === visitedNodesInOrderStart.length) {\n          setTimeout(() => {\n            let visitedNodesInOrder = getVisitedNodesInOrder(\n              visitedNodesInOrderStart,\n              visitedNodesInOrderFinish\n            );\n            if (isShortedPath) {\n              this.animateShortestPath(\n                nodesInShortestPathOrder,\n                visitedNodesInOrder\n              );\n            } else {\n              this.setState({ visualizingAlgorithm: false });\n            }\n          }, i * 10);\n          return;\n        }\n        setTimeout(() => {\n          //visited nodes\n          if (nodeA !== undefined)\n            document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\n              \"node node-visited\";\n          if (nodeB !== undefined)\n            document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\n              \"node node-visited\";\n        }, i * 10);\n      }\n    }\n\n    const visualizeBidirectionalGreedySearch = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ visualizingAlgorithm: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]];\n        const finishNode = grid[_finishNode[0]][_finishNode[1]];\n        const visitedNodesInOrder = bidirectionalGreedySearch(\n          grid,\n          startNode,\n          finishNode\n        );\n        const visitedNodesInOrderStart = visitedNodesInOrder[0];\n        const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n        const isShortedPath = visitedNodesInOrder[2];\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\n          visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n          visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n        );\n        console.log('here')\n        this.animateBidirectionalAlgorithm(\n          visitedNodesInOrderStart,\n          visitedNodesInOrderFinish,\n          nodesInShortestPathOrder,\n          isShortedPath\n        );\n      }, 10);\n    }\n\n    //finish animations\n\n    const animateShortestPath = (nodesInShortestPathOrder) => {\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path';\n        }, 50 * i);\n      }\n    }\n\n    //generate mazes\n\n    const animateMaze = (walls) => {\n      for (let i = 0; i <= walls.length; i++) {\n        if (i === walls.length) {\n          setTimeout(() => {\n            this.clearGrid();\n            let newGrid = getNewGridWithMaze(this.state.grid, walls);\n            this.setState({ grid: newGrid, generatingMaze: false });\n          }, i * 10);\n          return;\n        }\n        let wall = walls[i];\n        let node = this.state.grid[wall[0]][wall[1]];\n        node.isWall = true\n        setTimeout(() => {\n          //Walls\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-wall\";\n        }, i * 10);\n      }\n    };\n\n    const generateRandomMaze = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = randomMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    const generateRecursiveDivisionMaze = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    const generateVerticalMaze = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = verticalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n  \n    const generateHorizontalMaze = () => {\n      if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n        return;\n      }\n      this.setState({ generatingMaze: true });\n      setTimeout(() => {\n        const { grid } = this.state;\n        const _startNode = this.state.startNode\n        const _finishNode = this.state.finishNode\n        const startNode = grid[_startNode[0]][_startNode[1]]\n        const finishNode = grid[_finishNode[0]][_finishNode[1]]\n        const walls = horizontalMaze(grid, startNode, finishNode);\n        this.animateMaze(walls);\n      }, 10);\n    }\n    return(\n      <div className=\"main-container\">\n        {/* <button onClick={this.handleNav}>show nav</button> */}\n        <div className=\"visualizer-container\">\n          <Visualizer \n            state={this.state} \n            handleMouseDown={this.handleMouseDown} \n            handleMouseEnter={this.handleMouseEnter} \n            handleMouseUp={this.handleMouseUp}\n          />\n        </div>\n        <Navbar state={this.state} toggleNav={this.handleNav} resetGrid={this.resetGrid} handleMazeTabs={this.handleMazeTabs} genMaze={this.generateMaze} play={this.playAnimation} handleTabs={this.handleTabs} handleItemChange={this.handleItemDescChange} visualizeDijkstra={this.visualizeDijkstra}/>\n      </div>\n    )\n}\n\nconst renderGrid = (state) => {\n    const grid = [];\n    var rowNum = ((window.innerHeight) / 25) + 3\n    var colNum = ((window.innerWidth) / 25) + 2\n    for (let row = 0; row < rowNum; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colNum; col++) {\n        var node = createNode(col, row, state)\n        node.className = 'node'\n        currentRow.push(node);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n}\n\n\n\nconst createNode = (col, row, state) => {\n    const startNode = state.startNode\n    const finishNode = state.finishNode\n    const stopNode = state.prevStop\n    return {\n      col,\n      row,\n      isStart: row === startNode[0] && col === startNode[1],\n      isFinish: row === finishNode[0] && col === finishNode[1],\n      isStop: state.isThereStop ? row === stopNode[0] && col === stopNode[1] : null,\n      distance: Infinity,\n      isVisited: false,\n      isVisitedSecond: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n\n  const rerenderGrid = (state) => {\n    const grid = state.grid\n    const startNode = grid[state.startNode[0]][state.startNode[1]]\n    const finishNode = grid[state.finishNode[0]][state.finishNode[1]]\n    for(let row = 0; row < grid.length; row++){\n      var colNum = grid[row]\n      for(let col = 0; col < colNum.length; col++){\n        var node = grid[row][col]\n        if(node.isWall || node.isWeight || node.isStop){\n          node.isWall = false\n          node.isWeight = false\n          node.isStop = false\n          node.isVisited = false\n        }\n        if(node === startNode){\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-start\";\n        } else if(node === finishNode){\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-finish\";\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node\";\n        }\n      }\n    }\n    return grid\n\n  }\n\n  const getNewGridWithStart = (grid, row, col, prevStart) => {\n    const newGrid = grid.slice();\n    const newStart = newGrid[row][col];\n    const oldStart = newGrid[prevStart[0]][prevStart[1]]\n    const oldNode = {\n      ...oldStart,\n      isStart: !oldStart.isStart\n    }\n    const newNode = {\n      ...newStart,\n      isStart: !newStart.isStart,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStart[0]][prevStart[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithFinish = (grid, row, col, prevFinish) => {\n    const newGrid = grid.slice();\n    if(newGrid[row][col].isStart || newGrid[row][col].isWall) return grid;\n    const newFinish = newGrid[row][col];\n    const oldFinish = newGrid[prevFinish[0]][prevFinish[1]]\n    const oldNode = {\n      ...oldFinish,\n      isFinish: !oldFinish.isFinish\n    }\n    const newNode = {\n      ...newFinish,\n      isFinish: !newFinish.isFinish,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevFinish[0]][prevFinish[1]] = oldNode\n    return newGrid;\n  }\n\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithWeightToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    var newNode = {...node}\n    newNode = {\n      ...node,\n      isWeight: !node.isWeight,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  const getNewGridWithStopToggled = (grid, row, col, prevStop) => {\n    const newGrid = grid.slice();\n    const newStop = newGrid[row][col];\n    if(prevStop.length === 0){\n      const newNode = {\n        ...newStop,\n        isStop: !newStop.isStop,\n      };\n      newGrid[row][col] = newNode;\n      return newGrid;\n    }\n    const oldStop = newGrid[prevStop[0]][prevStop[1]]\n    const oldNode = {\n      ...oldStop,\n      isStop: !oldStop.isStop\n    }\n    const newNode = {\n      ...newStop,\n      isStop: !newStop.isStop,\n    };\n    newGrid[row][col] = newNode;\n    newGrid[prevStop[0]][prevStop[1]] = oldNode\n    return newGrid;\n  };\n\n  const getNewGridWithMaze = (grid, walls) => {\n    let newGrid = grid.slice();\n    for (let wall of walls) {\n      let node = grid[wall[0]][wall[1]];\n      let newNode = {\n        ...node,\n        isWall: true,\n      };\n      newGrid[wall[0]][wall[1]] = newNode;\n    }\n    return newGrid;\n  };\n\n  const getInitialGrid = (numRows, numColumns) => {\n    let grid = [];\n    for (let row = 0; row < numRows; row++) {\n      let currentRow = [];\n      for (let col = 0; col < numColumns; col++) {\n        currentRow.push(createNode(row, col));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const getVisitedNodesInOrder = (\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish\n  ) => {\n    let visitedNodesInOrder = [];\n    let n = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 0; i < n; i++) {\n      if (visitedNodesInOrderStart[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n      }\n      if (visitedNodesInOrderFinish[i] !== undefined) {\n        visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n      }\n    }\n    return visitedNodesInOrder;\n  };\n\n  const getGridWithoutPath = (grid) => {\n    let newGrid = grid.slice();\n    for (let row of grid) {\n      for (let node of row) {\n        let newNode = {\n          ...node,\n          distance: Infinity,\n          totalDistance: Infinity,\n          isVisited: false,\n          isVisitedSecond: false,\n          isShortest: false,\n          previousNode: null,\n          isWall: false,\n          isWeight: false,\n          isStop: false\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    return newGrid;\n  };\n\n  export default MainContainer;"]},"metadata":{},"sourceType":"module"}