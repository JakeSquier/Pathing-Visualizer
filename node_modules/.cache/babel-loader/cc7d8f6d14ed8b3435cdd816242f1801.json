{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n\n    function aStar(grid, startNode, finishNode) {\n      let stopNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      //setting up stop var to determine what to do\n      var isStop;\n\n      if (stopNode === false) {\n        isStop = false;\n      } else {\n        isStop = true;\n      }\n\n      if (!isStop) {\n        console.log('here');\n        const visitedNodesInOrder = []; //grabbing all nodes\n\n        var unvisitedNodes = getAllNodes(grid); //setting node distances\n\n        unvisitedNodes.forEach(node => {\n          if (node === startNode) {\n            node.distance = 0;\n          } else {\n            node.distance = Infinity;\n          }\n        }); //starting algorithim\n\n        var count = 0;\n\n        while (!!unvisitedNodes) {\n          count++;\n          sortNodesByDistance(unvisitedNodes, false);\n          console.log(unvisitedNodes);\n          const closestNode = unvisitedNodes.shift();\n          console.log(closestNode); //checking if current node is a wall\n\n          if (closestNode.isWall) continue; //checking if node has no where to venture to\n\n          if (closestNode.distance === Infinity) return visitedNodesInOrder; //update current node as visited then pushing it to visitednodes array\n\n          closestNode.isVisited = true;\n          visitedNodesInOrder.push(closestNode); //checking to see is closest node is the finishnode\n\n          if (closestNode === finishNode) return visitedNodesInOrder; //get current nodes neighbors\n\n          updateUnvisitedNeighbors(closestNode, grid, false);\n        }\n      } else if (isStop) {\n        //going to repeat normal function yet twice for stop\n        const visitedNodesInOrder = [[], []]; //grabbing all nodes\n\n        var unvisitedNodes = getAllNodes(grid);\n        var unvisitedNodesSecond = getAllNodes(grid);\n        unvisitedNodes.forEach(node => {\n          if (node === startNode) {\n            node.distance = 0;\n          } else if (node === stopNode) {\n            node.distanceSecond = 0;\n          } else {\n            node.distance = Infinity;\n            node.distanceSecond = Infinity;\n          }\n        }); //getting path from start to stop\n\n        while (!!unvisitedNodes) {\n          sortNodesByDistance(unvisitedNodes, false);\n          const closestNode = unvisitedNodes.shift(); //checking if current node is a wall\n\n          if (closestNode.isWall) continue; //checking if node has no where to venture to\n\n          if (closestNode.distance === Infinity) break; //update current node as visited then pushing it to visitednodes array\n\n          closestNode.isVisited = true;\n          visitedNodesInOrder[0].push(closestNode); //checking to see is closest node is the finishnode\n\n          if (closestNode === stopNode) break; //get current nodes neighbors\n\n          updateUnvisitedNeighbors(closestNode, grid, false);\n        } //getting path from stop to finish\n\n\n        var cout = 0;\n\n        while (!!unvisitedNodesSecond) {\n          sortNodesByDistance(unvisitedNodesSecond, true);\n          const closestNode = unvisitedNodesSecond.shift();\n          if (closestNode.isWall) continue;\n          if (closestNode.distanceSecond === Infinity) break;\n          closestNode.isVisitedSecond = true;\n          visitedNodesInOrder[1].push(closestNode);\n          if (closestNode === finishNode) break;\n          updateUnvisitedNeighbors(closestNode, grid, true);\n        }\n\n        return visitedNodesInOrder;\n      }\n    }\n\n    function sortNodesByDistance(unvisitedNodes, finishNode, isStop) {\n      // calculating f\n      const f = finishNode;\n      unvisitedNodes.sort((nodeA, nodeB) => {\n        const af = Math.abs(f.row - nodeA.row) + Math.abs(f.col - nodeA.col);\n        const bf = Math.abs(f.row - nodeB.row) + Math.abs(f.col - nodeB.col);\n\n        if (isStop) {\n          return nodeA.distanceSecond + af - (nodeB.distanceSecond + bf);\n        } else {\n          return nodeA.distance + af - (nodeB.distance + bf);\n        }\n      });\n    }\n\n    function updateUnvisitedNeighbors(node, grid, isStop) {\n      const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n\n      for (const neighbor of unvisitedNeighbors) {\n        //neighbor.distance = node.distance + 1;\n        isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n      }\n    }\n\n    function getUnvisitedNeighbors(node, grid, isStop) {\n      const neighbors = [];\n      const {\n        col,\n        row\n      } = node;\n      if (row > 0) neighbors.push(grid[row - 1][col]);\n      if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n      if (col > 0) neighbors.push(grid[row][col - 1]);\n      if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n      return neighbors.filter(neighbor => {\n        //isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited\n        if (isStop === true) {\n          return !neighbor.isVisitedSecond;\n        } else if (isStop === false) {\n          return !neighbor.isVisited;\n        }\n      });\n    }\n\n    function getAllNodes(grid) {\n      const nodes = [];\n\n      for (const row of grid) {\n        for (const node of row) {\n          nodes.push(node);\n        }\n      }\n\n      return nodes;\n    }\n\n    const grid = message.data[0];\n    const startNode = message.data[1];\n    const finishNode = message.data[2];\n    const stopNode = message.data[3];\n    const visitedNodesInorder = aStar(grid, startNode, finishNode, stopNode);\n    console.log(visitedNodesInorder);\n    postMessage([]);\n  });\n});","map":{"version":3,"names":["self","addEventListener","message","aStar","grid","startNode","finishNode","stopNode","isStop","console","log","visitedNodesInOrder","unvisitedNodes","getAllNodes","forEach","node","distance","Infinity","count","sortNodesByDistance","closestNode","shift","isWall","isVisited","push","updateUnvisitedNeighbors","unvisitedNodesSecond","distanceSecond","cout","isVisitedSecond","f","sort","nodeA","nodeB","af","Math","abs","row","col","bf","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","length","filter","nodes","data","visitedNodesInorder","postMessage"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/aStarWorker.js"],"sourcesContent":["\n// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n      if (!message) return;\n\n        function aStar(grid, startNode, finishNode, stopNode=false){\n            //setting up stop var to determine what to do\n            var isStop;\n            if(stopNode===false){\n              isStop = false\n            } else {\n              isStop = true\n            }\n\n            if(!isStop){\n            console.log('here')\n            const visitedNodesInOrder = []\n            //grabbing all nodes\n            var unvisitedNodes = getAllNodes(grid)\n            //setting node distances\n            unvisitedNodes.forEach((node) => {\n                if(node === startNode){\n                    node.distance = 0\n                } else {\n                    node.distance = Infinity\n                }\n            })\n        \n            //starting algorithim\n            var count = 0\n            while(!!unvisitedNodes){\n                count++      \n                sortNodesByDistance(unvisitedNodes, false)\n                console.log(unvisitedNodes)\n                \n                const closestNode = unvisitedNodes.shift()\n                console.log(closestNode)\n        \n                //checking if current node is a wall\n                if(closestNode.isWall) continue\n        \n                //checking if node has no where to venture to\n                if(closestNode.distance === Infinity) return visitedNodesInOrder\n                //update current node as visited then pushing it to visitednodes array\n                closestNode.isVisited = true\n                visitedNodesInOrder.push(closestNode)\n\n                //checking to see is closest node is the finishnode\n                if(closestNode === finishNode) return visitedNodesInOrder\n        \n                //get current nodes neighbors\n                updateUnvisitedNeighbors(closestNode, grid, false);\n            }\n            } else if(isStop){\n                //going to repeat normal function yet twice for stop\n                const visitedNodesInOrder = [[],[]]\n                //grabbing all nodes\n                var unvisitedNodes = getAllNodes(grid)\n            \n                var unvisitedNodesSecond = getAllNodes(grid)\n            \n                unvisitedNodes.forEach((node) => {\n                    if(node === startNode){\n                        node.distance = 0\n                    } else if(node === stopNode) {\n                        node.distanceSecond = 0\n                    } else {\n                        node.distance = Infinity\n                        node.distanceSecond = Infinity\n                    }\n                })\n            \n                //getting path from start to stop\n                while(!!unvisitedNodes) {\n                    sortNodesByDistance(unvisitedNodes, false)\n                    const closestNode = unvisitedNodes.shift()\n            \n                    //checking if current node is a wall\n                    if(closestNode.isWall) continue\n            \n                    //checking if node has no where to venture to\n                    if(closestNode.distance === Infinity) break\n            \n                    //update current node as visited then pushing it to visitednodes array\n                    closestNode.isVisited = true\n                    visitedNodesInOrder[0].push(closestNode)\n            \n                    //checking to see is closest node is the finishnode\n                    if(closestNode === stopNode) break\n            \n                    //get current nodes neighbors\n                    updateUnvisitedNeighbors(closestNode, grid, false);\n                }\n                \n                //getting path from stop to finish\n                var cout = 0\n                while(!!unvisitedNodesSecond) {\n                    \n                    sortNodesByDistance(unvisitedNodesSecond, true)\n\n                    const closestNode = unvisitedNodesSecond.shift()\n            \n                    if(closestNode.isWall) continue\n            \n                    if(closestNode.distanceSecond === Infinity) break\n\n                    closestNode.isVisitedSecond = true\n                    visitedNodesInOrder[1].push(closestNode)\n            \n                    if(closestNode === finishNode) break\n            \n                    updateUnvisitedNeighbors(closestNode, grid, true)\n                }\n                return visitedNodesInOrder\n            }\n        }\n\n        function sortNodesByDistance(unvisitedNodes, finishNode, isStop) {\n            // calculating f\n            const f = finishNode\n            unvisitedNodes.sort((nodeA, nodeB) => {\n                const af = (Math.abs(f.row - nodeA.row)+(Math.abs(f.col - nodeA.col)))\n                const bf = (Math.abs(f.row - nodeB.row)+(Math.abs(f.col - nodeB.col)))\n\n                if(isStop){\n                    return (nodeA.distanceSecond+af) - (nodeB.distanceSecond+bf)\n                } else {\n                    return (nodeA.distance+af) - (nodeB.distance+bf)\n                }\n            });\n        }\n        \n        function updateUnvisitedNeighbors(node, grid, isStop) {\n            const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, isStop);\n            for (const neighbor of unvisitedNeighbors) {\n            //neighbor.distance = node.distance + 1;\n            isStop ? neighbor.distanceSecond = node.distanceSecond + 1 : neighbor.distance = node.distance + 1;\n        \n            neighbor.previousNode = node;\n            }\n        }\n        \n        function getUnvisitedNeighbors(node, grid, isStop) {\n            const neighbors = [];\n            const {col, row} = node;\n            if (row > 0) neighbors.push(grid[row - 1][col]);\n            if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n            if (col > 0) neighbors.push(grid[row][col - 1]);\n            if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n            return neighbors.filter((neighbor) => {\n            //isStop ? !neighbor.isVisitedSecond : !neighbor.isVisited\n            if(isStop===true){\n                return !neighbor.isVisitedSecond\n            } else if(isStop===false){\n                return !neighbor.isVisited\n            }\n            });\n        }\n        \n        function getAllNodes(grid) {\n            const nodes = [];\n            for (const row of grid) {\n            for (const node of row) {\n                nodes.push(node);\n            }\n            }\n            return nodes;\n        }\n\n        const grid = message.data[0]\n        const startNode = message.data[1]\n        const finishNode = message.data[2]\n        const stopNode = message.data[3]\n        const visitedNodesInorder = aStar(grid, startNode, finishNode, stopNode)\n        console.log(visitedNodesInorder)\n\n        postMessage([]);\n    })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}