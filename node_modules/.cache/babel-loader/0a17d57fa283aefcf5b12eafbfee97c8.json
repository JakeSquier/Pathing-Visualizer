{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n    const stop = message.data[1];\n    var startNode, stopNode, finishNode;\n    message.data[0].map(node => {\n      if (node.isStart === true) startNode = node;\n      if (node.isStop === true) stopNode = node;\n      if (node.isFinish === true) finishNode = node;\n    });\n    console.log(message.data, stop);\n    var nodesInShortestPathOrder = [];\n\n    if (!stop) {\n      let currentNode = message.data[0];\n\n      while (currentNode !== null) {\n        if (currentNode.isStart == true) break;\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n      }\n\n      postMessage(nodesInShortestPathOrder);\n    } else {\n      var firstPath = [];\n      var secondPath = [];\n      var finishNode = message.data[0][0];\n      var stopNode = message.data[0][1];\n      console.log(finishNode, stopNode);\n      postMessage([...firstPath, ...secondPath.reverse()]);\n    }\n  });\n});","map":{"version":3,"names":["self","addEventListener","message","stop","data","startNode","stopNode","finishNode","map","node","isStart","isStop","isFinish","console","log","nodesInShortestPathOrder","currentNode","unshift","previousNode","postMessage","firstPath","secondPath","reverse"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/pathGrabWorker.js"],"sourcesContent":["// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n\n        if (!message) return;\n\n        const stop = message.data[1]\n\n        var startNode, stopNode, finishNode\n\n        message.data[0].map((node) => {\n            if(node.isStart === true) startNode = node\n\n            if(node.isStop === true) stopNode = node\n\n            if(node.isFinish === true) finishNode = node\n        })\n        console.log(message.data, stop)\n\n        var nodesInShortestPathOrder = [];\n\n        if(!stop) {\n            let currentNode = message.data[0]\n            while (currentNode !== null) {\n\n                if(currentNode.isStart==true) break;\n\n                nodesInShortestPathOrder.unshift(currentNode);\n                currentNode = currentNode.previousNode;\n            }\n\n            postMessage(nodesInShortestPathOrder)\n        } else {\n            var firstPath = []\n            var secondPath = []\n            var finishNode = message.data[0][0]\n            var stopNode = message.data[0][1]\n\n            console.log(finishNode, stopNode)\n\n            postMessage([...firstPath, ...secondPath.reverse()])\n        }\n    })\n}"],"mappings":"AAAA;AACA,IAAIA,IAAI,GAAG,IAAX;AACA,gBAAe,MAAM;EACjB;EACAA,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAiCC,OAAO,IAAI;IAExC,IAAI,CAACA,OAAL,EAAc;IAEd,MAAMC,IAAI,GAAGD,OAAO,CAACE,IAAR,CAAa,CAAb,CAAb;IAEA,IAAIC,SAAJ,EAAeC,QAAf,EAAyBC,UAAzB;IAEAL,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgBI,GAAhB,CAAqBC,IAAD,IAAU;MAC1B,IAAGA,IAAI,CAACC,OAAL,KAAiB,IAApB,EAA0BL,SAAS,GAAGI,IAAZ;MAE1B,IAAGA,IAAI,CAACE,MAAL,KAAgB,IAAnB,EAAyBL,QAAQ,GAAGG,IAAX;MAEzB,IAAGA,IAAI,CAACG,QAAL,KAAkB,IAArB,EAA2BL,UAAU,GAAGE,IAAb;IAC9B,CAND;IAOAI,OAAO,CAACC,GAAR,CAAYZ,OAAO,CAACE,IAApB,EAA0BD,IAA1B;IAEA,IAAIY,wBAAwB,GAAG,EAA/B;;IAEA,IAAG,CAACZ,IAAJ,EAAU;MACN,IAAIa,WAAW,GAAGd,OAAO,CAACE,IAAR,CAAa,CAAb,CAAlB;;MACA,OAAOY,WAAW,KAAK,IAAvB,EAA6B;QAEzB,IAAGA,WAAW,CAACN,OAAZ,IAAqB,IAAxB,EAA8B;QAE9BK,wBAAwB,CAACE,OAAzB,CAAiCD,WAAjC;QACAA,WAAW,GAAGA,WAAW,CAACE,YAA1B;MACH;;MAEDC,WAAW,CAACJ,wBAAD,CAAX;IACH,CAXD,MAWO;MACH,IAAIK,SAAS,GAAG,EAAhB;MACA,IAAIC,UAAU,GAAG,EAAjB;MACA,IAAId,UAAU,GAAGL,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgB,CAAhB,CAAjB;MACA,IAAIE,QAAQ,GAAGJ,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgB,CAAhB,CAAf;MAEAS,OAAO,CAACC,GAAR,CAAYP,UAAZ,EAAwBD,QAAxB;MAEAa,WAAW,CAAC,CAAC,GAAGC,SAAJ,EAAe,GAAGC,UAAU,CAACC,OAAX,EAAlB,CAAD,CAAX;IACH;EACJ,CAxCD;AAyCH,CA3CD"},"metadata":{},"sourceType":"module"}