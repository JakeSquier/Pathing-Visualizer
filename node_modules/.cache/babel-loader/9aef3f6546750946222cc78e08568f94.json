{"ast":null,"code":"// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default (() => {\n  // eslint-disable-line no-restricted-globals\n  self.addEventListener(\"message\", message => {\n    if (!message) return;\n\n    function depthFirstSearch(grid, startNode, finishNode) {\n      let stopNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var isStop;\n\n      if (stopNode === false) {\n        isStop = false;\n      } else {\n        isStop = true;\n      }\n\n      if (!isStop) {\n        const visitedNodesInOrder = []; // stack to keep track of the visited nodes\n\n        const stack = [];\n        stack.push(startNode);\n\n        while (stack.length) {\n          const currNode = stack.pop(); // if the finsih node is reached then we return the visitedNodes array\n\n          if (currNode === finishNode) return visitedNodesInOrder; // we skip the nodes which are walls, start node or finish node\n\n          if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n            currNode.isVisited = true;\n            visitedNodesInOrder.push(currNode);\n            const {\n              row,\n              col\n            } = currNode;\n            updateUnvisitedNeighbours(row, col, stack, grid, currNode);\n          }\n        }\n      } else if (isStop) {}\n    }\n  });\n  const grid = message.data[0];\n  const startNode = message.data[1];\n  const finishNode = message.data[2];\n  const stopNode = message.data[3];\n});\n\nfunction updateUnvisitedNeighbours(row, col, stack, grid, currNode) {\n  let next;\n\n  if (row > 0) {\n    next = grid[row - 1][col];\n\n    if (!next.isVisited) {\n      next.previousNode = currNode;\n      stack.push(next);\n    }\n  }\n\n  if (row < grid.length - 1) {\n    next = grid[row + 1][col];\n\n    if (!next.isVisited) {\n      next.previousNode = currNode;\n      stack.push(next);\n    }\n  }\n\n  if (col < grid[0].length - 1) {\n    next = grid[row][col + 1];\n\n    if (!next.isVisited) {\n      next.previousNode = currNode;\n      stack.push(next);\n    }\n  }\n\n  if (col > 0) {\n    next = grid[row][col - 1];\n\n    if (!next.isVisited) {\n      next.previousNode = currNode;\n      stack.push(next);\n    }\n  }\n}","map":{"version":3,"names":["self","addEventListener","message","depthFirstSearch","grid","startNode","finishNode","stopNode","isStop","visitedNodesInOrder","stack","push","length","currNode","pop","isWall","isStart","isVisited","row","col","updateUnvisitedNeighbours","data","next","previousNode"],"sources":["/Users/Jake.Squier/SE-Projects/pathing-visualizer/pathing-visualizer/src/workers/depthFirstSearchWorker.js"],"sourcesContent":["// eslint-disable-next-line import/no-anonymous-default-export\nvar self = this;\nexport default () => {\n    // eslint-disable-line no-restricted-globals\n    self.addEventListener(\"message\", message => {\n        if (!message) return;\n\n        function depthFirstSearch(grid, startNode, finishNode, stopNode=false) {\n\n            var isStop;\n            if(stopNode===false){\n                isStop = false\n            } else {\n                isStop = true\n            }\n\n            if(!isStop) {\n\n                const visitedNodesInOrder = [];\n                // stack to keep track of the visited nodes\n                const stack = []; \n                stack.push(startNode);\n                while (stack.length) {\n                    const currNode = stack.pop();\n                    // if the finsih node is reached then we return the visitedNodes array\n                    if (currNode === finishNode) \n                    return visitedNodesInOrder;\n        \n                    // we skip the nodes which are walls, start node or finish node\n                    if (!currNode.isWall && (currNode.isStart || !currNode.isVisited)) {\n                    currNode.isVisited = true;\n                    visitedNodesInOrder.push(currNode);\n                    const { row, col } = currNode;\n                    updateUnvisitedNeighbours(row, col, stack, grid,currNode);\n                    }\n                }\n            } else if(isStop) {\n                \n            }\n        }\n    })\n\n    const grid = message.data[0]\n    const startNode = message.data[1]\n    const finishNode = message.data[2]\n    const stopNode = message.data[3]\n}\n\nfunction  updateUnvisitedNeighbours(row, col, stack, grid,currNode) {\n    let next;\n    if (row > 0) {\n      next = grid[row - 1][col];\n      if (!next.isVisited) {\n        next.previousNode = currNode;\n        stack.push(next);\n      }\n    }\n    if (row < grid.length - 1) {\n      next = grid[row + 1][col];\n      if (!next.isVisited) {\n        next.previousNode = currNode;\n        stack.push(next);\n      }\n    }\n    if (col < grid[0].length - 1) {\n      next = grid[row][col + 1];\n      if (!next.isVisited) {\n        next.previousNode = currNode;\n        stack.push(next);\n      }\n    }\n    if (col > 0) {\n      next = grid[row][col - 1];\n      if (!next.isVisited) {\n        next.previousNode = currNode;\n        stack.push(next);\n      }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}